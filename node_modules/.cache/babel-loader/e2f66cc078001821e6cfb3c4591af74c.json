{"ast":null,"code":"import config from 'global-config';\nexport function removeCSSClass(ele, cls) {\n  const reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n  ele.className = ele.className.replace(reg, ' ');\n}\nexport function addCSSClass(ele, cls) {\n  ele.classList.add(cls);\n}\nexport const toAbsoluteUrl = pathname => config.BASE_URL + pathname; // export function setupAxios(axios, store) {\n//   axios.interceptors.request.use(\n//     config => {\n//       const {\n//         auth: { authToken }\n//       } = store.getState();\n//       if (authToken) {\n//         config.headers.Authorization = `Bearer ${authToken}`;\n//       }\n//       return config;\n//     },\n//     err => Promise.reject(err)\n//   );\n// }\n\n/*  removeStorage: removes a key from localStorage and its sibling expiracy key\n    params:\n        key <string>     : localStorage key to remove\n    returns:\n        <boolean> : telling if operation succeeded\n */\n\nexport function removeStorage(key) {\n  try {\n    localStorage.setItem(key, '');\n    localStorage.setItem(key + '_expiresIn', '');\n  } catch (e) {\n    console.log('removeStorage: Error removing key [' + key + '] from localStorage: ' + JSON.stringify(e));\n    return false;\n  }\n\n  return true;\n}\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\n    params:\n        key <string> : localStorage key\n    returns:\n        <string> : value of localStorage key\n        null : in case of expired key or failure\n */\n\nexport function getStorage(key) {\n  const now = Date.now(); //epoch time, lets deal only with integer\n  // set expiration for storage\n\n  let expiresIn = localStorage.getItem(key + '_expiresIn');\n\n  if (expiresIn === undefined || expiresIn === null) {\n    expiresIn = 0;\n  }\n\n  expiresIn = Math.abs(expiresIn);\n\n  if (expiresIn < now) {\n    // Expired\n    removeStorage(key);\n    return null;\n  } else {\n    try {\n      const value = localStorage.getItem(key);\n      return value;\n    } catch (e) {\n      console.log('getStorage: Error reading key [' + key + '] from localStorage: ' + JSON.stringify(e));\n      return null;\n    }\n  }\n}\n/*  setStorage: writes a key into localStorage setting a expire time\n    params:\n        key <string>     : localStorage key\n        value <string>   : localStorage value\n        expires <number> : number of seconds from now to expire the key\n    returns:\n        <boolean> : telling if operation succeeded\n */\n\nexport function setStorage(key, value, expires) {\n  if (expires === undefined || expires === null) {\n    expires = 24 * 60 * 60; // default: seconds for 1 day\n  }\n\n  const now = Date.now(); //millisecs since epoch time, lets deal only with integer\n\n  const schedule = now + expires * 1000;\n\n  try {\n    localStorage.setItem(key, value);\n    localStorage.setItem(key + '_expiresIn', schedule);\n  } catch (e) {\n    console.log('setStorage: Error setting key [' + key + '] in localStorage: ' + JSON.stringify(e));\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/themes/_metronic/utils/utils.js"],"names":["config","removeCSSClass","ele","cls","reg","RegExp","className","replace","addCSSClass","classList","add","toAbsoluteUrl","pathname","BASE_URL","removeStorage","key","localStorage","setItem","e","console","log","JSON","stringify","getStorage","now","Date","expiresIn","getItem","undefined","Math","abs","value","setStorage","expires","schedule"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AAEA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkC;AACxC,QAAMC,GAAG,GAAG,IAAIC,MAAJ,CAAW,YAAYF,GAAZ,GAAkB,SAA7B,CAAZ;AACAD,EAAAA,GAAG,CAACI,SAAJ,GAAgBJ,GAAG,CAACI,SAAJ,CAAcC,OAAd,CAAsBH,GAAtB,EAA2B,GAA3B,CAAhB;AACA;AAED,OAAO,SAASI,WAAT,CAAqBN,GAArB,EAA0BC,GAA1B,EAA+B;AACrCD,EAAAA,GAAG,CAACO,SAAJ,CAAcC,GAAd,CAAkBP,GAAlB;AACA;AAED,OAAO,MAAMQ,aAAa,GAAGC,QAAQ,IAAIZ,MAAM,CAACa,QAAP,GAAkBD,QAApD,C,CAEP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,aAAT,CAAuBC,GAAvB,EAA4B;AAClC,MAAI;AACHC,IAAAA,YAAY,CAACC,OAAb,CAAqBF,GAArB,EAA0B,EAA1B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqBF,GAAG,GAAG,YAA3B,EAAyC,EAAzC;AACA,GAHD,CAGE,OAAOG,CAAP,EAAU;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCL,GAAxC,GAA8C,uBAA9C,GAAwEM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAApF;AACA,WAAO,KAAP;AACA;;AACD,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,UAAT,CAAoBR,GAApB,EAAyB;AAC/B,QAAMS,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAD+B,CACP;AACxB;;AACA,MAAIE,SAAS,GAAGV,YAAY,CAACW,OAAb,CAAqBZ,GAAG,GAAG,YAA3B,CAAhB;;AACA,MAAIW,SAAS,KAAKE,SAAd,IAA2BF,SAAS,KAAK,IAA7C,EAAmD;AAClDA,IAAAA,SAAS,GAAG,CAAZ;AACA;;AAEDA,EAAAA,SAAS,GAAGG,IAAI,CAACC,GAAL,CAASJ,SAAT,CAAZ;;AACA,MAAIA,SAAS,GAAGF,GAAhB,EAAqB;AACpB;AACAV,IAAAA,aAAa,CAACC,GAAD,CAAb;AACA,WAAO,IAAP;AACA,GAJD,MAIO;AACN,QAAI;AACH,YAAMgB,KAAK,GAAGf,YAAY,CAACW,OAAb,CAAqBZ,GAArB,CAAd;AACA,aAAOgB,KAAP;AACA,KAHD,CAGE,OAAOb,CAAP,EAAU;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCL,GAApC,GAA0C,uBAA1C,GAAoEM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAAhF;AACA,aAAO,IAAP;AACA;AACD;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,UAAT,CAAoBjB,GAApB,EAAyBgB,KAAzB,EAAgCE,OAAhC,EAAyC;AAC/C,MAAIA,OAAO,KAAKL,SAAZ,IAAyBK,OAAO,KAAK,IAAzC,EAA+C;AAC9CA,IAAAA,OAAO,GAAG,KAAK,EAAL,GAAU,EAApB,CAD8C,CACtB;AACxB;;AAED,QAAMT,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAL+C,CAKvB;;AACxB,QAAMU,QAAQ,GAAGV,GAAG,GAAGS,OAAO,GAAG,IAAjC;;AACA,MAAI;AACHjB,IAAAA,YAAY,CAACC,OAAb,CAAqBF,GAArB,EAA0BgB,KAA1B;AACAf,IAAAA,YAAY,CAACC,OAAb,CAAqBF,GAAG,GAAG,YAA3B,EAAyCmB,QAAzC;AACA,GAHD,CAGE,OAAOhB,CAAP,EAAU;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCL,GAApC,GAA0C,qBAA1C,GAAkEM,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAA9E;AACA,WAAO,KAAP;AACA;;AACD,SAAO,IAAP;AACA","sourcesContent":["import config from 'global-config';\n\nexport function removeCSSClass(ele, cls) {\n\tconst reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\tele.className = ele.className.replace(reg, ' ');\n}\n\nexport function addCSSClass(ele, cls) {\n\tele.classList.add(cls);\n}\n\nexport const toAbsoluteUrl = pathname => config.BASE_URL + pathname;\n\n// export function setupAxios(axios, store) {\n//   axios.interceptors.request.use(\n//     config => {\n//       const {\n//         auth: { authToken }\n//       } = store.getState();\n\n//       if (authToken) {\n//         config.headers.Authorization = `Bearer ${authToken}`;\n//       }\n\n//       return config;\n//     },\n//     err => Promise.reject(err)\n//   );\n// }\n\n/*  removeStorage: removes a key from localStorage and its sibling expiracy key\n    params:\n        key <string>     : localStorage key to remove\n    returns:\n        <boolean> : telling if operation succeeded\n */\nexport function removeStorage(key) {\n\ttry {\n\t\tlocalStorage.setItem(key, '');\n\t\tlocalStorage.setItem(key + '_expiresIn', '');\n\t} catch (e) {\n\t\tconsole.log('removeStorage: Error removing key [' + key + '] from localStorage: ' + JSON.stringify(e));\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\n    params:\n        key <string> : localStorage key\n    returns:\n        <string> : value of localStorage key\n        null : in case of expired key or failure\n */\nexport function getStorage(key) {\n\tconst now = Date.now(); //epoch time, lets deal only with integer\n\t// set expiration for storage\n\tlet expiresIn = localStorage.getItem(key + '_expiresIn');\n\tif (expiresIn === undefined || expiresIn === null) {\n\t\texpiresIn = 0;\n\t}\n\n\texpiresIn = Math.abs(expiresIn);\n\tif (expiresIn < now) {\n\t\t// Expired\n\t\tremoveStorage(key);\n\t\treturn null;\n\t} else {\n\t\ttry {\n\t\t\tconst value = localStorage.getItem(key);\n\t\t\treturn value;\n\t\t} catch (e) {\n\t\t\tconsole.log('getStorage: Error reading key [' + key + '] from localStorage: ' + JSON.stringify(e));\n\t\t\treturn null;\n\t\t}\n\t}\n}\n/*  setStorage: writes a key into localStorage setting a expire time\n    params:\n        key <string>     : localStorage key\n        value <string>   : localStorage value\n        expires <number> : number of seconds from now to expire the key\n    returns:\n        <boolean> : telling if operation succeeded\n */\nexport function setStorage(key, value, expires) {\n\tif (expires === undefined || expires === null) {\n\t\texpires = 24 * 60 * 60; // default: seconds for 1 day\n\t}\n\n\tconst now = Date.now(); //millisecs since epoch time, lets deal only with integer\n\tconst schedule = now + expires * 1000;\n\ttry {\n\t\tlocalStorage.setItem(key, value);\n\t\tlocalStorage.setItem(key + '_expiresIn', schedule);\n\t} catch (e) {\n\t\tconsole.log('setStorage: Error setting key [' + key + '] in localStorage: ' + JSON.stringify(e));\n\t\treturn false;\n\t}\n\treturn true;\n}\n"]},"metadata":{},"sourceType":"module"}