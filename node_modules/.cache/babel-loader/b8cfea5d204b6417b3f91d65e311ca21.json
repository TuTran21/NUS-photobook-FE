{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/Test/components/TestList/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport TestQueries from 'graphql/queries/Test/';\nimport { useLazyQuery } from '@apollo/client';\nimport { Button } from '@material-ui/core';\nimport TestListItem from 'app/views/components/Test/TestListItem';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator';\nimport TestListSkeleton from 'app/views/components/Skeletons/TestListSkeleton';\nconst Wrapper = styled.div``;\nconst LoadingWrapper = styled.div`\n\theight: 400px;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\nconst NoTestFoundWrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\theight: 220px;\n`;\n\nfunction TestList(props) {\n  const {\n    dispatch,\n    addTest,\n    history\n  } = props;\n  const [queryCondition, setQueryCondition] = useState({\n    offset: 0,\n    limit: 10\n  });\n  const [getTests, {\n    loading,\n    data,\n    error\n  }] = useLazyQuery(TestQueries.GET_TESTS, {\n    pollInterval: 10000,\n    variables: {\n      offset: queryCondition.offset,\n      limit: queryCondition.limit\n    }\n  });\n\n  const handleLoadMore = () => {\n    const newQueryCondition = {\n      offset: queryCondition.offset,\n      limit: queryCondition.limit + 10\n    };\n    setQueryCondition(newQueryCondition);\n  };\n\n  useEffect(() => {\n    getTests();\n  }, [queryCondition]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(TestListSkeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 10\n      }\n    });\n  }\n\n  if (!data || !data.tests.length > 0) {\n    return /*#__PURE__*/React.createElement(NoTestFoundWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 10\n      }\n    }, \"No test found\");\n  }\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(NoTestFoundWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 10\n      }\n    }, \"Something went wrong, please try again later\");\n  }\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }\n  }, data.tests.map((test, idx) => {\n    return /*#__PURE__*/React.createElement(TestListItem, {\n      key: idx,\n      dispatch: dispatch,\n      history: history,\n      test: test,\n      addTest: addTest,\n      hasTakeTestButtons: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 6\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginTop: '20px',\n      marginBottom: '20px'\n    },\n    size: \"large\",\n    variant: \"contained\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: () => handleLoadMore(),\n    disabled: data && data.tests && data.tests.length < queryCondition.limit ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }\n  }, \"Load more\"));\n}\n\nexport default TestList;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/Test/components/TestList/index.js"],"names":["React","useState","useEffect","styled","TestQueries","useLazyQuery","Button","TestListItem","LoadingIndicator","TestListSkeleton","Wrapper","div","LoadingWrapper","NoTestFoundWrapper","TestList","props","dispatch","addTest","history","queryCondition","setQueryCondition","offset","limit","getTests","loading","data","error","GET_TESTS","pollInterval","variables","handleLoadMore","newQueryCondition","tests","length","map","test","idx","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport TestQueries from 'graphql/queries/Test/';\nimport { useLazyQuery } from '@apollo/client';\nimport { Button } from '@material-ui/core';\nimport TestListItem from 'app/views/components/Test/TestListItem';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator';\nimport TestListSkeleton from 'app/views/components/Skeletons/TestListSkeleton';\n\nconst Wrapper = styled.div``;\nconst LoadingWrapper = styled.div`\n\theight: 400px;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n\nconst NoTestFoundWrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\theight: 220px;\n`;\n\nfunction TestList(props) {\n\tconst { dispatch, addTest, history } = props;\n\tconst [queryCondition, setQueryCondition] = useState({ offset: 0, limit: 10 });\n\tconst [getTests, { loading, data, error }] = useLazyQuery(TestQueries.GET_TESTS, {\n\t\tpollInterval: 10000,\n\t\tvariables: { offset: queryCondition.offset, limit: queryCondition.limit },\n\t});\n\n\tconst handleLoadMore = () => {\n\t\tconst newQueryCondition = { offset: queryCondition.offset, limit: queryCondition.limit + 10 };\n\t\tsetQueryCondition(newQueryCondition);\n\t};\n\n\tuseEffect(() => {\n\t\tgetTests();\n\t}, [queryCondition]);\n\n\tif (loading) {\n\t\treturn <TestListSkeleton></TestListSkeleton>;\n\t}\n\n\tif (!data || !data.tests.length > 0) {\n\t\treturn <NoTestFoundWrapper>No test found</NoTestFoundWrapper>;\n\t}\n\n\tif (error) {\n\t\treturn <NoTestFoundWrapper>Something went wrong, please try again later</NoTestFoundWrapper>;\n\t}\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t{data.tests.map((test, idx) => {\n\t\t\t\treturn (\n\t\t\t\t\t<TestListItem\n\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\t\thistory={history}\n\t\t\t\t\t\ttest={test}\n\t\t\t\t\t\taddTest={addTest}\n\t\t\t\t\t\thasTakeTestButtons={true}\n\t\t\t\t\t></TestListItem>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t<Button\n\t\t\t\tstyle={{ marginTop: '20px', marginBottom: '20px' }}\n\t\t\t\tsize=\"large\"\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tfullWidth\n\t\t\t\tonClick={() => handleLoadMore()}\n\t\t\t\tdisabled={data && data.tests && data.tests.length < queryCondition.limit ? true : false}\n\t\t\t>\n\t\t\t\tLoad more\n\t\t\t</Button>\n\t\t</Wrapper>\n\t);\n}\n\nexport default TestList;\n"]},"metadata":{},"sourceType":"module"}