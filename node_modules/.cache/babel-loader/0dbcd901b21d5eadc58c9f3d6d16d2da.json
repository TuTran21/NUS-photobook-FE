{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/AuthForms/LoginForm.js\";\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { TextField, Button } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { withSnackbar } from 'notistack';\nimport AuthActions from 'state/ducks/auth/actions';\nimport 'app/themes/_metronic/_assets/sass/pages/login/login-1.scss';\nimport { setToken } from 'utils/utils';\nimport { getMessage } from 'utils/messageConvert'; // import * as auth from '../../store/ducks/auth.duck';\n// import { login } from '../../crud/auth.crud';\n\nfunction LoginForm(props) {\n  const {\n    intl,\n    handleLogin,\n    handleChangeFormType,\n    loginRes,\n    dispatch\n  } = props;\n  const [loadingButtonStyle, setLoadingButtonStyle] = useState({\n    paddingRight: '2.5rem'\n  });\n  const [statusState, setStatus] = useState('');\n  const [isSubmittingState, setSubmitting] = useState(false);\n\n  const loginError = err => {\n    let message = getMessage(err.message);\n    props.enqueueSnackbar(intl.formatMessage({\n      id: message\n    }), {\n      variant: 'error',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    });\n    setSubmitting(false);\n    setStatus(intl.formatMessage({\n      id: message\n    }));\n  };\n\n  const loginSuccess = res => {\n    const user = res.activeUser;\n    props.enqueueSnackbar(intl.formatMessage({\n      id: 'AUTH.LOGIN.SUCCESS'\n    }) + user.username || '', {\n      variant: 'success',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    });\n    setSubmitting(false);\n    setStatus(intl.formatMessage({\n      id: 'AUTH.LOGIN.SUCCESS'\n    }) + user.username || '');\n    dispatch(AuthActions.loginSuccess(res));\n    const token = res.accessToken;\n    const expireIn = res.tokenExpiration;\n    setToken(token, expireIn);\n  };\n\n  if (loginRes.data) {\n    loginSuccess(loginRes.data.login);\n    loginRes.data = undefined;\n  }\n\n  if (loginRes.error) {\n    loginError(loginRes.error);\n    loginRes.error = undefined;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-login__head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"kt-login__signup-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, \"Don't have an account yet?\"), \"\\xA0\\xA0\", handleChangeFormType ? /*#__PURE__*/React.createElement(Button, {\n    onClick: () => handleChangeFormType('register'),\n    className: \"kt-link kt-login__signup-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 6\n    }\n  }, intl.formatMessage({\n    id: 'AUTH.GENERAL.SIGNUP_BUTTON'\n  }), \"!\") : /*#__PURE__*/React.createElement(Link, {\n    to: \"/auth/registration\",\n    className: \"kt-link kt-login__signup-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 6\n    }\n  }, intl.formatMessage({\n    id: 'AUTH.GENERAL.SIGNUP_BUTTON'\n  }), \"!\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-login__body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-login__form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-login__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"AUTH.LOGIN.TITLE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 8\n    }\n  }))), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        // https://github.com/formatjs/react-intl/blob/master/docs/API.md#injection-api\n        errors.email = intl.formatMessage({\n          id: 'AUTH.VALIDATION.REQUIRED_FIELD'\n        });\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n        errors.email = intl.formatMessage({\n          id: 'AUTH.VALIDATION.INVALID_FIELD'\n        });\n      }\n\n      if (!values.password) {\n        errors.password = intl.formatMessage({\n          id: 'AUTH.VALIDATION.REQUIRED_FIELD'\n        });\n      }\n\n      return errors;\n    },\n    onSubmit: values => {\n      setSubmitting(true);\n      setLoadingButtonStyle();\n      return setTimeout(() => {\n        handleLogin(values.email, values.password);\n      }, 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 6\n    }\n  }, ({\n    values,\n    initialStatus = statusState,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    noValidate: true,\n    autoComplete: \"off\",\n    className: \"kt-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 8\n    }\n  }, initialStatus ? /*#__PURE__*/React.createElement(\"div\", {\n    role: \"alert\",\n    className: \"alert alert-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, initialStatus)) : /*#__PURE__*/React.createElement(\"div\", {\n    role: \"alert\",\n    className: \"alert alert-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'AUTH.LOGIN.DESC'\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"email\",\n    label: intl.formatMessage({\n      id: 'AUTH.INPUT.EMAIL'\n    }),\n    margin: \"normal\",\n    className: \"kt-width-full\",\n    name: \"email\",\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.email,\n    helperText: touched.email && errors.email,\n    error: Boolean(touched.email && errors.email),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"password\",\n    margin: \"normal\",\n    label: intl.formatMessage({\n      id: 'AUTH.INPUT.PASSWORD'\n    }),\n    className: \"kt-width-full\",\n    name: \"password\",\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.password,\n    helperText: touched.password && errors.password,\n    error: Boolean(touched.password && errors.password),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-login__actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, handleChangeFormType ? /*#__PURE__*/React.createElement(Button, {\n    onClick: () => handleChangeFormType('forgotPassword'),\n    className: \"kt-link kt-login__link-forgot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"AUTH.GENERAL.FORGOT_BUTTON\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 12\n    }\n  })) : /*#__PURE__*/React.createElement(Link, {\n    to: \"/auth/forgot-password\",\n    className: \"kt-link kt-login__link-forgot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"AUTH.GENERAL.FORGOT_BUTTON\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 12\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"kt_login_signin_submit\",\n    type: \"submit\",\n    disabled: isSubmittingState,\n    className: `btn btn-primary btn-elevate kt-login__btn-primary ${clsx({\n      'kt-spinner kt-spinner--right kt-spinner--md kt-spinner--light': isSubmittingState\n    })}`,\n    style: loadingButtonStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 10\n    }\n  }, intl.formatMessage({\n    id: 'AUTH.LOGIN.BUTTON'\n  }))))))));\n}\n\nexport default injectIntl(withSnackbar(LoginForm));","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/AuthForms/LoginForm.js"],"names":["React","useState","Link","Formik","connect","FormattedMessage","injectIntl","TextField","Button","clsx","withSnackbar","AuthActions","setToken","getMessage","LoginForm","props","intl","handleLogin","handleChangeFormType","loginRes","dispatch","loadingButtonStyle","setLoadingButtonStyle","paddingRight","statusState","setStatus","isSubmittingState","setSubmitting","loginError","err","message","enqueueSnackbar","formatMessage","id","variant","anchorOrigin","vertical","horizontal","loginSuccess","res","user","activeUser","username","token","accessToken","expireIn","tokenExpiration","data","login","undefined","error","email","password","values","errors","test","setTimeout","initialStatus","touched","handleChange","handleBlur","handleSubmit","Boolean"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { TextField, Button } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { withSnackbar } from 'notistack';\nimport AuthActions from 'state/ducks/auth/actions';\n\nimport 'app/themes/_metronic/_assets/sass/pages/login/login-1.scss';\nimport { setToken } from 'utils/utils';\nimport { getMessage } from 'utils/messageConvert';\n// import * as auth from '../../store/ducks/auth.duck';\n// import { login } from '../../crud/auth.crud';\n\nfunction LoginForm(props) {\n\tconst { intl, handleLogin, handleChangeFormType, loginRes, dispatch } = props;\n\tconst [loadingButtonStyle, setLoadingButtonStyle] = useState({\n\t\tpaddingRight: '2.5rem',\n\t});\n\tconst [statusState, setStatus] = useState('');\n\tconst [isSubmittingState, setSubmitting] = useState(false);\n\n\tconst loginError = err => {\n\t\tlet message = getMessage(err.message);\n\n\t\tprops.enqueueSnackbar(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: message,\n\t\t\t}),\n\t\t\t{\n\t\t\t\tvariant: 'error',\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tsetSubmitting(false);\n\t\tsetStatus(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: message,\n\t\t\t}),\n\t\t);\n\t};\n\n\tconst loginSuccess = res => {\n\t\tconst user = res.activeUser;\n\t\tprops.enqueueSnackbar(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: 'AUTH.LOGIN.SUCCESS',\n\t\t\t}) + user.username || '',\n\t\t\t{\n\t\t\t\tvariant: 'success',\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tsetSubmitting(false);\n\t\tsetStatus(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: 'AUTH.LOGIN.SUCCESS',\n\t\t\t}) + user.username || '',\n\t\t);\n\t\tdispatch(AuthActions.loginSuccess(res));\n\t\tconst token = res.accessToken;\n\t\tconst expireIn = res.tokenExpiration;\n\t\tsetToken(token, expireIn);\n\t};\n\n\tif (loginRes.data) {\n\t\tloginSuccess(loginRes.data.login);\n\t\tloginRes.data = undefined;\n\t}\n\n\tif (loginRes.error) {\n\t\tloginError(loginRes.error);\n\t\tloginRes.error = undefined;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"kt-login__head\">\n\t\t\t\t<span className=\"kt-login__signup-label\">Don't have an account yet?</span>\n\t\t\t\t&nbsp;&nbsp;\n\t\t\t\t{handleChangeFormType ? (\n\t\t\t\t\t<Button onClick={() => handleChangeFormType('register')} className=\"kt-link kt-login__signup-link\">\n\t\t\t\t\t\t{intl.formatMessage({\n\t\t\t\t\t\t\tid: 'AUTH.GENERAL.SIGNUP_BUTTON',\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t!\n\t\t\t\t\t</Button>\n\t\t\t\t) : (\n\t\t\t\t\t<Link to=\"/auth/registration\" className=\"kt-link kt-login__signup-link\">\n\t\t\t\t\t\t{intl.formatMessage({\n\t\t\t\t\t\t\tid: 'AUTH.GENERAL.SIGNUP_BUTTON',\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t!\n\t\t\t\t\t</Link>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"kt-login__body\">\n\t\t\t\t<div className=\"kt-login__form\">\n\t\t\t\t\t<div className=\"kt-login__title\">\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t{/* https://github.com/formatjs/react-intl/blob/master/docs/Components.md#formattedmessage */}\n\t\t\t\t\t\t\t<FormattedMessage id=\"AUTH.LOGIN.TITLE\" />\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\temail: '',\n\t\t\t\t\t\t\tpassword: '',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvalidate={values => {\n\t\t\t\t\t\t\tconst errors = {};\n\n\t\t\t\t\t\t\tif (!values.email) {\n\t\t\t\t\t\t\t\t// https://github.com/formatjs/react-intl/blob/master/docs/API.md#injection-api\n\t\t\t\t\t\t\t\terrors.email = intl.formatMessage({\n\t\t\t\t\t\t\t\t\tid: 'AUTH.VALIDATION.REQUIRED_FIELD',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n\t\t\t\t\t\t\t\terrors.email = intl.formatMessage({\n\t\t\t\t\t\t\t\t\tid: 'AUTH.VALIDATION.INVALID_FIELD',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!values.password) {\n\t\t\t\t\t\t\t\terrors.password = intl.formatMessage({\n\t\t\t\t\t\t\t\t\tid: 'AUTH.VALIDATION.REQUIRED_FIELD',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn errors;\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonSubmit={values => {\n\t\t\t\t\t\t\tsetSubmitting(true);\n\t\t\t\t\t\t\tsetLoadingButtonStyle();\n\t\t\t\t\t\t\treturn setTimeout(() => {\n\t\t\t\t\t\t\t\thandleLogin(values.email, values.password);\n\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{({\n\t\t\t\t\t\t\tvalues,\n\t\t\t\t\t\t\tinitialStatus = statusState,\n\t\t\t\t\t\t\terrors,\n\t\t\t\t\t\t\ttouched,\n\t\t\t\t\t\t\thandleChange,\n\t\t\t\t\t\t\thandleBlur,\n\t\t\t\t\t\t\thandleSubmit,\n\t\t\t\t\t\t}) => (\n\t\t\t\t\t\t\t<form noValidate={true} autoComplete=\"off\" className=\"kt-form\" onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t{initialStatus ? (\n\t\t\t\t\t\t\t\t\t<div role=\"alert\" className=\"alert alert-danger\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"alert-text\">{initialStatus}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div role=\"alert\" className=\"alert alert-info\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"alert-text\">\n\t\t\t\t\t\t\t\t\t\t\t{intl.formatMessage({\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'AUTH.LOGIN.DESC',\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\t\tlabel={intl.formatMessage({\n\t\t\t\t\t\t\t\t\t\t\tid: 'AUTH.INPUT.EMAIL',\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"kt-width-full\"\n\t\t\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\tvalue={values.email}\n\t\t\t\t\t\t\t\t\t\thelperText={touched.email && errors.email}\n\t\t\t\t\t\t\t\t\t\terror={Boolean(touched.email && errors.email)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\tlabel={intl.formatMessage({\n\t\t\t\t\t\t\t\t\t\t\tid: 'AUTH.INPUT.PASSWORD',\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\tclassName=\"kt-width-full\"\n\t\t\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\tvalue={values.password}\n\t\t\t\t\t\t\t\t\t\thelperText={touched.password && errors.password}\n\t\t\t\t\t\t\t\t\t\terror={Boolean(touched.password && errors.password)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"kt-login__actions\">\n\t\t\t\t\t\t\t\t\t{handleChangeFormType ? (\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleChangeFormType('forgotPassword')}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"kt-link kt-login__link-forgot\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<FormattedMessage id=\"AUTH.GENERAL.FORGOT_BUTTON\" />\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<Link to=\"/auth/forgot-password\" className=\"kt-link kt-login__link-forgot\">\n\t\t\t\t\t\t\t\t\t\t\t<FormattedMessage id=\"AUTH.GENERAL.FORGOT_BUTTON\" />\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tid=\"kt_login_signin_submit\"\n\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\tdisabled={isSubmittingState}\n\t\t\t\t\t\t\t\t\t\tclassName={`btn btn-primary btn-elevate kt-login__btn-primary ${clsx({\n\t\t\t\t\t\t\t\t\t\t\t'kt-spinner kt-spinner--right kt-spinner--md kt-spinner--light': isSubmittingState,\n\t\t\t\t\t\t\t\t\t\t})}`}\n\t\t\t\t\t\t\t\t\t\tstyle={loadingButtonStyle}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{intl.formatMessage({\n\t\t\t\t\t\t\t\t\t\t\tid: 'AUTH.LOGIN.BUTTON',\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Formik>\n\t\t\t\t\t{/* \n\t\t\t\t\t<div className=\"kt-login__divider\">\n\t\t\t\t\t\t<div className=\"kt-divider\">\n\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t\t<span>OR</span>\n\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"kt-login__options\">\n\t\t\t\t\t\t<Link to=\"http://facebook.com\" className=\"btn btn-primary kt-btn\">\n\t\t\t\t\t\t\t<i className=\"fab fa-facebook-f\" />\n\t\t\t\t\t\t\tFacebook\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"http://twitter.com\" className=\"btn btn-info kt-btn\">\n\t\t\t\t\t\t\t<i className=\"fab fa-twitter\" />\n\t\t\t\t\t\t\tTwitter\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"google.com\" className=\"btn btn-danger kt-btn\">\n\t\t\t\t\t\t\t<i className=\"fab fa-google\" />\n\t\t\t\t\t\t\tGoogle\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default injectIntl(withSnackbar(LoginForm));\n"]},"metadata":{},"sourceType":"module"}