{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/CreateReadingTest/QuestionEditRender.js\";\nimport React, { memo } from 'react'; // import MatchHeadingQuestion from '../../components/Test/QuestionTypes/MatchHeadingQuestion';\n// import TrueFalseNotgiven from '../../components/Test/QuestionTypes/TrueFalseNotgiven';\n// import FillInGap from '../../components/Test/QuestionTypes/FillInGaps';\n// import MultipleChoice from '../../components/Test/QuestionTypes/MultipleChoice';\n// import ListSelection from '../../components/Test/QuestionTypes/ListSelection';\n\nconst EditableMatchHeading = React.lazy(() => import('app/views/components/CreateReadingTest/EditableQuestions/EditableMatchHeading'));\nconst EditableTrueFalseNotGiven = React.lazy(() => import('app/views/components/CreateReadingTest/EditableQuestions/EditableTrueFalseNotgiven'));\nconst EditableFillInGaps = React.lazy(() => import('app/views/components/CreateReadingTest/EditableQuestions/EditableFillInGaps'));\nconst EditableListSelection = React.lazy(() => import('app/views/components/CreateReadingTest/EditableQuestions/EditableListSelection'));\nconst EditableMultipleChoice = React.lazy(() => import('app/views/components/CreateReadingTest/EditableQuestions/EditableMultipleChoice'));\nconst QuestionTypes = {\n  matchHeading: 'matchHeading',\n  TFN: 'TFN',\n  fillInGap: 'fillInGap',\n  multipleChoice: 'multipleChoice',\n  listSelection: 'listSelection'\n};\n\nfunction QuestionEditRender(props) {\n  const {\n    questionSection,\n    questionRange,\n    paragraphAmount,\n    handleEditQuestion,\n    sectionAnswer,\n    handleRemoveQuestion,\n    handleAddQuestion,\n    isEditable = true\n  } = props;\n\n  const handleOnChange = (id, key, content, multipleChoices) => {\n    const newQuestion = {\n      content,\n      key,\n      multipleChoices\n    };\n    handleEditQuestion(newQuestion, id);\n  };\n\n  if (!questionSection) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 10\n      }\n    }, \"Something went wrong, please try again later\");\n  }\n\n  const {\n    questionType\n  } = questionSection;\n\n  switch (questionType) {\n    case QuestionTypes.matchHeading:\n      return /*#__PURE__*/React.createElement(EditableMatchHeading, {\n        handleAddQuestion: handleAddQuestion,\n        handleRemoveQuestion: handleRemoveQuestion,\n        paragraphAmount: paragraphAmount,\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        isEditable: isEditable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 5\n        }\n      });\n\n    case QuestionTypes.fillInGap:\n      return /*#__PURE__*/React.createElement(EditableFillInGaps, {\n        handleAddQuestion: handleAddQuestion,\n        handleRemoveQuestion: handleRemoveQuestion,\n        paragraphAmount: paragraphAmount,\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        isEditable: isEditable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 5\n        }\n      });\n\n    case QuestionTypes.TFN:\n      return /*#__PURE__*/React.createElement(EditableTrueFalseNotGiven, {\n        handleAddQuestion: handleAddQuestion,\n        handleRemoveQuestion: handleRemoveQuestion,\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        isEditable: isEditable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 5\n        }\n      });\n\n    case QuestionTypes.multipleChoice:\n      return /*#__PURE__*/React.createElement(EditableMultipleChoice, {\n        handleAddQuestion: handleAddQuestion,\n        handleRemoveQuestion: handleRemoveQuestion,\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        isEditable: isEditable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 5\n        }\n      });\n\n    case QuestionTypes.listSelection:\n      return /*#__PURE__*/React.createElement(EditableListSelection, {\n        handleAddQuestion: handleAddQuestion,\n        handleRemoveQuestion: handleRemoveQuestion,\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        isEditable: isEditable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 5\n        }\n      });\n\n    default:\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }, \"Error: Question type not valid\");\n  }\n}\n\nexport default memo(QuestionEditRender);","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/CreateReadingTest/QuestionEditRender.js"],"names":["React","memo","EditableMatchHeading","lazy","EditableTrueFalseNotGiven","EditableFillInGaps","EditableListSelection","EditableMultipleChoice","QuestionTypes","matchHeading","TFN","fillInGap","multipleChoice","listSelection","QuestionEditRender","props","questionSection","questionRange","paragraphAmount","handleEditQuestion","sectionAnswer","handleRemoveQuestion","handleAddQuestion","isEditable","handleOnChange","id","key","content","multipleChoices","newQuestion","questionType"],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\n// import MatchHeadingQuestion from '../../components/Test/QuestionTypes/MatchHeadingQuestion';\n// import TrueFalseNotgiven from '../../components/Test/QuestionTypes/TrueFalseNotgiven';\n// import FillInGap from '../../components/Test/QuestionTypes/FillInGaps';\n// import MultipleChoice from '../../components/Test/QuestionTypes/MultipleChoice';\n// import ListSelection from '../../components/Test/QuestionTypes/ListSelection';\n\nconst EditableMatchHeading = React.lazy(() =>\n\timport('app/views/components/CreateReadingTest/EditableQuestions/EditableMatchHeading'),\n);\n\nconst EditableTrueFalseNotGiven = React.lazy(() =>\n\timport('app/views/components/CreateReadingTest/EditableQuestions/EditableTrueFalseNotgiven'),\n);\n\nconst EditableFillInGaps = React.lazy(() =>\n\timport('app/views/components/CreateReadingTest/EditableQuestions/EditableFillInGaps'),\n);\n\nconst EditableListSelection = React.lazy(() =>\n\timport('app/views/components/CreateReadingTest/EditableQuestions/EditableListSelection'),\n);\n\nconst EditableMultipleChoice = React.lazy(() =>\n\timport('app/views/components/CreateReadingTest/EditableQuestions/EditableMultipleChoice'),\n);\n\nconst QuestionTypes = {\n\tmatchHeading: 'matchHeading',\n\tTFN: 'TFN',\n\tfillInGap: 'fillInGap',\n\tmultipleChoice: 'multipleChoice',\n\tlistSelection: 'listSelection',\n};\n\nfunction QuestionEditRender(props) {\n\tconst {\n\t\tquestionSection,\n\t\tquestionRange,\n\t\tparagraphAmount,\n\t\thandleEditQuestion,\n\t\tsectionAnswer,\n\t\thandleRemoveQuestion,\n\t\thandleAddQuestion,\n\t\tisEditable = true,\n\t} = props;\n\n\tconst handleOnChange = (id, key, content, multipleChoices) => {\n\t\tconst newQuestion = { content, key, multipleChoices };\n\t\thandleEditQuestion(newQuestion, id);\n\t};\n\n\tif (!questionSection) {\n\t\treturn <div>Something went wrong, please try again later</div>;\n\t}\n\tconst { questionType } = questionSection;\n\n\tswitch (questionType) {\n\t\tcase QuestionTypes.matchHeading:\n\t\t\treturn (\n\t\t\t\t<EditableMatchHeading\n\t\t\t\t\thandleAddQuestion={handleAddQuestion}\n\t\t\t\t\thandleRemoveQuestion={handleRemoveQuestion}\n\t\t\t\t\tparagraphAmount={paragraphAmount}\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t\tisEditable={isEditable}\n\t\t\t\t></EditableMatchHeading>\n\t\t\t);\n\t\tcase QuestionTypes.fillInGap:\n\t\t\treturn (\n\t\t\t\t<EditableFillInGaps\n\t\t\t\t\thandleAddQuestion={handleAddQuestion}\n\t\t\t\t\thandleRemoveQuestion={handleRemoveQuestion}\n\t\t\t\t\tparagraphAmount={paragraphAmount}\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t\tisEditable={isEditable}\n\t\t\t\t></EditableFillInGaps>\n\t\t\t);\n\t\tcase QuestionTypes.TFN:\n\t\t\treturn (\n\t\t\t\t<EditableTrueFalseNotGiven\n\t\t\t\t\thandleAddQuestion={handleAddQuestion}\n\t\t\t\t\thandleRemoveQuestion={handleRemoveQuestion}\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t\tisEditable={isEditable}\n\t\t\t\t></EditableTrueFalseNotGiven>\n\t\t\t);\n\t\tcase QuestionTypes.multipleChoice:\n\t\t\treturn (\n\t\t\t\t<EditableMultipleChoice\n\t\t\t\t\thandleAddQuestion={handleAddQuestion}\n\t\t\t\t\thandleRemoveQuestion={handleRemoveQuestion}\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t\tisEditable={isEditable}\n\t\t\t\t></EditableMultipleChoice>\n\t\t\t);\n\t\tcase QuestionTypes.listSelection:\n\t\t\treturn (\n\t\t\t\t<EditableListSelection\n\t\t\t\t\thandleAddQuestion={handleAddQuestion}\n\t\t\t\t\thandleRemoveQuestion={handleRemoveQuestion}\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t\tisEditable={isEditable}\n\t\t\t\t></EditableListSelection>\n\t\t\t);\n\t\tdefault:\n\t\t\treturn <p>Error: Question type not valid</p>;\n\t}\n}\n\nexport default memo(QuestionEditRender);\n"]},"metadata":{},"sourceType":"module"}