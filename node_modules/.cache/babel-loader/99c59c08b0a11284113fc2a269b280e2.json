{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/Test/QuestionTypes/FillInGaps.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { questionIndexing, splitStringByBlank } from 'utils/utils';\nimport CustomInput from '../../Form/EngageInput/index';\nimport QuestionNumber from '../QuestionNumber';\nimport Theme from 'app/themes/styles';\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\nconst QuestionInstruction = styled.p`\n\tmargin-top: 20px;\n`;\nconst WordLimit = styled.strong`\n\tcolor: ${Theme.ncpRed};\n\tfont-style: italic;\n`;\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\nconst Question = styled.div`\n\tmargin-bottom: 20px;\n`;\n\nfunction FillInGap(props) {\n  const {\n    questionSection,\n    questionRange,\n    handleOnChange,\n    sectionAnswer\n  } = props;\n  const {\n    instruction,\n    questions\n  } = questionSection;\n  let valueFormat = [];\n\n  if (sectionAnswer) {\n    sectionAnswer.answers.map(answer => {\n      valueFormat.push(answer);\n    });\n  }\n\n  let questionIndex = questionIndexing(questionRange);\n  return /*#__PURE__*/React.createElement(QuestionContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(QuestionInstruction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }\n  }, \"Complete the following sentences using \", /*#__PURE__*/React.createElement(WordLimit, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 44\n    }\n  }, instruction), \" from the text for each gap.\"), questions.map((question, idx) => {\n    questionIndex = questionIndex + 1;\n    const splitString = splitStringByBlank(question.content);\n    const answer = valueFormat.find(answer => answer.id === idx);\n    const value = answer ? answer.value : undefined;\n    return /*#__PURE__*/React.createElement(Question, {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(QuestionNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, questionIndex), /*#__PURE__*/React.createElement(QuestionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, splitString.leftString, /*#__PURE__*/React.createElement(CustomInput, {\n      value: value,\n      onChange: e => handleOnChange(idx, e.target.value),\n      holderStyle: {\n        display: 'inline-block',\n        marginTop: '0.5rem',\n        marginBottom: '0.5rem'\n      },\n      width: \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 8\n      }\n    }), splitString.rightString));\n  }));\n}\n\nexport default FillInGap;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/Test/QuestionTypes/FillInGaps.js"],"names":["React","styled","questionIndexing","splitStringByBlank","CustomInput","QuestionNumber","Theme","QuestionContent","div","QuestionInstruction","p","WordLimit","strong","ncpRed","QuestionSelect","span","Question","FillInGap","props","questionSection","questionRange","handleOnChange","sectionAnswer","instruction","questions","valueFormat","answers","map","answer","push","questionIndex","question","idx","splitString","content","find","id","value","undefined","leftString","e","target","display","marginTop","marginBottom","rightString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAqD,aAArD;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,MAAMC,eAAe,GAAGN,MAAM,CAACO,GAAI;AACnC;AACA,CAFA;AAIA,MAAMC,mBAAmB,GAAGR,MAAM,CAACS,CAAE;AACrC;AACA,CAFA;AAIA,MAAMC,SAAS,GAAGV,MAAM,CAACW,MAAO;AAChC,UAAUN,KAAK,CAACO,MAAO;AACvB;AACA,CAHA;AAKA,MAAMC,cAAc,GAAGb,MAAM,CAACc,IAAK;AACnC;AACA,CAFA;AAIA,MAAMC,QAAQ,GAAGf,MAAM,CAACO,GAAI;AAC5B;AACA,CAFA;;AAIA,SAASS,SAAT,CAAmBC,KAAnB,EAA0B;AACzB,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA,aAAnB;AAAkCC,IAAAA,cAAlC;AAAkDC,IAAAA;AAAlD,MAAoEJ,KAA1E;AACA,QAAM;AAAEK,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA6BL,eAAnC;AAEA,MAAIM,WAAW,GAAG,EAAlB;;AAEA,MAAIH,aAAJ,EAAmB;AAClBA,IAAAA,aAAa,CAACI,OAAd,CAAsBC,GAAtB,CAA0BC,MAAM,IAAI;AACnCH,MAAAA,WAAW,CAACI,IAAZ,CAAiBD,MAAjB;AACA,KAFD;AAGA;;AAED,MAAIE,aAAa,GAAG5B,gBAAgB,CAACkB,aAAD,CAApC;AACA,sBACC,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DACwC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYG,WAAZ,CADxC,iCADD,EAKEC,SAAS,CAACG,GAAV,CAAc,CAACI,QAAD,EAAWC,GAAX,KAAmB;AACjCF,IAAAA,aAAa,GAAGA,aAAa,GAAG,CAAhC;AACA,UAAMG,WAAW,GAAG9B,kBAAkB,CAAC4B,QAAQ,CAACG,OAAV,CAAtC;AACA,UAAMN,MAAM,GAAGH,WAAW,CAACU,IAAZ,CAAiBP,MAAM,IAAIA,MAAM,CAACQ,EAAP,KAAcJ,GAAzC,CAAf;AACA,UAAMK,KAAK,GAAGT,MAAM,GAAGA,MAAM,CAACS,KAAV,GAAkBC,SAAtC;AACA,wBACC,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEN,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBF,aAAjB,CADD,eAEC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEG,WAAW,CAACM,UADd,eAEC,oBAAC,WAAD;AACC,MAAA,KAAK,EAAEF,KADR;AAEC,MAAA,QAAQ,EAAEG,CAAC,IAAInB,cAAc,CAACW,GAAD,EAAMQ,CAAC,CAACC,MAAF,CAASJ,KAAf,CAF9B;AAGC,MAAA,WAAW,EAAE;AACZK,QAAAA,OAAO,EAAE,cADG;AAEZC,QAAAA,SAAS,EAAE,QAFC;AAGZC,QAAAA,YAAY,EAAE;AAHF,OAHd;AAQC,MAAA,KAAK,EAAC,OARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,EAYEX,WAAW,CAACY,WAZd,CAFD,CADD;AAmBA,GAxBA,CALF,CADD;AAiCA;;AAED,eAAe5B,SAAf","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { questionIndexing, splitStringByBlank } from 'utils/utils';\nimport CustomInput from '../../Form/EngageInput/index';\nimport QuestionNumber from '../QuestionNumber';\nimport Theme from 'app/themes/styles';\n\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\n\nconst QuestionInstruction = styled.p`\n\tmargin-top: 20px;\n`;\n\nconst WordLimit = styled.strong`\n\tcolor: ${Theme.ncpRed};\n\tfont-style: italic;\n`;\n\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\n\nconst Question = styled.div`\n\tmargin-bottom: 20px;\n`;\n\nfunction FillInGap(props) {\n\tconst { questionSection, questionRange, handleOnChange, sectionAnswer } = props;\n\tconst { instruction, questions } = questionSection;\n\n\tlet valueFormat = [];\n\n\tif (sectionAnswer) {\n\t\tsectionAnswer.answers.map(answer => {\n\t\t\tvalueFormat.push(answer);\n\t\t});\n\t}\n\n\tlet questionIndex = questionIndexing(questionRange);\n\treturn (\n\t\t<QuestionContent>\n\t\t\t<QuestionInstruction>\n\t\t\t\tComplete the following sentences using <WordLimit>{instruction}</WordLimit> from the text for each gap.\n\t\t\t</QuestionInstruction>\n\n\t\t\t{questions.map((question, idx) => {\n\t\t\t\tquestionIndex = questionIndex + 1;\n\t\t\t\tconst splitString = splitStringByBlank(question.content);\n\t\t\t\tconst answer = valueFormat.find(answer => answer.id === idx);\n\t\t\t\tconst value = answer ? answer.value : undefined;\n\t\t\t\treturn (\n\t\t\t\t\t<Question key={idx}>\n\t\t\t\t\t\t<QuestionNumber>{questionIndex}</QuestionNumber>\n\t\t\t\t\t\t<QuestionSelect>\n\t\t\t\t\t\t\t{splitString.leftString}\n\t\t\t\t\t\t\t<CustomInput\n\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\tonChange={e => handleOnChange(idx, e.target.value)}\n\t\t\t\t\t\t\t\tholderStyle={{\n\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\t\t\t\tmarginTop: '0.5rem',\n\t\t\t\t\t\t\t\t\tmarginBottom: '0.5rem',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\twidth=\"150px\"\n\t\t\t\t\t\t\t></CustomInput>\n\t\t\t\t\t\t\t{splitString.rightString}\n\t\t\t\t\t\t</QuestionSelect>\n\t\t\t\t\t</Question>\n\t\t\t\t);\n\t\t\t})}\n\t\t</QuestionContent>\n\t);\n}\n\nexport default FillInGap;\n"]},"metadata":{},"sourceType":"module"}