{"ast":null,"code":"import { ApolloClient, InMemoryCache, ApolloLink, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { HttpLink } from '@apollo/client/link/http';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { onError } from '@apollo/client/link/error';\nimport { signOut } from './authentication';\nimport history from './history'; // https://online-test-tu-tran-be.herokuapp.com/graphql\n// http://localhost:5000/graphql\n\nconst httpLink = new HttpLink({\n  uri: process.env.GRAPHQL_SERVER ? process.env.GRAPHQL_SERVER : 'http://localhost:5000/graphql'\n});\nconst wsLink = new WebSocketLink({\n  uri: process.env.GRAPHQL_SERVER_SOCKET ? process.env.GRAPHQL_SERVER_SOCKET : 'wss://online-test-tu-tran-be.herokuapp.com/graphql',\n  options: {\n    reconnect: false\n  }\n});\nconst terminatingLink = split(({\n  query\n}) => {\n  const {\n    kind,\n    operation\n  } = getMainDefinition(query);\n  return kind === 'OperationDefinition' && operation === 'subscription';\n}, wsLink, httpLink);\nconst authLink = new ApolloLink((operation, forward) => {\n  operation.setContext(({\n    headers = {}\n  }) => {\n    const token = localStorage.getItem('accessToken');\n\n    if (token) {\n      headers = { ...headers,\n        xToken: token\n      };\n    }\n\n    return {\n      headers\n    };\n  });\n  return forward(operation);\n});\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({\n      message,\n      locations,\n      path\n    }) => {\n      if (message === 'Unauthenticated' || message == 'Your session has expired, please login again.') {\n        signOut();\n      }\n\n      if (message === 'Forbidden' || message === 'Unauthorized') {\n        history.push('/403');\n      }\n    });\n  } // if (networkError) {\n  // \tif (networkError.statusCode === 401) {\n  // \t\tsignOut();\n  // \t}\n  // }\n\n});\nconst link = ApolloLink.from([authLink, errorLink, terminatingLink]);\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  link,\n  cache,\n  defaultOptions: {\n    watchQuery: {\n      errorPolicy: 'none'\n    },\n    query: {\n      errorPolicy: 'none'\n    },\n    mutate: {\n      errorPolicy: 'none'\n    }\n  }\n}); // const client = new ApolloClient({\n//   uri: \"http://localhost:5000/graphql\",\n//   cache: new InMemoryCache(),\n// });\n\nexport default client;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/utils/apollo.js"],"names":["ApolloClient","InMemoryCache","ApolloLink","split","getMainDefinition","HttpLink","WebSocketLink","onError","signOut","history","httpLink","uri","process","env","GRAPHQL_SERVER","wsLink","GRAPHQL_SERVER_SOCKET","options","reconnect","terminatingLink","query","kind","operation","authLink","forward","setContext","headers","token","localStorage","getItem","xToken","errorLink","graphQLErrors","networkError","forEach","message","locations","path","push","link","from","cache","client","defaultOptions","watchQuery","errorPolicy","mutate"],"mappings":"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","sourcesContent":["import { ApolloClient, InMemoryCache, ApolloLink, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { HttpLink } from '@apollo/client/link/http';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { onError } from '@apollo/client/link/error';\nimport { signOut } from './authentication';\nimport history from './history';\n\n// https://online-test-tu-tran-be.herokuapp.com/graphql\n// http://localhost:5000/graphql\nconst httpLink = new HttpLink({\n\turi: process.env.GRAPHQL_SERVER ? process.env.GRAPHQL_SERVER : 'http://localhost:5000/graphql',\n});\n\nconst wsLink = new WebSocketLink({\n\turi: process.env.GRAPHQL_SERVER_SOCKET\n\t\t? process.env.GRAPHQL_SERVER_SOCKET\n\t\t: 'wss://online-test-tu-tran-be.herokuapp.com/graphql',\n\toptions: {\n\t\treconnect: false,\n\t},\n});\n\nconst terminatingLink = split(\n\t({ query }) => {\n\t\tconst { kind, operation } = getMainDefinition(query);\n\t\treturn kind === 'OperationDefinition' && operation === 'subscription';\n\t},\n\twsLink,\n\thttpLink,\n);\n\nconst authLink = new ApolloLink((operation, forward) => {\n\toperation.setContext(({ headers = {} }) => {\n\t\tconst token = localStorage.getItem('accessToken');\n\n\t\tif (token) {\n\t\t\theaders = { ...headers, xToken: token };\n\t\t}\n\t\treturn { headers };\n\t});\n\n\treturn forward(operation);\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n\tif (graphQLErrors) {\n\t\tgraphQLErrors.forEach(({ message, locations, path }) => {\n\t\t\tif (message === 'Unauthenticated' || message == 'Your session has expired, please login again.') {\n\t\t\t\tsignOut();\n\t\t\t}\n\n\t\t\tif (message === 'Forbidden' || message === 'Unauthorized') {\n\t\t\t\thistory.push('/403');\n\t\t\t}\n\t\t});\n\t}\n\n\t// if (networkError) {\n\t// \tif (networkError.statusCode === 401) {\n\t// \t\tsignOut();\n\t// \t}\n\t// }\n});\n\nconst link = ApolloLink.from([authLink, errorLink, terminatingLink]);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n\tlink,\n\tcache,\n\tdefaultOptions: {\n\t\twatchQuery: {\n\t\t\terrorPolicy: 'none',\n\t\t},\n\t\tquery: {\n\t\t\terrorPolicy: 'none',\n\t\t},\n\t\tmutate: {\n\t\t\terrorPolicy: 'none',\n\t\t},\n\t},\n});\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:5000/graphql\",\n//   cache: new InMemoryCache(),\n// });\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}