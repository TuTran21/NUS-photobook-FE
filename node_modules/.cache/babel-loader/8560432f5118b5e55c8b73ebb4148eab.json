{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/Test/QuestionRender.js\";\nimport React, { memo } from 'react';\nimport MatchHeadingQuestion from '../../components/Test/QuestionTypes/MatchHeadingQuestion';\nimport TrueFalseNotgiven from '../../components/Test/QuestionTypes/TrueFalseNotgiven';\nimport FillInGap from '../../components/Test/QuestionTypes/FillInGaps';\nimport MultipleChoice from '../../components/Test/QuestionTypes/MultipleChoice';\nimport ListSelection from '../../components/Test/QuestionTypes/ListSelection';\nconst QuestionTypes = {\n  matchHeading: 'matchHeading',\n  TFN: 'TFN',\n  fillInGap: 'fillInGap',\n  multipleChoice: 'multipleChoice',\n  listSelection: 'listSelection'\n};\n\nfunction QuestionRender(props) {\n  const {\n    questionSection,\n    questionRange,\n    sectionId,\n    handleSetAnswer,\n    sectionAnswer\n  } = props;\n\n  const handleOnChange = (answerId, answerValue) => {\n    handleSetAnswer(sectionId, answerId, answerValue);\n  };\n\n  if (!questionSection) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 10\n      }\n    }, \"Something went wrong, please try again later\");\n  }\n\n  const {\n    questionType\n  } = questionSection;\n\n  switch (questionType) {\n    case QuestionTypes.matchHeading:\n      return /*#__PURE__*/React.createElement(MatchHeadingQuestion, {\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 5\n        }\n      });\n\n    case QuestionTypes.fillInGap:\n      return /*#__PURE__*/React.createElement(FillInGap, {\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 5\n        }\n      });\n\n    case QuestionTypes.TFN:\n      return /*#__PURE__*/React.createElement(TrueFalseNotgiven, {\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 5\n        }\n      });\n\n    case QuestionTypes.multipleChoice:\n      return /*#__PURE__*/React.createElement(MultipleChoice, {\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 5\n        }\n      });\n\n    case QuestionTypes.listSelection:\n      return /*#__PURE__*/React.createElement(ListSelection, {\n        sectionAnswer: sectionAnswer,\n        handleOnChange: handleOnChange,\n        questionRange: questionRange,\n        questionSection: questionSection,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 5\n        }\n      });\n\n    default:\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, \"Error: Question type not valid\");\n  }\n}\n\nexport default memo(QuestionRender);","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/Test/QuestionRender.js"],"names":["React","memo","MatchHeadingQuestion","TrueFalseNotgiven","FillInGap","MultipleChoice","ListSelection","QuestionTypes","matchHeading","TFN","fillInGap","multipleChoice","listSelection","QuestionRender","props","questionSection","questionRange","sectionId","handleSetAnswer","sectionAnswer","handleOnChange","answerId","answerValue","questionType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,OAAOC,oBAAP,MAAiC,0DAAjC;AACA,OAAOC,iBAAP,MAA8B,uDAA9B;AACA,OAAOC,SAAP,MAAsB,gDAAtB;AACA,OAAOC,cAAP,MAA2B,oDAA3B;AACA,OAAOC,aAAP,MAA0B,mDAA1B;AAEA,MAAMC,aAAa,GAAG;AACrBC,EAAAA,YAAY,EAAE,cADO;AAErBC,EAAAA,GAAG,EAAE,KAFgB;AAGrBC,EAAAA,SAAS,EAAE,WAHU;AAIrBC,EAAAA,cAAc,EAAE,gBAJK;AAKrBC,EAAAA,aAAa,EAAE;AALM,CAAtB;;AAQA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC9B,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA,aAAnB;AAAkCC,IAAAA,SAAlC;AAA6CC,IAAAA,eAA7C;AAA8DC,IAAAA;AAA9D,MAAgFL,KAAtF;;AACA,QAAMM,cAAc,GAAG,CAACC,QAAD,EAAWC,WAAX,KAA2B;AACjDJ,IAAAA,eAAe,CAACD,SAAD,EAAYI,QAAZ,EAAsBC,WAAtB,CAAf;AACA,GAFD;;AAIA,MAAI,CAACP,eAAL,EAAsB;AACrB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAAP;AACA;;AACD,QAAM;AAAEQ,IAAAA;AAAF,MAAmBR,eAAzB;;AAEA,UAAQQ,YAAR;AACC,SAAKhB,aAAa,CAACC,YAAnB;AACC,0BACC,oBAAC,oBAAD;AACC,QAAA,aAAa,EAAEW,aADhB;AAEC,QAAA,cAAc,EAAEC,cAFjB;AAGC,QAAA,aAAa,EAAEJ,aAHhB;AAIC,QAAA,eAAe,EAAED,eAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;;AAQD,SAAKR,aAAa,CAACG,SAAnB;AACC,0BACC,oBAAC,SAAD;AACC,QAAA,aAAa,EAAES,aADhB;AAEC,QAAA,cAAc,EAAEC,cAFjB;AAGC,QAAA,aAAa,EAAEJ,aAHhB;AAIC,QAAA,eAAe,EAAED,eAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;;AAQD,SAAKR,aAAa,CAACE,GAAnB;AACC,0BACC,oBAAC,iBAAD;AACC,QAAA,aAAa,EAAEU,aADhB;AAEC,QAAA,cAAc,EAAEC,cAFjB;AAGC,QAAA,aAAa,EAAEJ,aAHhB;AAIC,QAAA,eAAe,EAAED,eAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;;AAQD,SAAKR,aAAa,CAACI,cAAnB;AACC,0BACC,oBAAC,cAAD;AACC,QAAA,aAAa,EAAEQ,aADhB;AAEC,QAAA,cAAc,EAAEC,cAFjB;AAGC,QAAA,aAAa,EAAEJ,aAHhB;AAIC,QAAA,eAAe,EAAED,eAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;;AAQD,SAAKR,aAAa,CAACK,aAAnB;AACC,0BACC,oBAAC,aAAD;AACC,QAAA,aAAa,EAAEO,aADhB;AAEC,QAAA,cAAc,EAAEC,cAFjB;AAGC,QAAA,aAAa,EAAEJ,aAHhB;AAIC,QAAA,eAAe,EAAED,eAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;;AAQD;AACC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAP;AA/CF;AAiDA;;AAED,eAAed,IAAI,CAACY,cAAD,CAAnB","sourcesContent":["import React, { memo } from 'react';\nimport MatchHeadingQuestion from '../../components/Test/QuestionTypes/MatchHeadingQuestion';\nimport TrueFalseNotgiven from '../../components/Test/QuestionTypes/TrueFalseNotgiven';\nimport FillInGap from '../../components/Test/QuestionTypes/FillInGaps';\nimport MultipleChoice from '../../components/Test/QuestionTypes/MultipleChoice';\nimport ListSelection from '../../components/Test/QuestionTypes/ListSelection';\n\nconst QuestionTypes = {\n\tmatchHeading: 'matchHeading',\n\tTFN: 'TFN',\n\tfillInGap: 'fillInGap',\n\tmultipleChoice: 'multipleChoice',\n\tlistSelection: 'listSelection',\n};\n\nfunction QuestionRender(props) {\n\tconst { questionSection, questionRange, sectionId, handleSetAnswer, sectionAnswer } = props;\n\tconst handleOnChange = (answerId, answerValue) => {\n\t\thandleSetAnswer(sectionId, answerId, answerValue);\n\t};\n\n\tif (!questionSection) {\n\t\treturn <div>Something went wrong, please try again later</div>;\n\t}\n\tconst { questionType } = questionSection;\n\n\tswitch (questionType) {\n\t\tcase QuestionTypes.matchHeading:\n\t\t\treturn (\n\t\t\t\t<MatchHeadingQuestion\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t></MatchHeadingQuestion>\n\t\t\t);\n\t\tcase QuestionTypes.fillInGap:\n\t\t\treturn (\n\t\t\t\t<FillInGap\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t></FillInGap>\n\t\t\t);\n\t\tcase QuestionTypes.TFN:\n\t\t\treturn (\n\t\t\t\t<TrueFalseNotgiven\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t></TrueFalseNotgiven>\n\t\t\t);\n\t\tcase QuestionTypes.multipleChoice:\n\t\t\treturn (\n\t\t\t\t<MultipleChoice\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t></MultipleChoice>\n\t\t\t);\n\t\tcase QuestionTypes.listSelection:\n\t\t\treturn (\n\t\t\t\t<ListSelection\n\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\thandleOnChange={handleOnChange}\n\t\t\t\t\tquestionRange={questionRange}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t></ListSelection>\n\t\t\t);\n\t\tdefault:\n\t\t\treturn <p>Error: Question type not valid</p>;\n\t}\n}\n\nexport default memo(QuestionRender);\n"]},"metadata":{},"sourceType":"module"}