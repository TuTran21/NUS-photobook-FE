{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/AdminCreateTest/index.js\";\nimport React, { useState, useEffect, memo } from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport CreateTestToolbar from 'app/views/pages/AdminCreateTest/components/CreateTestToolbar';\nimport theme from 'app/assets/theme';\nimport { Grid } from '@material-ui/core';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator'; // Mock test data used as initial component state\n\nimport mockTestData from './defaultMockData';\nimport TestEditor from './components/TestEditor';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useLazyQuery } from '@apollo/client';\nimport TestQueries from 'graphql/queries/Test';\nimport { getMessage } from 'utils/messageConvert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nconst TestListItem = React.lazy(() => import('app/views/components/Test/TestListItem'));\nconst CreateTestMain = React.lazy(() => import('app/views/pages/AdminCreateTest/components/CreateTestMain'));\nconst CreateReadingTest = React.lazy(() => import('app/views/pages/AdminCreateTest/components/AdminCreateReadingTest'));\nconst Wrapper = styled(Grid)`\n\tmargin-top: 60px;\n\t@media only screen and (min-width: 1025px) {\n\t\tmargin-top: 0px;\n\t}\n\toverflow: hidden;\n`;\nconst TestInfoWrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tposition: relative;\n\tbackground-color: ${theme.ncpPrimaryBackground};\n\tpadding: 50px;\n\tcolor: ${theme.ncpTextColor};\n\toverflow-y: auto;\n\theight: calc(50vh - 55px);\n\t@media only screen and (min-width: 1025px) {\n\t\theight: calc(50vh - 114px);\n\t}\n\t@media only screen and (min-width: 1280px) {\n\t\theight: calc(100vh - 230px);\n\t\tbox-shadow: none;\n\t}\n`; // QUESTION PART\n\nconst TestEditorWrapper = styled.div`\n\tposition: relative;\n\theight: calc(50vh - 55px);\n\tbox-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n\t\t0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n\n\t@media only screen and (min-width: 1025px) {\n\t\theight: calc(50vh - 114px);\n\t}\n\t@media only screen and (min-width: 1280px) {\n\t\theight: calc(100vh - 230px);\n\t\tbox-shadow: none;\n\t}\n\toverflow-y: auto;\n\tpadding: 40px;\n\tpadding-bottom: 80px;\n\tline-height: 1.5;\n\tfont-size: 16px;\n\tcolor: ${theme.ncpTextColor};\n`;\nconst SectionTitleEditor = styled(Typography)`\n\tmargin: 20px 0px !important;\n`;\nconst SectionTitleTestDetails = styled(Typography)`\n\tmargin: 10px 0px 20px 0px !important;\n`;\nconst StyledCol = styled(Grid)`\n\t// padding: 0px;\n`;\n\nfunction RenderLoading(props) {\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(StyledCol, {\n    item: true,\n    xs: 12,\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(TestInfoWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoadingIndicator, {\n    hasSpacing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 6\n    }\n  }))), /*#__PURE__*/React.createElement(StyledCol, {\n    item: true,\n    xs: 12,\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(TestEditorWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoadingIndicator, {\n    hasSpacing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 6\n    }\n  }))));\n}\n\nconst AdminCreateTest = props => {\n  const {\n    test = mockTestData,\n    intl\n  } = props;\n  const history = useHistory();\n  const [currentTestData, modifyTestData] = useState(test); // This location shows where the create test component is\n  // and what type of test it is creating to render coresponding components\n\n  const [location, changeLocation] = useState('main');\n\n  const modifyReadingTest = readingTest => {\n    const newTestData = { ...currentTestData\n    };\n    newTestData.testDetails.readingTest = readingTest;\n    modifyTestData(newTestData);\n    setTimeout(() => changeLocation('main'), 0);\n  };\n\n  const handleChangeLocation = location => {\n    changeLocation(location);\n  }; // EDIT\n\n\n  const [getTest, getTestRes] = useLazyQuery(TestQueries.GET_TEST, {\n    fetchPolicy: 'network-only',\n    onCompleted: res => {\n      handleGetTestSuccess(res);\n    },\n    onError: err => {\n      handleGetTestFailure(err);\n    }\n  });\n\n  const handleGetTestSuccess = res => {\n    const editTest = res.test;\n\n    if (!editTest) {\n      return;\n    }\n\n    modifyTestData(editTest);\n  };\n\n  const handleGetTestFailure = err => {\n    let message = getMessage(err.message);\n    props.enqueueSnackbar(intl.formatMessage({\n      id: message\n    }), {\n      variant: 'error',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    });\n    history.push('/admin/tests');\n  };\n\n  const routeParams = useParams();\n  useEffect(() => {\n    if (routeParams.id) {\n      getTest({\n        variables: {\n          id: routeParams.id\n        }\n      });\n    }\n  }, [routeParams]);\n\n  switch (location) {\n    case 'main':\n      return /*#__PURE__*/React.createElement(React.Suspense, {\n        fallback: /*#__PURE__*/React.createElement(LoadingIndicator, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 31\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(CreateTestMain, {\n        handleChangeLocation: handleChangeLocation,\n        currentTestData: currentTestData,\n        modifyTestData: modifyTestData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 6\n        }\n      }));\n\n    case 'reading':\n      return /*#__PURE__*/React.createElement(React.Suspense, {\n        fallback: /*#__PURE__*/React.createElement(LoadingIndicator, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 31\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(CreateReadingTest, {\n        handleChangeLocation: handleChangeLocation,\n        currentTestData: currentTestData,\n        readingTest: currentTestData.testDetails.readingTest,\n        modifyReadingTest: modifyReadingTest,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 6\n        }\n      }));\n\n    default:\n      return /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }\n      });\n  }\n};\n\nexport default injectIntl(memo(AdminCreateTest));","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/AdminCreateTest/index.js"],"names":["React","useState","useEffect","memo","Button","Typography","styled","_","CreateTestToolbar","theme","Grid","LoadingIndicator","mockTestData","TestEditor","useHistory","useParams","useLazyQuery","TestQueries","getMessage","FormattedMessage","injectIntl","TestListItem","lazy","CreateTestMain","CreateReadingTest","Wrapper","TestInfoWrapper","div","ncpPrimaryBackground","ncpTextColor","TestEditorWrapper","SectionTitleEditor","SectionTitleTestDetails","StyledCol","RenderLoading","props","AdminCreateTest","test","intl","history","currentTestData","modifyTestData","location","changeLocation","modifyReadingTest","readingTest","newTestData","testDetails","setTimeout","handleChangeLocation","getTest","getTestRes","GET_TEST","fetchPolicy","onCompleted","res","handleGetTestSuccess","onError","err","handleGetTestFailure","editTest","message","enqueueSnackbar","formatMessage","id","variant","anchorOrigin","vertical","horizontal","push","routeParams","variables","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, memo } from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport CreateTestToolbar from 'app/views/pages/AdminCreateTest/components/CreateTestToolbar';\nimport theme from 'app/assets/theme';\nimport { Grid } from '@material-ui/core';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator';\n// Mock test data used as initial component state\nimport mockTestData from './defaultMockData';\nimport TestEditor from './components/TestEditor';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useLazyQuery } from '@apollo/client';\nimport TestQueries from 'graphql/queries/Test';\nimport { getMessage } from 'utils/messageConvert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst TestListItem = React.lazy(() => import('app/views/components/Test/TestListItem'));\nconst CreateTestMain = React.lazy(() => import('app/views/pages/AdminCreateTest/components/CreateTestMain'));\nconst CreateReadingTest = React.lazy(() => import('app/views/pages/AdminCreateTest/components/AdminCreateReadingTest'));\n\nconst Wrapper = styled(Grid)`\n\tmargin-top: 60px;\n\t@media only screen and (min-width: 1025px) {\n\t\tmargin-top: 0px;\n\t}\n\toverflow: hidden;\n`;\n\nconst TestInfoWrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tposition: relative;\n\tbackground-color: ${theme.ncpPrimaryBackground};\n\tpadding: 50px;\n\tcolor: ${theme.ncpTextColor};\n\toverflow-y: auto;\n\theight: calc(50vh - 55px);\n\t@media only screen and (min-width: 1025px) {\n\t\theight: calc(50vh - 114px);\n\t}\n\t@media only screen and (min-width: 1280px) {\n\t\theight: calc(100vh - 230px);\n\t\tbox-shadow: none;\n\t}\n`;\n\n// QUESTION PART\n\nconst TestEditorWrapper = styled.div`\n\tposition: relative;\n\theight: calc(50vh - 55px);\n\tbox-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n\t\t0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n\n\t@media only screen and (min-width: 1025px) {\n\t\theight: calc(50vh - 114px);\n\t}\n\t@media only screen and (min-width: 1280px) {\n\t\theight: calc(100vh - 230px);\n\t\tbox-shadow: none;\n\t}\n\toverflow-y: auto;\n\tpadding: 40px;\n\tpadding-bottom: 80px;\n\tline-height: 1.5;\n\tfont-size: 16px;\n\tcolor: ${theme.ncpTextColor};\n`;\n\nconst SectionTitleEditor = styled(Typography)`\n\tmargin: 20px 0px !important;\n`;\n\nconst SectionTitleTestDetails = styled(Typography)`\n\tmargin: 10px 0px 20px 0px !important;\n`;\n\nconst StyledCol = styled(Grid)`\n\t// padding: 0px;\n`;\n\nfunction RenderLoading(props) {\n\treturn (\n\t\t<Grid container>\n\t\t\t<StyledCol item xs={12} lg={6}>\n\t\t\t\t<TestInfoWrapper>\n\t\t\t\t\t<LoadingIndicator hasSpacing={true}></LoadingIndicator>\n\t\t\t\t</TestInfoWrapper>\n\t\t\t</StyledCol>\n\t\t\t<StyledCol item xs={12} lg={6}>\n\t\t\t\t<TestEditorWrapper>\n\t\t\t\t\t<LoadingIndicator hasSpacing={true}></LoadingIndicator>\n\t\t\t\t</TestEditorWrapper>\n\t\t\t</StyledCol>\n\t\t</Grid>\n\t);\n}\n\nconst AdminCreateTest = props => {\n\tconst { test = mockTestData, intl } = props;\n\n\tconst history = useHistory();\n\tconst [currentTestData, modifyTestData] = useState(test);\n\t// This location shows where the create test component is\n\t// and what type of test it is creating to render coresponding components\n\tconst [location, changeLocation] = useState('main');\n\n\tconst modifyReadingTest = readingTest => {\n\t\tconst newTestData = { ...currentTestData };\n\t\tnewTestData.testDetails.readingTest = readingTest;\n\t\tmodifyTestData(newTestData);\n\t\tsetTimeout(() => changeLocation('main'), 0);\n\t};\n\n\tconst handleChangeLocation = location => {\n\t\tchangeLocation(location);\n\t};\n\n\t// EDIT\n\tconst [getTest, getTestRes] = useLazyQuery(TestQueries.GET_TEST, {\n\t\tfetchPolicy: 'network-only',\n\t\tonCompleted: res => {\n\t\t\thandleGetTestSuccess(res);\n\t\t},\n\t\tonError: err => {\n\t\t\thandleGetTestFailure(err);\n\t\t},\n\t});\n\n\tconst handleGetTestSuccess = res => {\n\t\tconst editTest = res.test;\n\t\tif (!editTest) {\n\t\t\treturn;\n\t\t}\n\t\tmodifyTestData(editTest);\n\t};\n\n\tconst handleGetTestFailure = err => {\n\t\tlet message = getMessage(err.message);\n\t\tprops.enqueueSnackbar(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: message,\n\t\t\t}),\n\t\t\t{\n\t\t\t\tvariant: 'error',\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\thistory.push('/admin/tests');\n\t};\n\n\tconst routeParams = useParams();\n\n\tuseEffect(() => {\n\t\tif (routeParams.id) {\n\t\t\tgetTest({ variables: { id: routeParams.id } });\n\t\t}\n\t}, [routeParams]);\n\n\tswitch (location) {\n\t\tcase 'main':\n\t\t\treturn (\n\t\t\t\t<React.Suspense fallback={<LoadingIndicator />}>\n\t\t\t\t\t<CreateTestMain\n\t\t\t\t\t\thandleChangeLocation={handleChangeLocation}\n\t\t\t\t\t\tcurrentTestData={currentTestData}\n\t\t\t\t\t\tmodifyTestData={modifyTestData}\n\t\t\t\t\t></CreateTestMain>\n\t\t\t\t</React.Suspense>\n\t\t\t);\n\t\tcase 'reading':\n\t\t\treturn (\n\t\t\t\t<React.Suspense fallback={<LoadingIndicator />}>\n\t\t\t\t\t<CreateReadingTest\n\t\t\t\t\t\thandleChangeLocation={handleChangeLocation}\n\t\t\t\t\t\tcurrentTestData={currentTestData}\n\t\t\t\t\t\treadingTest={currentTestData.testDetails.readingTest}\n\t\t\t\t\t\tmodifyReadingTest={modifyReadingTest}\n\t\t\t\t\t></CreateReadingTest>\n\t\t\t\t</React.Suspense>\n\t\t\t);\n\t\tdefault:\n\t\t\treturn <p style={{ textAlign: 'center' }}></p>;\n\t}\n};\n\nexport default injectIntl(memo(AdminCreateTest));\n"]},"metadata":{},"sourceType":"module"}