{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/TestsManagementPage/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport CreateUserModal from 'app/views/components/modals/CreateUserModal';\nimport { DataGrid } from '@material-ui/data-grid';\nimport TestQueries from 'graphql/queries/Test';\nimport { useLazyQuery } from '@apollo/client';\nimport { withSnackbar } from 'notistack';\nimport { Typography, IconButton, Button, Tooltip } from '@material-ui/core';\nimport { Close, Delete, Done, Edit } from '@material-ui/icons';\nimport moment from 'moment';\nimport EditUserModal from 'app/views/components/modals/EditUserModal';\nimport ConfirmDeleteTestDialog from 'app/views/components/modals/ConfirmDeleteTest';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport TestMutations from 'graphql/mutations/Test';\nimport { roundNumberToTwoDecimals } from 'utils/utils';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { getMessage } from 'utils/messageConvert';\n\nconst RenderColumns = props => {\n  const {\n    handleOpenEditModal,\n    handleOpenDeleteModal\n  } = props;\n  return [{\n    field: 'id',\n    headerName: 'ID',\n    width: 200\n  }, {\n    field: 'title',\n    headerName: 'Title',\n    width: 250\n  }, {\n    field: 'views',\n    headerName: 'Views',\n    width: 100\n  }, {\n    field: 'testsTaken',\n    headerName: 'Tests taken',\n    width: 100\n  }, {\n    field: 'author',\n    headerName: 'Author',\n    description: 'Username of the person who created this test',\n    width: 250,\n    renderCell: params => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 6\n        }\n      }, params.value ? /*#__PURE__*/React.createElement(\"p\", {\n        className: \"m-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 8\n        }\n      }, params.value.username) : /*#__PURE__*/React.createElement(Tooltip, {\n        title: \"This user has been removed and is no longer available\",\n        \"aria-label\": \"removed user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }\n      }, \"Removed user\")));\n    }\n  }, {\n    field: 'rating',\n    headerName: 'Rating',\n    description: 'Overall rating of the test coming from users',\n    width: 120,\n    renderCell: params => /*#__PURE__*/React.createElement(\"p\", {\n      className: \"m-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }, roundNumberToTwoDecimals(params.value.starAmount), \" (\", params.value.votes.length, \" votes)\")\n  }, {\n    field: 'publishDate',\n    headerName: 'Publish Date',\n    description: 'The test will only be valid from this day on',\n    width: 150,\n    valueFormatter: params => moment(params.value).format('DD-MM-YYYY')\n  }, {\n    field: 'createdAt',\n    headerName: 'Created at',\n    width: 150,\n    valueFormatter: params => moment(params.value).format('DD-MM-YYYY')\n  }, {\n    field: 'updatedAt',\n    headerName: 'Updated at',\n    width: 150,\n    valueFormatter: params => moment(params.value).format('DD-MM-YYYY')\n  }, {\n    field: 'actions',\n    headerName: 'Actions',\n    description: \"Edit user's information\",\n    width: 130,\n    disableClickEventBubbling: true,\n    renderCell: params => /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: () => handleOpenEditModal(params.data.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Edit, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: () => handleOpenDeleteModal(params.data.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Delete, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    })))\n  }];\n};\n\nconst TestsManagementPage = props => {\n  const {\n    intl\n  } = props;\n  const [testSelectedForDelete, setTestSelectedForDelete] = useState([]);\n  const [data, setData] = useState([]); // GET\n\n  const [getTests, testsRes] = useLazyQuery(TestQueries.GET_TESTS, {\n    fetchPolicy: 'network-only',\n    onCompleted: () => setData(testsRes.data.tests),\n    onError: () => {\n      setData([]);\n      props.enqueueSnackbar('Something went wrong, please make sure you are connected to the internet', {\n        variant: 'error',\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        }\n      });\n    }\n  });\n  useEffect(() => {\n    getTests({\n      variables: {\n        offset: 0,\n        limit: 0\n      }\n    });\n  }, []);\n  const [selectedTests, setSelectedTests] = useState([]);\n  const history = useHistory(); // DELETE\n\n  const [deleteModalOpen, setDeleteModalOpen] = useState(false);\n  const [deleteTests, deleteTestsRes] = useMutation(TestMutations.DELETE_MANY, {\n    onCompleted: () => handleDeleteSuccess(),\n    onError: err => handleDeleteFailure(err)\n  });\n\n  const handleDeleteSuccess = () => {\n    getTests();\n    setDeleteModalOpen(false);\n    props.enqueueSnackbar('Deleted successfully', {\n      variant: 'success',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    });\n  };\n\n  const handleDeleteFailure = err => {\n    let message = getMessage(err.message);\n    props.enqueueSnackbar(intl.formatMessage({\n      id: message\n    }), {\n      variant: 'error',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    });\n  };\n\n  const handleDeleteTest = () => {\n    let idArray = [];\n\n    if (testSelectedForDelete.length > 0) {\n      return deleteTests({\n        variables: {\n          tests: testSelectedForDelete\n        }\n      });\n    }\n\n    selectedTests.forEach(test => idArray.push(test.id));\n    deleteTests({\n      variables: {\n        tests: idArray\n      }\n    });\n  };\n\n  const handleOpenDeleteModal = id => {\n    if (id) {\n      setTestSelectedForDelete([id]);\n    } else {\n      setTestSelectedForDelete([]);\n    }\n\n    setDeleteModalOpen(true);\n  };\n\n  const handleCloseDeleteModal = () => {\n    setTestSelectedForDelete([]);\n    setDeleteModalOpen(false);\n  }; // EDIT\n\n\n  const handleOpenEditModal = id => {\n    history.push(`/admin/test/edit/${id}`);\n  };\n\n  const handleCloseEditModal = () => {}; // CREATE\n\n\n  const handleRedirectAddTest = () => {\n    history.push('/admin/test/create');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-portlet kt-portlet--height-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmDeleteTestDialog, {\n    open: deleteModalOpen,\n    handleClose: handleCloseDeleteModal,\n    handleConfirm: handleDeleteTest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-portlet__head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-portlet__head-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    className: \"kt-portlet__head-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 6\n    }\n  }, \"Test List\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-portlet__head-toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => handleRedirectAddTest(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 6\n    }\n  }, \"Add new\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"ml-2\",\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => getTests(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 6\n    }\n  }, \"Refresh\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"ml-2\",\n    variant: \"contained\",\n    disabled: selectedTests.length < 1,\n    color: \"default\",\n    onClick: () => handleOpenDeleteModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 6\n    }\n  }, \"Delete\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-portlet__body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 600,\n      width: '100%',\n      margin: '50px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    onSelectionChange: newSelection => {\n      setSelectedTests(newSelection.rows);\n    },\n    loading: testsRes.loading,\n    rows: data,\n    columns: RenderColumns({\n      handleOpenEditModal,\n      handleOpenDeleteModal,\n      handleDeleteTest\n    }),\n    pageSize: 10,\n    checkboxSelection: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 6\n    }\n  }))));\n};\n\nexport default injectIntl(withSnackbar(TestsManagementPage));","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/TestsManagementPage/index.js"],"names":["React","useEffect","useState","CreateUserModal","DataGrid","TestQueries","useLazyQuery","withSnackbar","Typography","IconButton","Button","Tooltip","Close","Delete","Done","Edit","moment","EditUserModal","ConfirmDeleteTestDialog","useHistory","useMutation","TestMutations","roundNumberToTwoDecimals","FormattedMessage","injectIntl","getMessage","RenderColumns","props","handleOpenEditModal","handleOpenDeleteModal","field","headerName","width","description","renderCell","params","value","username","starAmount","votes","length","valueFormatter","format","disableClickEventBubbling","data","id","TestsManagementPage","intl","testSelectedForDelete","setTestSelectedForDelete","setData","getTests","testsRes","GET_TESTS","fetchPolicy","onCompleted","tests","onError","enqueueSnackbar","variant","anchorOrigin","vertical","horizontal","variables","offset","limit","selectedTests","setSelectedTests","history","deleteModalOpen","setDeleteModalOpen","deleteTests","deleteTestsRes","DELETE_MANY","handleDeleteSuccess","err","handleDeleteFailure","message","formatMessage","handleDeleteTest","idArray","forEach","test","push","handleCloseDeleteModal","handleCloseEditModal","handleRedirectAddTest","height","margin","newSelection","rows","loading"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport CreateUserModal from 'app/views/components/modals/CreateUserModal';\nimport { DataGrid } from '@material-ui/data-grid';\nimport TestQueries from 'graphql/queries/Test';\nimport { useLazyQuery } from '@apollo/client';\nimport { withSnackbar } from 'notistack';\nimport { Typography, IconButton, Button, Tooltip } from '@material-ui/core';\nimport { Close, Delete, Done, Edit } from '@material-ui/icons';\nimport moment from 'moment';\nimport EditUserModal from 'app/views/components/modals/EditUserModal';\nimport ConfirmDeleteTestDialog from 'app/views/components/modals/ConfirmDeleteTest';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport TestMutations from 'graphql/mutations/Test';\nimport { roundNumberToTwoDecimals } from 'utils/utils';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { getMessage } from 'utils/messageConvert';\n\nconst RenderColumns = props => {\n\tconst { handleOpenEditModal, handleOpenDeleteModal } = props;\n\treturn [\n\t\t{ field: 'id', headerName: 'ID', width: 200 },\n\t\t{ field: 'title', headerName: 'Title', width: 250 },\n\t\t{ field: 'views', headerName: 'Views', width: 100 },\n\t\t{ field: 'testsTaken', headerName: 'Tests taken', width: 100 },\n\t\t{\n\t\t\tfield: 'author',\n\t\t\theaderName: 'Author',\n\t\t\tdescription: 'Username of the person who created this test',\n\t\t\twidth: 250,\n\t\t\trenderCell: params => {\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{params.value ? (\n\t\t\t\t\t\t\t<p className=\"m-0\">{params.value.username}</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\ttitle=\"This user has been removed and is no longer available\"\n\t\t\t\t\t\t\t\taria-label=\"removed user\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Typography variant=\"body2\">Removed user</Typography>\n\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfield: 'rating',\n\t\t\theaderName: 'Rating',\n\t\t\tdescription: 'Overall rating of the test coming from users',\n\t\t\twidth: 120,\n\t\t\trenderCell: params => (\n\t\t\t\t<p className=\"m-0\">\n\t\t\t\t\t{roundNumberToTwoDecimals(params.value.starAmount)} ({params.value.votes.length} votes)\n\t\t\t\t</p>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\tfield: 'publishDate',\n\t\t\theaderName: 'Publish Date',\n\t\t\tdescription: 'The test will only be valid from this day on',\n\t\t\twidth: 150,\n\t\t\tvalueFormatter: params => moment(params.value).format('DD-MM-YYYY'),\n\t\t},\n\t\t{\n\t\t\tfield: 'createdAt',\n\t\t\theaderName: 'Created at',\n\t\t\twidth: 150,\n\t\t\tvalueFormatter: params => moment(params.value).format('DD-MM-YYYY'),\n\t\t},\n\t\t{\n\t\t\tfield: 'updatedAt',\n\t\t\theaderName: 'Updated at',\n\t\t\twidth: 150,\n\t\t\tvalueFormatter: params => moment(params.value).format('DD-MM-YYYY'),\n\t\t},\n\t\t{\n\t\t\tfield: 'actions',\n\t\t\theaderName: 'Actions',\n\t\t\tdescription: \"Edit user's information\",\n\t\t\twidth: 130,\n\t\t\tdisableClickEventBubbling: true,\n\t\t\trenderCell: params => (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<IconButton onClick={() => handleOpenEditModal(params.data.id)}>\n\t\t\t\t\t\t<Edit></Edit>\n\t\t\t\t\t</IconButton>\n\n\t\t\t\t\t<IconButton onClick={() => handleOpenDeleteModal(params.data.id)}>\n\t\t\t\t\t\t<Delete></Delete>\n\t\t\t\t\t</IconButton>\n\t\t\t\t</React.Fragment>\n\t\t\t),\n\t\t},\n\t];\n};\n\nconst TestsManagementPage = props => {\n\tconst { intl } = props;\n\tconst [testSelectedForDelete, setTestSelectedForDelete] = useState([]);\n\tconst [data, setData] = useState([]);\n\n\t// GET\n\tconst [getTests, testsRes] = useLazyQuery(TestQueries.GET_TESTS, {\n\t\tfetchPolicy: 'network-only',\n\t\tonCompleted: () => setData(testsRes.data.tests),\n\t\tonError: () => {\n\t\t\tsetData([]);\n\t\t\tprops.enqueueSnackbar('Something went wrong, please make sure you are connected to the internet', {\n\t\t\t\tvariant: 'error',\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t});\n\tuseEffect(() => {\n\t\tgetTests({ variables: { offset: 0, limit: 0 } });\n\t}, []);\n\n\tconst [selectedTests, setSelectedTests] = useState([]);\n\tconst history = useHistory();\n\n\t// DELETE\n\tconst [deleteModalOpen, setDeleteModalOpen] = useState(false);\n\tconst [deleteTests, deleteTestsRes] = useMutation(TestMutations.DELETE_MANY, {\n\t\tonCompleted: () => handleDeleteSuccess(),\n\t\tonError: err => handleDeleteFailure(err),\n\t});\n\n\tconst handleDeleteSuccess = () => {\n\t\tgetTests();\n\t\tsetDeleteModalOpen(false);\n\t\tprops.enqueueSnackbar('Deleted successfully', {\n\t\t\tvariant: 'success',\n\t\t\tanchorOrigin: {\n\t\t\t\tvertical: 'top',\n\t\t\t\thorizontal: 'right',\n\t\t\t},\n\t\t});\n\t};\n\n\tconst handleDeleteFailure = err => {\n\t\tlet message = getMessage(err.message);\n\t\tprops.enqueueSnackbar(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: message,\n\t\t\t}),\n\t\t\t{\n\t\t\t\tvariant: 'error',\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t};\n\n\tconst handleDeleteTest = () => {\n\t\tlet idArray = [];\n\t\tif (testSelectedForDelete.length > 0) {\n\t\t\treturn deleteTests({ variables: { tests: testSelectedForDelete } });\n\t\t}\n\n\t\tselectedTests.forEach(test => idArray.push(test.id));\n\t\tdeleteTests({ variables: { tests: idArray } });\n\t};\n\n\tconst handleOpenDeleteModal = id => {\n\t\tif (id) {\n\t\t\tsetTestSelectedForDelete([id]);\n\t\t} else {\n\t\t\tsetTestSelectedForDelete([]);\n\t\t}\n\t\tsetDeleteModalOpen(true);\n\t};\n\n\tconst handleCloseDeleteModal = () => {\n\t\tsetTestSelectedForDelete([]);\n\t\tsetDeleteModalOpen(false);\n\t};\n\n\t// EDIT\n\tconst handleOpenEditModal = id => {\n\t\thistory.push(`/admin/test/edit/${id}`);\n\t};\n\n\tconst handleCloseEditModal = () => {};\n\n\t// CREATE\n\tconst handleRedirectAddTest = () => {\n\t\thistory.push('/admin/test/create');\n\t};\n\n\treturn (\n\t\t<div className=\"kt-portlet kt-portlet--height-fluid\">\n\t\t\t<ConfirmDeleteTestDialog\n\t\t\t\topen={deleteModalOpen}\n\t\t\t\thandleClose={handleCloseDeleteModal}\n\t\t\t\thandleConfirm={handleDeleteTest}\n\t\t\t></ConfirmDeleteTestDialog>\n\t\t\t<div className=\"kt-portlet__head\">\n\t\t\t\t<div className=\"kt-portlet__head-label\">\n\t\t\t\t\t<Typography variant=\"h5\" className=\"kt-portlet__head-title\">\n\t\t\t\t\t\tTest List\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"kt-portlet__head-toolbar\">\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={() => handleRedirectAddTest()}>\n\t\t\t\t\t\tAdd new\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button className=\"ml-2\" variant=\"contained\" color=\"secondary\" onClick={() => getTests()}>\n\t\t\t\t\t\tRefresh\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tdisabled={selectedTests.length < 1}\n\t\t\t\t\t\tcolor=\"default\"\n\t\t\t\t\t\tonClick={() => handleOpenDeleteModal()}\n\t\t\t\t\t>\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"kt-portlet__body\">\n\t\t\t\t<div style={{ height: 600, width: '100%', margin: '50px 0px' }}>\n\t\t\t\t\t<DataGrid\n\t\t\t\t\t\tonSelectionChange={newSelection => {\n\t\t\t\t\t\t\tsetSelectedTests(newSelection.rows);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tloading={testsRes.loading}\n\t\t\t\t\t\trows={data}\n\t\t\t\t\t\tcolumns={RenderColumns({ handleOpenEditModal, handleOpenDeleteModal, handleDeleteTest })}\n\t\t\t\t\t\tpageSize={10}\n\t\t\t\t\t\tcheckboxSelection\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default injectIntl(withSnackbar(TestsManagementPage));\n"]},"metadata":{},"sourceType":"module"}