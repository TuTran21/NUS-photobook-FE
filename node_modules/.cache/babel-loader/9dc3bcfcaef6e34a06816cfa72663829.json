{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/Test/QuestionTypes/TrueFalseNotgiven.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { isEven, questionIndexing } from 'utils/utils';\nimport CustomDropdown from '../../Form/EngageDropdown/index';\nimport QuestionNumber from '../QuestionNumber';\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\nconst QuestionInstruction = styled.div`\n\tmargin-top: 20px;\n`;\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\nconst Question = styled.div`\n\tmargin-bottom: 20px;\n`;\nconst InstructionLine = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 10px 10px;\n\tbackground-color: ${props => props.isGrey ? '#f5f5f5;' : 'none;'};\n`;\nconst InstructionLabel = styled.label`\n\tfont-size: 14px;\n\tfont-weight: 600;\n\tmargin-bottom: 0px;\n\tpadding: 5px 0px;\n`;\nconst InstructionWrapper = styled.div`\n\tmargin-bottom: 14px;\n`;\nconst instructionText = [{\n  value: 'TRUE',\n  label: 'If the statement agrees with the information'\n}, {\n  value: 'FALSE',\n  label: 'If the statement contradicts the information'\n}, {\n  value: 'NOT GIVEN',\n  label: 'If there is no information on this'\n}];\n\nfunction InstructionTable(props) {\n  const {\n    options\n  } = props;\n  return options.map((option, idx) => {\n    return instructionText.map(instruction => {\n      if (instruction.value.toUpperCase() === option.toUpperCase()) {\n        return /*#__PURE__*/React.createElement(InstructionLine, {\n          key: idx,\n          isGrey: isEven(idx),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(InstructionLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 7\n          }\n        }, instruction.value), /*#__PURE__*/React.createElement(InstructionLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 7\n          }\n        }, instruction.label));\n      }\n\n      return null;\n    });\n  });\n}\n\nfunction TrueFalseNotgiven(props) {\n  const {\n    questionSection,\n    paragraphAmount,\n    questionRange,\n    handleOnChange,\n    sectionAnswer\n  } = props;\n  const {\n    instruction,\n    questionType,\n    options,\n    questions\n  } = questionSection;\n  let questionIndex = questionIndexing(questionRange);\n  let optionFormat = [];\n  let valueFormat = [];\n\n  if (!options) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 10\n      }\n    }, \"Something went wrong, please try again later\");\n  }\n\n  if (sectionAnswer) {\n    sectionAnswer.answers.map(answer => {\n      valueFormat.push(answer);\n    });\n  }\n\n  options.map(option => optionFormat.push({\n    value: option,\n    label: option\n  }));\n  return /*#__PURE__*/React.createElement(QuestionContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(QuestionInstruction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, \"Do the following statements agree with the information given in the Reading Passage\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, \"In boxes \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, questionRange), \" on your answer sheet, choose\"), /*#__PURE__*/React.createElement(InstructionWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InstructionTable, {\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 6\n    }\n  }))), questions.map((question, idx) => {\n    const answer = valueFormat.find(answer => answer.id === idx);\n    const value = answer ? {\n      value: answer.value,\n      label: answer.value\n    } : '';\n    questionIndex = questionIndex + 1;\n    return /*#__PURE__*/React.createElement(Question, {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(QuestionNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, questionIndex), /*#__PURE__*/React.createElement(QuestionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CustomDropdown, {\n      value: value,\n      onChange: e => handleOnChange(idx, e.value),\n      holderStyle: {\n        marginTop: '0.5rem',\n        marginBottom: '0.5rem'\n      },\n      options: optionFormat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 8\n      }\n    })), question.content);\n  }));\n}\n\nexport default TrueFalseNotgiven;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/Test/QuestionTypes/TrueFalseNotgiven.js"],"names":["React","styled","isEven","questionIndexing","CustomDropdown","QuestionNumber","QuestionContent","div","QuestionInstruction","QuestionSelect","span","Question","InstructionLine","props","isGrey","InstructionLabel","label","InstructionWrapper","instructionText","value","InstructionTable","options","map","option","idx","instruction","toUpperCase","TrueFalseNotgiven","questionSection","paragraphAmount","questionRange","handleOnChange","sectionAnswer","questionType","questions","questionIndex","optionFormat","valueFormat","answers","answer","push","question","find","id","e","marginTop","marginBottom","content"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { isEven, questionIndexing } from 'utils/utils';\nimport CustomDropdown from '../../Form/EngageDropdown/index';\nimport QuestionNumber from '../QuestionNumber';\n\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\n\nconst QuestionInstruction = styled.div`\n\tmargin-top: 20px;\n`;\n\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\n\nconst Question = styled.div`\n\tmargin-bottom: 20px;\n`;\n\nconst InstructionLine = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 10px 10px;\n\tbackground-color: ${props => (props.isGrey ? '#f5f5f5;' : 'none;')};\n`;\n\nconst InstructionLabel = styled.label`\n\tfont-size: 14px;\n\tfont-weight: 600;\n\tmargin-bottom: 0px;\n\tpadding: 5px 0px;\n`;\n\nconst InstructionWrapper = styled.div`\n\tmargin-bottom: 14px;\n`;\n\nconst instructionText = [\n\t{\n\t\tvalue: 'TRUE',\n\t\tlabel: 'If the statement agrees with the information',\n\t},\n\t{\n\t\tvalue: 'FALSE',\n\t\tlabel: 'If the statement contradicts the information',\n\t},\n\t{ value: 'NOT GIVEN', label: 'If there is no information on this' },\n];\n\nfunction InstructionTable(props) {\n\tconst { options } = props;\n\n\treturn options.map((option, idx) => {\n\t\treturn instructionText.map(instruction => {\n\t\t\tif (instruction.value.toUpperCase() === option.toUpperCase()) {\n\t\t\t\treturn (\n\t\t\t\t\t<InstructionLine key={idx} isGrey={isEven(idx)}>\n\t\t\t\t\t\t<InstructionLabel>{instruction.value}</InstructionLabel>\n\t\t\t\t\t\t<InstructionLabel>{instruction.label}</InstructionLabel>\n\t\t\t\t\t</InstructionLine>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\t});\n}\n\nfunction TrueFalseNotgiven(props) {\n\tconst { questionSection, paragraphAmount, questionRange, handleOnChange, sectionAnswer } = props;\n\n\tconst { instruction, questionType, options, questions } = questionSection;\n\tlet questionIndex = questionIndexing(questionRange);\n\tlet optionFormat = [];\n\tlet valueFormat = [];\n\n\tif (!options) {\n\t\treturn <div>Something went wrong, please try again later</div>;\n\t}\n\n\tif (sectionAnswer) {\n\t\tsectionAnswer.answers.map(answer => {\n\t\t\tvalueFormat.push(answer);\n\t\t});\n\t}\n\n\toptions.map(option => optionFormat.push({ value: option, label: option }));\n\treturn (\n\t\t<QuestionContent>\n\t\t\t<QuestionInstruction>\n\t\t\t\t<p>Do the following statements agree with the information given in the Reading Passage</p>\n\t\t\t\t<p>\n\t\t\t\t\tIn boxes <strong>{questionRange}</strong> on your answer sheet, choose\n\t\t\t\t</p>\n\t\t\t\t<InstructionWrapper>\n\t\t\t\t\t<InstructionTable options={options}></InstructionTable>\n\t\t\t\t</InstructionWrapper>\n\t\t\t</QuestionInstruction>\n\n\t\t\t{questions.map((question, idx) => {\n\t\t\t\tconst answer = valueFormat.find(answer => answer.id === idx);\n\t\t\t\tconst value = answer ? { value: answer.value, label: answer.value } : '';\n\t\t\t\tquestionIndex = questionIndex + 1;\n\t\t\t\treturn (\n\t\t\t\t\t<Question key={idx}>\n\t\t\t\t\t\t<QuestionNumber>{questionIndex}</QuestionNumber>\n\t\t\t\t\t\t<QuestionSelect>\n\t\t\t\t\t\t\t<CustomDropdown\n\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\tonChange={e => handleOnChange(idx, e.value)}\n\t\t\t\t\t\t\t\tholderStyle={{\n\t\t\t\t\t\t\t\t\tmarginTop: '0.5rem',\n\t\t\t\t\t\t\t\t\tmarginBottom: '0.5rem',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\toptions={optionFormat}\n\t\t\t\t\t\t\t></CustomDropdown>\n\t\t\t\t\t\t</QuestionSelect>\n\t\t\t\t\t\t{question.content}\n\t\t\t\t\t</Question>\n\t\t\t\t);\n\t\t\t})}\n\t\t</QuestionContent>\n\t);\n}\n\nexport default TrueFalseNotgiven;\n"]},"metadata":{},"sourceType":"module"}