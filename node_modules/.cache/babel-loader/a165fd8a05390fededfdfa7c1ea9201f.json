{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/AdminCreateTest/components/AdminCreateReadingTest/components/EditableQuestionSection/index.js\";\nimport React, { useState, useEffect, memo } from 'react';\nimport { Button, Grid, IconButton } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { incrementAlphabet, getQuestionSectionQuestionRange, getPassageQuestionRange, getEndingNumber } from 'utils/utils';\nimport _ from 'lodash';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator';\nimport QuestionEditRender from 'app/views/components/CreateReadingTest/QuestionEditRender';\nimport { Edit, Delete } from '@material-ui/icons'; // QUESTION PART\n\nconst SectionActionWrapper = styled.div`\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n`;\nconst QuestionCount = styled.h3`\n\tmargin-top: 15px;\n\tfont-size: 20px;\n\tfont-weight: 700;\n\tline-height: 1.2;\n`;\nconst QuestionSection = styled.div`\n\tmargin-bottom: 30px;\n\tposition: relative;\n\t${props => props.ishover === 'true' && `outline: 1px solid  rgba(0, 0, 0, 0.23);`}\n`;\nconst StyledCol = styled(Grid)`\n\t// padding: 0px;\n`;\n\nconst EditableQuestionSection = props => {\n  const {\n    readingTestData,\n    passageNumber,\n    toggleDrawer,\n    handleRemoveQuestionSection\n  } = props; // Hooks\n\n  const [isHover, setIsHover] = useState(false);\n\n  const handleOnHover = value => {\n    setIsHover(value);\n  }; // DEFINE CONSTANTS FOR USE IN RENDER\n\n\n  const readingTestDetails = readingTestData.testDetails;\n  const currentPassage = readingTestDetails.passages[passageNumber];\n  const questionSections = currentPassage.questionSections;\n  const paragraphAmount = currentPassage.paragraphs.length; // Seperate questions inside passages into range strings to display on top of question sections for each passage: \"questions 1-13\"\n\n  const passageQuestionRange = getPassageQuestionRange(readingTestDetails.passages); // Seperate questions inside sections into range strings to display on top of question Sections: \"Questions 1-4\"\n  // Ex: section[0]: 1-4, section[1]: 5-8, section[2]: 9-13\n\n  let previousSectionQuestionCount;\n\n  if (passageNumber > 0) {\n    previousSectionQuestionCount = getEndingNumber(passageQuestionRange[passageNumber - 1]) + 1;\n  }\n\n  const questionRange = getQuestionSectionQuestionRange(questionSections, previousSectionQuestionCount);\n  return currentPassage.questionSections.map((questionSection, idx) => {\n    return /*#__PURE__*/React.createElement(QuestionSection, {\n      onMouseEnter: () => handleOnHover(true),\n      onMouseLeave: () => handleOnHover(false),\n      key: idx,\n      ishover: isHover.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 4\n      }\n    }, isHover && /*#__PURE__*/React.createElement(SectionActionWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: () => toggleDrawer(true, {\n        data: questionSection,\n        idx: idx\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Edit, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 8\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: () => handleRemoveQuestionSection(idx),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Delete, {\n      color: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 8\n      }\n    }))), /*#__PURE__*/React.createElement(QuestionCount, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    }, \"Questions \", questionRange[idx]), /*#__PURE__*/React.createElement(QuestionEditRender, {\n      questionRange: questionRange[idx],\n      questionSection: questionSection,\n      isEditable: false,\n      sectionId: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }));\n  });\n};\n\nexport default memo(EditableQuestionSection);","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/AdminCreateTest/components/AdminCreateReadingTest/components/EditableQuestionSection/index.js"],"names":["React","useState","useEffect","memo","Button","Grid","IconButton","styled","incrementAlphabet","getQuestionSectionQuestionRange","getPassageQuestionRange","getEndingNumber","_","LoadingIndicator","QuestionEditRender","Edit","Delete","SectionActionWrapper","div","QuestionCount","h3","QuestionSection","props","ishover","StyledCol","EditableQuestionSection","readingTestData","passageNumber","toggleDrawer","handleRemoveQuestionSection","isHover","setIsHover","handleOnHover","value","readingTestDetails","testDetails","currentPassage","passages","questionSections","paragraphAmount","paragraphs","length","passageQuestionRange","previousSectionQuestionCount","questionRange","map","questionSection","idx","toString","data"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, memo } from 'react';\nimport { Button, Grid, IconButton } from '@material-ui/core';\nimport styled from 'styled-components';\nimport {\n\tincrementAlphabet,\n\tgetQuestionSectionQuestionRange,\n\tgetPassageQuestionRange,\n\tgetEndingNumber,\n} from 'utils/utils';\nimport _ from 'lodash';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator';\nimport QuestionEditRender from 'app/views/components/CreateReadingTest/QuestionEditRender';\nimport { Edit, Delete } from '@material-ui/icons';\n\n// QUESTION PART\nconst SectionActionWrapper = styled.div`\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n`;\n\nconst QuestionCount = styled.h3`\n\tmargin-top: 15px;\n\tfont-size: 20px;\n\tfont-weight: 700;\n\tline-height: 1.2;\n`;\n\nconst QuestionSection = styled.div`\n\tmargin-bottom: 30px;\n\tposition: relative;\n\t${props => props.ishover === 'true' && `outline: 1px solid  rgba(0, 0, 0, 0.23);`}\n`;\n\nconst StyledCol = styled(Grid)`\n\t// padding: 0px;\n`;\n\nconst EditableQuestionSection = props => {\n\tconst { readingTestData, passageNumber, toggleDrawer, handleRemoveQuestionSection } = props;\n\t// Hooks\n\tconst [isHover, setIsHover] = useState(false);\n\n\tconst handleOnHover = value => {\n\t\tsetIsHover(value);\n\t};\n\t// DEFINE CONSTANTS FOR USE IN RENDER\n\tconst readingTestDetails = readingTestData.testDetails;\n\tconst currentPassage = readingTestDetails.passages[passageNumber];\n\tconst questionSections = currentPassage.questionSections;\n\tconst paragraphAmount = currentPassage.paragraphs.length;\n\t// Seperate questions inside passages into range strings to display on top of question sections for each passage: \"questions 1-13\"\n\tconst passageQuestionRange = getPassageQuestionRange(readingTestDetails.passages);\n\n\t// Seperate questions inside sections into range strings to display on top of question Sections: \"Questions 1-4\"\n\t// Ex: section[0]: 1-4, section[1]: 5-8, section[2]: 9-13\n\tlet previousSectionQuestionCount;\n\tif (passageNumber > 0) {\n\t\tpreviousSectionQuestionCount = getEndingNumber(passageQuestionRange[passageNumber - 1]) + 1;\n\t}\n\tconst questionRange = getQuestionSectionQuestionRange(questionSections, previousSectionQuestionCount);\n\n\treturn currentPassage.questionSections.map((questionSection, idx) => {\n\t\treturn (\n\t\t\t<QuestionSection\n\t\t\t\tonMouseEnter={() => handleOnHover(true)}\n\t\t\t\tonMouseLeave={() => handleOnHover(false)}\n\t\t\t\tkey={idx}\n\t\t\t\tishover={isHover.toString()}\n\t\t\t>\n\t\t\t\t{isHover && (\n\t\t\t\t\t<SectionActionWrapper>\n\t\t\t\t\t\t<IconButton onClick={() => toggleDrawer(true, { data: questionSection, idx: idx })}>\n\t\t\t\t\t\t\t<Edit color=\"primary\"></Edit>\n\t\t\t\t\t\t</IconButton>\n\n\t\t\t\t\t\t<IconButton onClick={() => handleRemoveQuestionSection(idx)}>\n\t\t\t\t\t\t\t<Delete color=\"error\"></Delete>\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</SectionActionWrapper>\n\t\t\t\t)}\n\t\t\t\t<QuestionCount>Questions {questionRange[idx]}</QuestionCount>\n\t\t\t\t<QuestionEditRender\n\t\t\t\t\tquestionRange={questionRange[idx]}\n\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t\tisEditable={false}\n\t\t\t\t\tsectionId={idx}\n\t\t\t\t></QuestionEditRender>\n\t\t\t</QuestionSection>\n\t\t);\n\t});\n};\n\nexport default memo(EditableQuestionSection);\n"]},"metadata":{},"sourceType":"module"}