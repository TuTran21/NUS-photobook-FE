{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/Test/QuestionTypes/MatchHeadingQuestion.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport CustomDropdown from '../../Form/EngageDropdown/index';\nimport QuestionNumber from '../QuestionNumber';\nimport { incrementAlphabet, questionIndexing } from 'utils/utils';\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\nconst QuestionInstruction = styled.p`\n\tmargin-top: 20px;\n`;\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\nconst Question = styled.div`\n\tmargin-bottom: 20px;\n`;\n\nfunction MatchHeadingQuestion(props) {\n  const {\n    questionSection,\n    paragraphAmount,\n    questionRange,\n    handleOnChange,\n    sectionAnswer\n  } = props;\n  const {\n    instruction,\n    questionType,\n    options,\n    questions\n  } = questionSection;\n  let questionIndex = 0;\n  questionIndex = questionIndexing(questionRange);\n  let optionFormat = [];\n  let valueFormat = [];\n\n  if (sectionAnswer) {\n    sectionAnswer.answers.map(answer => {\n      valueFormat.push(answer);\n    });\n  }\n\n  if (!options) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 10\n      }\n    }, \"Something went wrong, please try again later\");\n  }\n\n  options.map(option => optionFormat.push({\n    value: option,\n    label: option\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(QuestionContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(QuestionInstruction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, \"The text has \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }\n  }, paragraphAmount), \" paragraphs\", ' ', /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 6\n    }\n  }, \"(\", options[0], \" - \", options.slice(-1).pop(), \")\")), /*#__PURE__*/React.createElement(QuestionInstruction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, instruction), questions.map((question, idx) => {\n    questionIndex = questionIndex + 1;\n    const answer = valueFormat.find(answer => answer.id === idx);\n    const value = answer ? {\n      value: answer.value,\n      label: answer.value\n    } : '';\n    return /*#__PURE__*/React.createElement(Question, {\n      key: questionIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QuestionNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 8\n      }\n    }, questionIndex), /*#__PURE__*/React.createElement(QuestionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(CustomDropdown, {\n      key: questionIndex,\n      value: value,\n      onChange: e => handleOnChange(idx, e.value),\n      holderStyle: {\n        marginTop: '0.5rem',\n        marginBottom: '0.5rem'\n      },\n      options: optionFormat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    })), question.content);\n  })));\n}\n\nexport default MatchHeadingQuestion;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/Test/QuestionTypes/MatchHeadingQuestion.js"],"names":["React","styled","CustomDropdown","QuestionNumber","incrementAlphabet","questionIndexing","QuestionContent","div","QuestionInstruction","p","QuestionSelect","span","Question","MatchHeadingQuestion","props","questionSection","paragraphAmount","questionRange","handleOnChange","sectionAnswer","instruction","questionType","options","questions","questionIndex","optionFormat","valueFormat","answers","map","answer","push","option","value","label","slice","pop","question","idx","find","id","e","marginTop","marginBottom","content"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport CustomDropdown from '../../Form/EngageDropdown/index';\nimport QuestionNumber from '../QuestionNumber';\nimport { incrementAlphabet, questionIndexing } from 'utils/utils';\n\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\n\nconst QuestionInstruction = styled.p`\n\tmargin-top: 20px;\n`;\n\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\n\nconst Question = styled.div`\n\tmargin-bottom: 20px;\n`;\n\nfunction MatchHeadingQuestion(props) {\n\tconst { questionSection, paragraphAmount, questionRange, handleOnChange, sectionAnswer } = props;\n\tconst { instruction, questionType, options, questions } = questionSection;\n\n\tlet questionIndex = 0;\n\tquestionIndex = questionIndexing(questionRange);\n\n\tlet optionFormat = [];\n\tlet valueFormat = [];\n\n\tif (sectionAnswer) {\n\t\tsectionAnswer.answers.map(answer => {\n\t\t\tvalueFormat.push(answer);\n\t\t});\n\t}\n\n\tif (!options) {\n\t\treturn <div>Something went wrong, please try again later</div>;\n\t}\n\n\toptions.map(option => optionFormat.push({ value: option, label: option }));\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<QuestionContent>\n\t\t\t\t<QuestionInstruction>\n\t\t\t\t\tThe text has <strong>{paragraphAmount}</strong> paragraphs{' '}\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t({options[0]} - {options.slice(-1).pop()})\n\t\t\t\t\t</strong>\n\t\t\t\t</QuestionInstruction>\n\t\t\t\t<QuestionInstruction>{instruction}</QuestionInstruction>\n\n\t\t\t\t{questions.map((question, idx) => {\n\t\t\t\t\tquestionIndex = questionIndex + 1;\n\t\t\t\t\tconst answer = valueFormat.find(answer => answer.id === idx);\n\t\t\t\t\tconst value = answer ? { value: answer.value, label: answer.value } : '';\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Question key={questionIndex}>\n\t\t\t\t\t\t\t<QuestionNumber>{questionIndex}</QuestionNumber>\n\t\t\t\t\t\t\t<QuestionSelect>\n\t\t\t\t\t\t\t\t<CustomDropdown\n\t\t\t\t\t\t\t\t\tkey={questionIndex}\n\t\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\t\tonChange={e => handleOnChange(idx, e.value)}\n\t\t\t\t\t\t\t\t\tholderStyle={{\n\t\t\t\t\t\t\t\t\t\tmarginTop: '0.5rem',\n\t\t\t\t\t\t\t\t\t\tmarginBottom: '0.5rem',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\toptions={optionFormat}\n\t\t\t\t\t\t\t\t></CustomDropdown>\n\t\t\t\t\t\t\t</QuestionSelect>\n\t\t\t\t\t\t\t{question.content}\n\t\t\t\t\t\t\t{/* {isCreateForm && (\n\t\t\t\t\t\t\t\t<React.Suspense fallback={<LoadingIndicator></LoadingIndicator>}>\n\t\t\t\t\t\t\t\t\t<CreateTestParagraph content={question.content} />\n\t\t\t\t\t\t\t\t</React.Suspense>\n\t\t\t\t\t\t\t)} */}\n\t\t\t\t\t\t</Question>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</QuestionContent>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default MatchHeadingQuestion;\n"]},"metadata":{},"sourceType":"module"}