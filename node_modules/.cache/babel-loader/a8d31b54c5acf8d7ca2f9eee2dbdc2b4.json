{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createLogger } from './middlewares';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport { persistConfig } from './persistConfig';\nimport createReducer from 'state/ducks/rootReducer';\n/**\n * Root Saga & Root Reducer\n */\n\nimport rootReducer from './ducks/rootReducer'; // import rootSaga from './ducks/rootSaga';\n\nconst configureStore = (initialState, history) => {\n  /**\n   * Middlewares\n   */\n  const composeEnhancers = composeWithDevTools({});\n  const middlewares = [createLogger(true), routerMiddleware(history)]; // Persist reducers\n\n  const persistedReducer = persistReducer(persistConfig, createReducer()); // enable redux devtools... can this be done with Webpack instead?\n\n  const enhancers = composeEnhancers(applyMiddleware(...middlewares));\n  const store = createStore(persistedReducer, initialState, enhancers); // Running saga middleware\n  // sagaMiddleware.run(rootSaga);\n  // store.runSaga = sagaMiddleware.run;\n\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n\n  /* istanbul ignore next */\n\n  if (module.hot) {\n    module.hot.accept('state/ducks/rootReducer', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/state/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","routerMiddleware","createLogger","persistReducer","persistStore","persistConfig","createReducer","rootReducer","configureStore","initialState","history","composeEnhancers","middlewares","persistedReducer","enhancers","store","injectedReducers","injectedSagas","module","hot","accept","replaceReducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,eAA7C;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AAEA;AACA;AACA;;AACA,OAAOC,WAAP,MAAwB,qBAAxB,C,CACA;;AAEA,MAAMC,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AACjD;AACD;AACA;AACC,QAAMC,gBAAgB,GAAGX,mBAAmB,CAAC,EAAD,CAA5C;AACA,QAAMY,WAAW,GAAG,CAACV,YAAY,CAAC,IAAD,CAAb,EAAqBD,gBAAgB,CAACS,OAAD,CAArC,CAApB,CALiD,CAMjD;;AACA,QAAMG,gBAAgB,GAAGV,cAAc,CAACE,aAAD,EAAgBC,aAAa,EAA7B,CAAvC,CAPiD,CAQjD;;AACA,QAAMQ,SAAS,GAAGH,gBAAgB,CAACZ,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAAlC;AACA,QAAMG,KAAK,GAAGjB,WAAW,CAACe,gBAAD,EAAmBJ,YAAnB,EAAiCK,SAAjC,CAAzB,CAViD,CAWjD;AACA;AACA;;AACAC,EAAAA,KAAK,CAACC,gBAAN,GAAyB,EAAzB,CAdiD,CAcpB;;AAC7BD,EAAAA,KAAK,CAACE,aAAN,GAAsB,EAAtB,CAfiD,CAevB;AAC1B;;AACA;;AACA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACfD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,yBAAlB,EAA6C,MAAM;AAClDL,MAAAA,KAAK,CAACM,cAAN,CAAqBf,aAAa,CAACS,KAAK,CAACC,gBAAP,CAAlC;AACA,KAFD;AAGA;;AACD,SAAOD,KAAP;AACA,CAxBD;;AA0BA,eAAeP,cAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createLogger } from './middlewares';\n\nimport { persistReducer, persistStore } from 'redux-persist';\nimport { persistConfig } from './persistConfig';\nimport createReducer from 'state/ducks/rootReducer';\n\n/**\n * Root Saga & Root Reducer\n */\nimport rootReducer from './ducks/rootReducer';\n// import rootSaga from './ducks/rootSaga';\n\nconst configureStore = (initialState, history) => {\n\t/**\n\t * Middlewares\n\t */\n\tconst composeEnhancers = composeWithDevTools({});\n\tconst middlewares = [createLogger(true), routerMiddleware(history)];\n\t// Persist reducers\n\tconst persistedReducer = persistReducer(persistConfig, createReducer());\n\t// enable redux devtools... can this be done with Webpack instead?\n\tconst enhancers = composeEnhancers(applyMiddleware(...middlewares));\n\tconst store = createStore(persistedReducer, initialState, enhancers);\n\t// Running saga middleware\n\t// sagaMiddleware.run(rootSaga);\n\t// store.runSaga = sagaMiddleware.run;\n\tstore.injectedReducers = {}; // Reducer registry\n\tstore.injectedSagas = {}; // Saga registry\n\t// Make reducers hot reloadable, see http://mxs.is/googmo\n\t/* istanbul ignore next */\n\tif (module.hot) {\n\t\tmodule.hot.accept('state/ducks/rootReducer', () => {\n\t\t\tstore.replaceReducer(createReducer(store.injectedReducers));\n\t\t});\n\t}\n\treturn store;\n};\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}