{"ast":null,"code":"import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\nimport checkStore from './checkStore';\nimport createReducer from 'state/ducks/rootReducer';\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n    invariant(isString(key) && !isEmpty(key) && isFunction(reducer), '(app/utils...) injectReducer: Expected `reducer` to be a reducer function'); // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n\n    if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) return;\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\nexport default function getInjectors(store) {\n  checkStore(store);\n  return {\n    injectReducer: injectReducerFactory(store, true)\n  };\n}","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/utils/reducerInjectors.js"],"names":["invariant","isEmpty","isFunction","isString","checkStore","createReducer","injectReducerFactory","store","isValid","injectReducer","key","reducer","Reflect","has","injectedReducers","replaceReducer","getInjectors"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,QAA9B,QAA8C,QAA9C;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AAEA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,OAArC,EAA8C;AACpD,SAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,OAA5B,EAAqC;AAC3C,QAAI,CAACH,OAAL,EAAcJ,UAAU,CAACG,KAAD,CAAV;AAEdP,IAAAA,SAAS,CACRG,QAAQ,CAACO,GAAD,CAAR,IAAiB,CAACT,OAAO,CAACS,GAAD,CAAzB,IAAkCR,UAAU,CAACS,OAAD,CADpC,EAER,2EAFQ,CAAT,CAH2C,CAQ3C;;AACA,QAAIC,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,gBAAlB,EAAoCJ,GAApC,KAA4CH,KAAK,CAACO,gBAAN,CAAuBJ,GAAvB,MAAgCC,OAAhF,EAAyF;AAEzFJ,IAAAA,KAAK,CAACO,gBAAN,CAAuBJ,GAAvB,IAA8BC,OAA9B,CAX2C,CAWJ;;AACvCJ,IAAAA,KAAK,CAACQ,cAAN,CAAqBV,aAAa,CAACE,KAAK,CAACO,gBAAP,CAAlC;AACA,GAbD;AAcA;AAED,eAAe,SAASE,YAAT,CAAsBT,KAAtB,EAA6B;AAC3CH,EAAAA,UAAU,CAACG,KAAD,CAAV;AAEA,SAAO;AACNE,IAAAA,aAAa,EAAEH,oBAAoB,CAACC,KAAD,EAAQ,IAAR;AAD7B,GAAP;AAGA","sourcesContent":["import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\n\nimport checkStore from './checkStore';\nimport createReducer from 'state/ducks/rootReducer';\n\nexport function injectReducerFactory(store, isValid) {\n\treturn function injectReducer(key, reducer) {\n\t\tif (!isValid) checkStore(store);\n\n\t\tinvariant(\n\t\t\tisString(key) && !isEmpty(key) && isFunction(reducer),\n\t\t\t'(app/utils...) injectReducer: Expected `reducer` to be a reducer function',\n\t\t);\n\n\t\t// Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n\t\tif (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) return;\n\n\t\tstore.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n\t\tstore.replaceReducer(createReducer(store.injectedReducers));\n\t};\n}\n\nexport default function getInjectors(store) {\n\tcheckStore(store);\n\n\treturn {\n\t\tinjectReducer: injectReducerFactory(store, true),\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}