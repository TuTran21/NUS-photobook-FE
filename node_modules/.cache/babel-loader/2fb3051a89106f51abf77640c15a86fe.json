{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/CreateReadingTest/EditableQuestions/EditableTrueFalseNotgiven.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { isEven, questionIndexing } from 'utils/utils';\nimport CustomDropdown from '../../Form/EngageDropdown/index';\nimport LoadingIndicator from '../../common/LoadingIndicator';\nimport QuestionNumber from 'app/views/components/Test/QuestionNumber';\nimport { Button } from '@material-ui/core';\nconst CreateTestParagraph = React.lazy(() => import('app/views/pages/AdminCreateTest/components/AdminCreateReadingTest/components/Paragraph'));\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\nconst QuestionInstruction = styled.div`\n\tmargin-top: 20px;\n\tmargin-bottom: 20px;\n`;\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\nconst Question = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\t${props => props.isquestionedit === 'true' && `margin-bottom: 80px;\n\t`}\n\n\t${props => props.iseditable === 'false' && 'margin-bottom: 15px;'}\n`;\nconst InstructionLine = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 10px 10px;\n\tbackground-color: ${props => props.isGrey ? '#f5f5f5;' : 'none;'};\n`;\nconst InstructionLabel = styled.label`\n\tfont-size: 14px;\n\tfont-weight: 600;\n\tmargin-bottom: 0px;\n\tpadding: 5px 0px;\n`;\nconst InstructionWrapper = styled.div`\n\tmargin-bottom: 14px;\n`;\nconst ActionsWrapper = styled.div`\n\tposition: absolute;\n\ttop: -45px;\n\tright: 20px;\n\t@media (max-width: 400px) {\n\t\tleft: 20px;\n\t\ttop: -18px;\n\t}\n`;\nconst instructionText = [{\n  value: 'TRUE',\n  label: 'If the statement agrees with the information'\n}, {\n  value: 'FALSE',\n  label: 'If the statement contradicts the information'\n}, {\n  value: 'NOT GIVEN',\n  label: 'If there is no information on this'\n}];\n\nfunction InstructionTable(props) {\n  const {\n    options\n  } = props;\n  return options.map((option, idx) => {\n    return instructionText.map(instruction => {\n      if (instruction.value.toUpperCase() === option.toUpperCase()) {\n        return /*#__PURE__*/React.createElement(InstructionLine, {\n          key: idx,\n          isGrey: isEven(idx),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(InstructionLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 7\n          }\n        }, instruction.value), /*#__PURE__*/React.createElement(InstructionLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 7\n          }\n        }, instruction.label));\n      }\n\n      return null;\n    });\n  });\n}\n\nfunction TrueFalseNotgiven(props) {\n  const {\n    questionSection,\n    paragraphAmount,\n    questionRange,\n    handleOnChange,\n    sectionAnswer,\n    handleRemoveQuestion,\n    handleAddQuestion,\n    isEditable\n  } = props;\n  const {\n    options,\n    questions\n  } = questionSection;\n  let questionIndex = 0;\n\n  if (questionRange) {\n    questionIndex = questionIndexing(questionRange);\n  }\n\n  let optionFormat = [];\n\n  if (!options) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 10\n      }\n    }, \"Something went wrong, please try again later\");\n  }\n\n  options.map(option => optionFormat.push({\n    value: option,\n    label: option\n  }));\n  return /*#__PURE__*/React.createElement(QuestionContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ActionsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 4\n    }\n  }, handleAddQuestion && /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: () => handleAddQuestion('TFN'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 6\n    }\n  }, \"Add question\")), /*#__PURE__*/React.createElement(QuestionInstruction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, \"Do the following statements agree with the information given in the Reading Passage\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, \"In boxes \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }, questionRange), \" on your answer sheet, choose\"), /*#__PURE__*/React.createElement(InstructionWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InstructionTable, {\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 6\n    }\n  }))), questions.map((question, idx) => {\n    const value = question.key ? {\n      value: question.key,\n      label: question.key\n    } : '';\n    questionIndex = questionIndex + 1;\n    return /*#__PURE__*/React.createElement(Question, {\n      key: idx,\n      isquestionedit: \"true\",\n      iseditable: isEditable.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(QuestionNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, questionIndex), /*#__PURE__*/React.createElement(QuestionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CustomDropdown, {\n      disabled: !isEditable,\n      value: value,\n      onChange: e => handleOnChange(idx, e.value.toUpperCase(), question.content, question.multipleChoices),\n      holderStyle: {\n        marginTop: '0.5rem',\n        marginBottom: '0.5rem'\n      },\n      options: optionFormat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 8\n      }\n    })), isEditable ? /*#__PURE__*/React.createElement(React.Suspense, {\n      fallback: /*#__PURE__*/React.createElement(LoadingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 34\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(CreateTestParagraph, {\n      handleConfirm: content => handleOnChange(idx, question.key.toUpperCase(), content, question.multipleChoices),\n      handleRemove: () => handleRemoveQuestion(idx),\n      isQuestionEdit: true,\n      hasParagraphAlphabet: false,\n      content: question.content,\n      wrapperStyle: {\n        flexGrow: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }\n    })) : question.content);\n  }));\n}\n\nexport default TrueFalseNotgiven;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/CreateReadingTest/EditableQuestions/EditableTrueFalseNotgiven.js"],"names":["React","styled","isEven","questionIndexing","CustomDropdown","LoadingIndicator","QuestionNumber","Button","CreateTestParagraph","lazy","QuestionContent","div","QuestionInstruction","QuestionSelect","span","Question","props","isquestionedit","iseditable","InstructionLine","isGrey","InstructionLabel","label","InstructionWrapper","ActionsWrapper","instructionText","value","InstructionTable","options","map","option","idx","instruction","toUpperCase","TrueFalseNotgiven","questionSection","paragraphAmount","questionRange","handleOnChange","sectionAnswer","handleRemoveQuestion","handleAddQuestion","isEditable","questions","questionIndex","optionFormat","push","question","key","toString","e","content","multipleChoices","marginTop","marginBottom","flexGrow"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { isEven, questionIndexing } from 'utils/utils';\nimport CustomDropdown from '../../Form/EngageDropdown/index';\nimport LoadingIndicator from '../../common/LoadingIndicator';\nimport QuestionNumber from 'app/views/components/Test/QuestionNumber';\nimport { Button } from '@material-ui/core';\n\nconst CreateTestParagraph = React.lazy(() =>\n\timport('app/views/pages/AdminCreateTest/components/AdminCreateReadingTest/components/Paragraph'),\n);\n\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\n\nconst QuestionInstruction = styled.div`\n\tmargin-top: 20px;\n\tmargin-bottom: 20px;\n`;\n\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\n\nconst Question = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\t${props =>\n\t\tprops.isquestionedit === 'true' &&\n\t\t`margin-bottom: 80px;\n\t`}\n\n\t${props => props.iseditable === 'false' && 'margin-bottom: 15px;'}\n`;\n\nconst InstructionLine = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 10px 10px;\n\tbackground-color: ${props => (props.isGrey ? '#f5f5f5;' : 'none;')};\n`;\n\nconst InstructionLabel = styled.label`\n\tfont-size: 14px;\n\tfont-weight: 600;\n\tmargin-bottom: 0px;\n\tpadding: 5px 0px;\n`;\n\nconst InstructionWrapper = styled.div`\n\tmargin-bottom: 14px;\n`;\n\nconst ActionsWrapper = styled.div`\n\tposition: absolute;\n\ttop: -45px;\n\tright: 20px;\n\t@media (max-width: 400px) {\n\t\tleft: 20px;\n\t\ttop: -18px;\n\t}\n`;\n\nconst instructionText = [\n\t{\n\t\tvalue: 'TRUE',\n\t\tlabel: 'If the statement agrees with the information',\n\t},\n\t{\n\t\tvalue: 'FALSE',\n\t\tlabel: 'If the statement contradicts the information',\n\t},\n\t{ value: 'NOT GIVEN', label: 'If there is no information on this' },\n];\n\nfunction InstructionTable(props) {\n\tconst { options } = props;\n\n\treturn options.map((option, idx) => {\n\t\treturn instructionText.map(instruction => {\n\t\t\tif (instruction.value.toUpperCase() === option.toUpperCase()) {\n\t\t\t\treturn (\n\t\t\t\t\t<InstructionLine key={idx} isGrey={isEven(idx)}>\n\t\t\t\t\t\t<InstructionLabel>{instruction.value}</InstructionLabel>\n\t\t\t\t\t\t<InstructionLabel>{instruction.label}</InstructionLabel>\n\t\t\t\t\t</InstructionLine>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\t});\n}\n\nfunction TrueFalseNotgiven(props) {\n\tconst {\n\t\tquestionSection,\n\t\tparagraphAmount,\n\t\tquestionRange,\n\t\thandleOnChange,\n\t\tsectionAnswer,\n\t\thandleRemoveQuestion,\n\t\thandleAddQuestion,\n\t\tisEditable,\n\t} = props;\n\n\tconst { options, questions } = questionSection;\n\tlet questionIndex = 0;\n\tif (questionRange) {\n\t\tquestionIndex = questionIndexing(questionRange);\n\t}\n\n\tlet optionFormat = [];\n\tif (!options) {\n\t\treturn <div>Something went wrong, please try again later</div>;\n\t}\n\n\toptions.map(option => optionFormat.push({ value: option, label: option }));\n\treturn (\n\t\t<QuestionContent>\n\t\t\t<ActionsWrapper>\n\t\t\t\t{handleAddQuestion && (\n\t\t\t\t\t<Button variant=\"outlined\" color=\"primary\" onClick={() => handleAddQuestion('TFN')}>\n\t\t\t\t\t\tAdd question\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</ActionsWrapper>\n\t\t\t<QuestionInstruction>\n\t\t\t\t<p>Do the following statements agree with the information given in the Reading Passage</p>\n\t\t\t\t<p>\n\t\t\t\t\tIn boxes <strong>{questionRange}</strong> on your answer sheet, choose\n\t\t\t\t</p>\n\t\t\t\t<InstructionWrapper>\n\t\t\t\t\t<InstructionTable options={options}></InstructionTable>\n\t\t\t\t</InstructionWrapper>\n\t\t\t</QuestionInstruction>\n\n\t\t\t{questions.map((question, idx) => {\n\t\t\t\tconst value = question.key ? { value: question.key, label: question.key } : '';\n\t\t\t\tquestionIndex = questionIndex + 1;\n\t\t\t\treturn (\n\t\t\t\t\t<Question key={idx} isquestionedit=\"true\" iseditable={isEditable.toString()}>\n\t\t\t\t\t\t<QuestionNumber>{questionIndex}</QuestionNumber>\n\t\t\t\t\t\t<QuestionSelect>\n\t\t\t\t\t\t\t<CustomDropdown\n\t\t\t\t\t\t\t\tdisabled={!isEditable}\n\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\thandleOnChange(\n\t\t\t\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\t\t\te.value.toUpperCase(),\n\t\t\t\t\t\t\t\t\t\tquestion.content,\n\t\t\t\t\t\t\t\t\t\tquestion.multipleChoices,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tholderStyle={{\n\t\t\t\t\t\t\t\t\tmarginTop: '0.5rem',\n\t\t\t\t\t\t\t\t\tmarginBottom: '0.5rem',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\toptions={optionFormat}\n\t\t\t\t\t\t\t></CustomDropdown>\n\t\t\t\t\t\t</QuestionSelect>\n\t\t\t\t\t\t{isEditable ? (\n\t\t\t\t\t\t\t<React.Suspense fallback={<LoadingIndicator></LoadingIndicator>}>\n\t\t\t\t\t\t\t\t<CreateTestParagraph\n\t\t\t\t\t\t\t\t\thandleConfirm={content =>\n\t\t\t\t\t\t\t\t\t\thandleOnChange(\n\t\t\t\t\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\t\t\t\tquestion.key.toUpperCase(),\n\t\t\t\t\t\t\t\t\t\t\tcontent,\n\t\t\t\t\t\t\t\t\t\t\tquestion.multipleChoices,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\thandleRemove={() => handleRemoveQuestion(idx)}\n\t\t\t\t\t\t\t\t\tisQuestionEdit={true}\n\t\t\t\t\t\t\t\t\thasParagraphAlphabet={false}\n\t\t\t\t\t\t\t\t\tcontent={question.content}\n\t\t\t\t\t\t\t\t\twrapperStyle={{ flexGrow: 1 }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</React.Suspense>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tquestion.content\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Question>\n\t\t\t\t);\n\t\t\t})}\n\t\t</QuestionContent>\n\t);\n}\n\nexport default TrueFalseNotgiven;\n"]},"metadata":{},"sourceType":"module"}