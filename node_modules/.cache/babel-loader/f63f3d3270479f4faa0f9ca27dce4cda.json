{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/Test/ReadingTest/index.js\";\nimport React, { useState, useEffect, memo } from 'react';\nimport { Button } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\nimport TestQueries from 'graphql/queries/Test';\nimport TestMutation from 'graphql/mutations/Test';\nimport { incrementAlphabet, getQuestionSectionQuestionRange, getPassageQuestionRange, getEndingNumber } from 'utils/utils';\nimport QuestionRender from '../QuestionRender';\nimport _ from 'lodash';\nimport TestToolbar from '../components/Toolbar';\nimport theme from 'app/assets/theme/index';\nimport { Grid } from '@material-ui/core';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator';\nimport { injectIntl } from 'react-intl';\nimport { withSnackbar } from 'notistack';\nimport { getMessage } from 'utils/messageConvert';\nconst Wrapper = styled(Grid)`\n\tmargin-top: 60px;\n\t@media only screen and (min-width: 1025px) {\n\t\tmargin-top: 0px;\n\t}\n\toverflow: hidden;\n`;\nconst PassageWrapper = styled.div`\n\tbackground-color: ${theme.ncpPrimaryBackground};\n\tpadding: 50px;\n\tcolor: ${theme.ncpTextColor};\n\toverflow-y: auto;\n\theight: calc(50vh - 55px);\n\t@media only screen and (min-width: 1025px) {\n\t\theight: calc(50vh - 114px);\n\t}\n\t@media only screen and (min-width: 1280px) {\n\t\theight: calc(100vh - 230px);\n\t\tbox-shadow: none;\n\t}\n`;\nconst PassageStepTitle = styled.h1`\n\tfont-weight: 700;\n`;\nconst PassageTitle = styled.h2`\n\tmargin-top: 20px;\n\tmargin-bottom: 10px;\n\tfont-size: 26px;\n\tline-height: 1.2;\n\tfont-weight: 700;\n\ttext-align: center;\n`;\nconst PassageInstruction = styled.p`\n\tmargin-top: 20px;\n\tline-height: 1.5;\n\tfont-size: 16px;\n`;\nconst PassageImage = styled.img`\n\twidth: 100%;\n\theight: auto;\n`;\nconst PassageContent = styled.div`\n\tline-height: 1.5;\n`;\nconst PassageParagraph = styled.p`\n\tmargin: 20px 0px 0px 0px;\n\tfont-size: 16px;\n\n\tstrong {\n\t\tfont-weight: 800;\n\t}\n`; // QUESTION PART\n\nconst QuestionWrapper = styled.div`\n\theight: calc(50vh - 55px);\n\tbox-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n\t\t0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n\n\t@media only screen and (min-width: 1025px) {\n\t\theight: calc(50vh - 114px);\n\t}\n\t@media only screen and (min-width: 1280px) {\n\t\theight: calc(100vh - 230px);\n\t\tbox-shadow: none;\n\t}\n\toverflow-y: auto;\n\tpadding: 40px;\n\tpadding-bottom: 80px;\n\tline-height: 1.5;\n\tfont-size: 16px;\n\tcolor: ${theme.ncpTextColor};\n`;\nconst QuestionCaption = styled.span`\n\tfont-size: 12px;\n\tfont-weight: 700;\n\ttext-transform: uppercase;\n\tletter-spacing: 2px;\n\tcolor: ${theme.ncpPrimary};\n`;\nconst QuestionCount = styled.h3`\n\tmargin-top: 15px;\n\tfont-size: 20px;\n\tfont-weight: 700;\n\tline-height: 1.2;\n`;\nconst QuestionSection = styled.div`\n\tmargin-bottom: 30px;\n`;\nconst SectionController = styled.div`\n\twidth: 100%;\n\theight: 50px;\n\tdisplay: flex;\n\tposition: fixed;\n\tbottom: 50px;\n\tbackground-color: ${theme.ncpGray};\n\tcolor: ${theme.ncpPrimary} !important;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 11px 50px 11px 20px;\n\t@media only screen and (min-width: 1280px) {\n\t\twidth: 50%;\n\t\tright: 0;\n\t}\n`;\nconst SectionTitle = styled.span`\n\tfont-size: 14px;\n\tfont-weight: 700;\n\ttext-transform: uppercase;\n\tletter-spacing: 2px;\n\tcolor: ${theme.ncpPrimary};\n\tline-height: 33px;\n\tpadding-left: 10px;\n`;\nconst SectionControlButton = styled(Button)`\n\tpadding: 0 15px;\n\tmargin: 0 0 0 10px;\n\ttext-transform: uppercase;\n\tfont-size: 16px !important;\n\tcolor: ${theme.ncpPrimary};\n`;\nconst StyledCol = styled(Grid)`\n\t// padding: 0px;\n`;\n\nfunction RenderLoading(props) {\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(StyledCol, {\n    item: true,\n    xs: 12,\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PassageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoadingIndicator, {\n    hasSpacing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 6\n    }\n  }))), /*#__PURE__*/React.createElement(StyledCol, {\n    item: true,\n    xs: 12,\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(QuestionWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoadingIndicator, {\n    hasSpacing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 6\n    }\n  }))), /*#__PURE__*/React.createElement(TestToolbar, {\n    countdownTime: 0,\n    isLoading: false,\n    error: undefined,\n    resData: undefined,\n    handleSubmitAnswer: undefined,\n    title: undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 4\n    }\n  }));\n}\n\nfunction ReadingTest(props) {\n  const {\n    activeTest,\n    addTest,\n    updateReadingAnswers,\n    readingAnswers,\n    removeAnswersSheet,\n    intl\n  } = props;\n  const testId = props.match.params.testId;\n  const history = useHistory(); // Hooks\n\n  const [passageNumber, setPassageNumber] = useState(0);\n  const [getTest, {\n    loading,\n    data,\n    error\n  }] = useLazyQuery(TestQueries.GET_TEST, {\n    variables: {\n      id: testId\n    },\n    fetchPolicy: 'network-only',\n    onCompleted: () => addTest(data.test),\n    onError: err => {\n      let message = getMessage(err.message);\n      props.enqueueSnackbar(intl.formatMessage({\n        id: message\n      }), {\n        variant: 'error',\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        }\n      });\n      history.push('/collection');\n    }\n  });\n  const [submitAnswer, submitRes] = useMutation(TestMutation.SUBMIT_READING_ANSWERS, {\n    onCompleted: res => handleSubmitAnswerSuccess(res),\n    onError: err => handleSubmitAnswerFailure(err)\n  }); // Fetch data\n\n  useEffect(() => {\n    getTest();\n  }, [testId]); // handle update local component state and calling action to update global test answer state\n\n  const handleUpdateAnswerState = readingAnswersInput => {\n    // setAnswer({ answerSections: readingAnswers });\n    updateReadingAnswers({\n      testId: testId,\n      readingAnswers: readingAnswersInput\n    });\n  }; // handleSetAnswer\n  // put answer input into a managable answer state to be sent to redux state\n\n\n  const handleSetAnswer = (sectionIdx, answerId, answerInput) => {\n    const newAnswer = {\n      id: answerId,\n      value: answerInput.toString()\n    };\n\n    let newReadingAnswers = _.cloneDeep(readingAnswers);\n\n    const findPassageIndex = newReadingAnswers.passages.findIndex(passage => passage.id === passageNumber);\n\n    if (findPassageIndex === -1) {\n      const newPassage = {\n        id: passageNumber,\n        sections: [{\n          id: sectionIdx,\n          answers: [newAnswer]\n        }]\n      };\n      newReadingAnswers.passages = [...newReadingAnswers.passages, newPassage];\n      return handleUpdateAnswerState(newReadingAnswers);\n    }\n\n    const findSectionIndex = newReadingAnswers.passages[findPassageIndex].sections.findIndex(section => section.id === sectionIdx);\n\n    if (findSectionIndex === -1) {\n      const newSection = {\n        id: sectionIdx,\n        answers: [newAnswer]\n      };\n      newReadingAnswers.passages[findPassageIndex].sections = [...newReadingAnswers.passages[findPassageIndex].sections, newSection];\n      return handleUpdateAnswerState(newReadingAnswers);\n    }\n\n    const findAnswerIndex = newReadingAnswers.passages[findPassageIndex].sections[findSectionIndex].answers.findIndex(answer => answer.id === answerId);\n\n    if (findAnswerIndex === -1) {\n      newReadingAnswers.passages[findPassageIndex].sections[findSectionIndex].answers.push(newAnswer);\n      return handleUpdateAnswerState(newReadingAnswers);\n    }\n\n    newReadingAnswers.passages[findPassageIndex].sections[findSectionIndex].answers[findAnswerIndex] = newAnswer;\n    return handleUpdateAnswerState(newReadingAnswers);\n  }; // Submit Answer\n\n\n  const handleSubmitAnswer = timeSpent => {\n    submitAnswer({\n      variables: {\n        testId: testId,\n        answers: readingAnswers,\n        timeSpent: timeSpent\n      }\n    });\n  };\n\n  const handleSubmitAnswerSuccess = res => {\n    console.log(res);\n    const resultId = res.submitReadingAnswer.resultId;\n    history.push(`/result/reading/${resultId}`);\n  };\n\n  const handleSubmitAnswerFailure = err => {\n    if (!err) {\n      return;\n    }\n\n    let message = getMessage(err.message);\n    props.enqueueSnackbar(intl.formatMessage({\n      id: message\n    }), {\n      variant: 'error',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    });\n  }; // Render conditions\n\n\n  if (testId !== activeTest.id) {\n    if (loading) {\n      return /*#__PURE__*/React.createElement(RenderLoading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }\n      });\n    }\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/collection\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }\n      });\n    }\n  }\n\n  if (!activeTest || !activeTest.testDetails) {\n    return null;\n  }\n\n  const readingTest = activeTest.testDetails.readingTest;\n\n  if (!readingTest) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/collection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 10\n      }\n    });\n  }\n\n  const readingTestDetails = readingTest.testDetails;\n  const currentPassage = readingTestDetails.passages[passageNumber];\n  const questionSections = currentPassage.questionSections;\n  const paragraphAmount = currentPassage.paragraphs.length; // Seperate questions inside passages into range strings to display on top of question sections for each passage: \"questions 1-13\"\n\n  const passageQuestionRange = getPassageQuestionRange(readingTestDetails.passages); // Seperate questions inside sections into range strings to display on top of question Sections: \"Questions 1-4\"\n  // Ex: section[0]: 1-4, section[1]: 5-8, section[2]: 9-13\n\n  let previousSectionQuestionCount;\n\n  if (passageNumber > 0) {\n    previousSectionQuestionCount = getEndingNumber(passageQuestionRange[passageNumber - 1]) + 1;\n  }\n\n  const questionRange = getQuestionSectionQuestionRange(questionSections, previousSectionQuestionCount);\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(StyledCol, {\n    item: true,\n    xs: 12,\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PassageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PassageStepTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 6\n    }\n  }, \"Reading Passage \", passageNumber + 1), /*#__PURE__*/React.createElement(PassageInstruction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 6\n    }\n  }, \"You should spend about 20 minutes on\", ' ', /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }\n  }, \"Questions \", passageQuestionRange[passageNumber]), \", which are based on Reading Passage \", passageNumber + 1, \" below.\"), /*#__PURE__*/React.createElement(PassageImage, {\n    src: currentPassage.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(PassageTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 6\n    }\n  }, currentPassage.title), /*#__PURE__*/React.createElement(PassageContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 6\n    }\n  }, currentPassage.paragraphs.map((paragraph, idx) => {\n    return /*#__PURE__*/React.createElement(PassageParagraph, {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 10\n      }\n    }, incrementAlphabet(idx), \". \"), paragraph.content);\n  })))), /*#__PURE__*/React.createElement(StyledCol, {\n    item: true,\n    xs: 12,\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(QuestionWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(QuestionCaption, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 6\n    }\n  }, \"Section \", passageNumber + 1, \": \", passageQuestionRange[passageNumber]), currentPassage.questionSections.map((questionSection, idx) => {\n    const passageAnswer = readingAnswers.passages.find(passage => passage.id === passageNumber);\n    let sectionAnswer = undefined;\n\n    if (passageAnswer) {\n      sectionAnswer = passageAnswer.sections.find(section => section.id === idx);\n    }\n\n    return /*#__PURE__*/React.createElement(QuestionSection, {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(QuestionCount, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }\n    }, \"Questions \", questionRange[idx]), /*#__PURE__*/React.createElement(QuestionRender, {\n      sectionAnswer: sectionAnswer,\n      questionRange: questionRange[idx],\n      questionSection: questionSection,\n      handleSetAnswer: handleSetAnswer,\n      sectionId: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(SectionController, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 6\n    }\n  }, \"Section \", passageNumber + 1), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 6\n    }\n  }, passageNumber + 1 > 1 ? /*#__PURE__*/React.createElement(SectionControlButton, {\n    color: \"primary\",\n    onClick: () => setPassageNumber(passageNumber - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 8\n    }\n  }, \"Previous\") : null, passageNumber + 1 < readingTestDetails.passages.length ? /*#__PURE__*/React.createElement(SectionControlButton, {\n    color: \"primary\",\n    onClick: () => setPassageNumber(passageNumber + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 8\n    }\n  }, \"Next\") : null))), /*#__PURE__*/React.createElement(TestToolbar, {\n    countdownTime: 3600000,\n    isLoading: submitRes.loading,\n    error: submitRes.error,\n    resData: submitRes.data,\n    handleSubmitAnswer: handleSubmitAnswer,\n    title: activeTest.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 4\n    }\n  }));\n}\n\nexport default injectIntl(withSnackbar(memo(ReadingTest)));","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/Test/ReadingTest/index.js"],"names":["React","useState","useEffect","memo","Button","styled","Redirect","useHistory","useLazyQuery","useMutation","useQuery","TestQueries","TestMutation","incrementAlphabet","getQuestionSectionQuestionRange","getPassageQuestionRange","getEndingNumber","QuestionRender","_","TestToolbar","theme","Grid","LoadingIndicator","injectIntl","withSnackbar","getMessage","Wrapper","PassageWrapper","div","ncpPrimaryBackground","ncpTextColor","PassageStepTitle","h1","PassageTitle","h2","PassageInstruction","p","PassageImage","img","PassageContent","PassageParagraph","QuestionWrapper","QuestionCaption","span","ncpPrimary","QuestionCount","h3","QuestionSection","SectionController","ncpGray","SectionTitle","SectionControlButton","StyledCol","RenderLoading","props","undefined","ReadingTest","activeTest","addTest","updateReadingAnswers","readingAnswers","removeAnswersSheet","intl","testId","match","params","history","passageNumber","setPassageNumber","getTest","loading","data","error","GET_TEST","variables","id","fetchPolicy","onCompleted","test","onError","err","message","enqueueSnackbar","formatMessage","variant","anchorOrigin","vertical","horizontal","push","submitAnswer","submitRes","SUBMIT_READING_ANSWERS","res","handleSubmitAnswerSuccess","handleSubmitAnswerFailure","handleUpdateAnswerState","readingAnswersInput","handleSetAnswer","sectionIdx","answerId","answerInput","newAnswer","value","toString","newReadingAnswers","cloneDeep","findPassageIndex","passages","findIndex","passage","newPassage","sections","answers","findSectionIndex","section","newSection","findAnswerIndex","answer","handleSubmitAnswer","timeSpent","console","log","resultId","submitReadingAnswer","testDetails","readingTest","readingTestDetails","currentPassage","questionSections","paragraphAmount","paragraphs","length","passageQuestionRange","previousSectionQuestionCount","questionRange","image","title","map","paragraph","idx","content","questionSection","passageAnswer","find","sectionAnswer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, memo } from 'react';\nimport { Button } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\nimport TestQueries from 'graphql/queries/Test';\nimport TestMutation from 'graphql/mutations/Test';\nimport {\n\tincrementAlphabet,\n\tgetQuestionSectionQuestionRange,\n\tgetPassageQuestionRange,\n\tgetEndingNumber,\n} from 'utils/utils';\nimport QuestionRender from '../QuestionRender';\nimport _ from 'lodash';\nimport TestToolbar from '../components/Toolbar';\nimport theme from 'app/assets/theme/index';\n\nimport { Grid } from '@material-ui/core';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator';\nimport { injectIntl } from 'react-intl';\nimport { withSnackbar } from 'notistack';\nimport { getMessage } from 'utils/messageConvert';\n\nconst Wrapper = styled(Grid)`\n\tmargin-top: 60px;\n\t@media only screen and (min-width: 1025px) {\n\t\tmargin-top: 0px;\n\t}\n\toverflow: hidden;\n`;\n\nconst PassageWrapper = styled.div`\n\tbackground-color: ${theme.ncpPrimaryBackground};\n\tpadding: 50px;\n\tcolor: ${theme.ncpTextColor};\n\toverflow-y: auto;\n\theight: calc(50vh - 55px);\n\t@media only screen and (min-width: 1025px) {\n\t\theight: calc(50vh - 114px);\n\t}\n\t@media only screen and (min-width: 1280px) {\n\t\theight: calc(100vh - 230px);\n\t\tbox-shadow: none;\n\t}\n`;\n\nconst PassageStepTitle = styled.h1`\n\tfont-weight: 700;\n`;\n\nconst PassageTitle = styled.h2`\n\tmargin-top: 20px;\n\tmargin-bottom: 10px;\n\tfont-size: 26px;\n\tline-height: 1.2;\n\tfont-weight: 700;\n\ttext-align: center;\n`;\n\nconst PassageInstruction = styled.p`\n\tmargin-top: 20px;\n\tline-height: 1.5;\n\tfont-size: 16px;\n`;\n\nconst PassageImage = styled.img`\n\twidth: 100%;\n\theight: auto;\n`;\n\nconst PassageContent = styled.div`\n\tline-height: 1.5;\n`;\n\nconst PassageParagraph = styled.p`\n\tmargin: 20px 0px 0px 0px;\n\tfont-size: 16px;\n\n\tstrong {\n\t\tfont-weight: 800;\n\t}\n`;\n\n// QUESTION PART\n\nconst QuestionWrapper = styled.div`\n\theight: calc(50vh - 55px);\n\tbox-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n\t\t0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n\n\t@media only screen and (min-width: 1025px) {\n\t\theight: calc(50vh - 114px);\n\t}\n\t@media only screen and (min-width: 1280px) {\n\t\theight: calc(100vh - 230px);\n\t\tbox-shadow: none;\n\t}\n\toverflow-y: auto;\n\tpadding: 40px;\n\tpadding-bottom: 80px;\n\tline-height: 1.5;\n\tfont-size: 16px;\n\tcolor: ${theme.ncpTextColor};\n`;\n\nconst QuestionCaption = styled.span`\n\tfont-size: 12px;\n\tfont-weight: 700;\n\ttext-transform: uppercase;\n\tletter-spacing: 2px;\n\tcolor: ${theme.ncpPrimary};\n`;\n\nconst QuestionCount = styled.h3`\n\tmargin-top: 15px;\n\tfont-size: 20px;\n\tfont-weight: 700;\n\tline-height: 1.2;\n`;\n\nconst QuestionSection = styled.div`\n\tmargin-bottom: 30px;\n`;\n\nconst SectionController = styled.div`\n\twidth: 100%;\n\theight: 50px;\n\tdisplay: flex;\n\tposition: fixed;\n\tbottom: 50px;\n\tbackground-color: ${theme.ncpGray};\n\tcolor: ${theme.ncpPrimary} !important;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 11px 50px 11px 20px;\n\t@media only screen and (min-width: 1280px) {\n\t\twidth: 50%;\n\t\tright: 0;\n\t}\n`;\n\nconst SectionTitle = styled.span`\n\tfont-size: 14px;\n\tfont-weight: 700;\n\ttext-transform: uppercase;\n\tletter-spacing: 2px;\n\tcolor: ${theme.ncpPrimary};\n\tline-height: 33px;\n\tpadding-left: 10px;\n`;\n\nconst SectionControlButton = styled(Button)`\n\tpadding: 0 15px;\n\tmargin: 0 0 0 10px;\n\ttext-transform: uppercase;\n\tfont-size: 16px !important;\n\tcolor: ${theme.ncpPrimary};\n`;\n\nconst StyledCol = styled(Grid)`\n\t// padding: 0px;\n`;\n\nfunction RenderLoading(props) {\n\treturn (\n\t\t<Grid container>\n\t\t\t<StyledCol item xs={12} lg={6}>\n\t\t\t\t<PassageWrapper>\n\t\t\t\t\t<LoadingIndicator hasSpacing></LoadingIndicator>\n\t\t\t\t</PassageWrapper>\n\t\t\t</StyledCol>\n\t\t\t<StyledCol item xs={12} lg={6}>\n\t\t\t\t<QuestionWrapper>\n\t\t\t\t\t<LoadingIndicator hasSpacing></LoadingIndicator>\n\t\t\t\t</QuestionWrapper>\n\t\t\t</StyledCol>\n\t\t\t<TestToolbar\n\t\t\t\tcountdownTime={0}\n\t\t\t\tisLoading={false}\n\t\t\t\terror={undefined}\n\t\t\t\tresData={undefined}\n\t\t\t\thandleSubmitAnswer={undefined}\n\t\t\t\ttitle={undefined}\n\t\t\t></TestToolbar>\n\t\t</Grid>\n\t);\n}\n\nfunction ReadingTest(props) {\n\tconst { activeTest, addTest, updateReadingAnswers, readingAnswers, removeAnswersSheet, intl } = props;\n\tconst testId = props.match.params.testId;\n\tconst history = useHistory();\n\n\t// Hooks\n\tconst [passageNumber, setPassageNumber] = useState(0);\n\tconst [getTest, { loading, data, error }] = useLazyQuery(TestQueries.GET_TEST, {\n\t\tvariables: { id: testId },\n\t\tfetchPolicy: 'network-only',\n\t\tonCompleted: () => addTest(data.test),\n\t\tonError: err => {\n\t\t\tlet message = getMessage(err.message);\n\n\t\t\tprops.enqueueSnackbar(\n\t\t\t\tintl.formatMessage({\n\t\t\t\t\tid: message,\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\tvariant: 'error',\n\t\t\t\t\tanchorOrigin: {\n\t\t\t\t\t\tvertical: 'top',\n\t\t\t\t\t\thorizontal: 'right',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\thistory.push('/collection');\n\t\t},\n\t});\n\tconst [submitAnswer, submitRes] = useMutation(TestMutation.SUBMIT_READING_ANSWERS, {\n\t\tonCompleted: res => handleSubmitAnswerSuccess(res),\n\t\tonError: err => handleSubmitAnswerFailure(err),\n\t});\n\n\t// Fetch data\n\tuseEffect(() => {\n\t\tgetTest();\n\t}, [testId]);\n\n\t// handle update local component state and calling action to update global test answer state\n\tconst handleUpdateAnswerState = readingAnswersInput => {\n\t\t// setAnswer({ answerSections: readingAnswers });\n\t\tupdateReadingAnswers({\n\t\t\ttestId: testId,\n\t\t\treadingAnswers: readingAnswersInput,\n\t\t});\n\t};\n\t// handleSetAnswer\n\t// put answer input into a managable answer state to be sent to redux state\n\tconst handleSetAnswer = (sectionIdx, answerId, answerInput) => {\n\t\tconst newAnswer = {\n\t\t\tid: answerId,\n\t\t\tvalue: answerInput.toString(),\n\t\t};\n\t\tlet newReadingAnswers = _.cloneDeep(readingAnswers);\n\t\tconst findPassageIndex = newReadingAnswers.passages.findIndex(passage => passage.id === passageNumber);\n\n\t\tif (findPassageIndex === -1) {\n\t\t\tconst newPassage = {\n\t\t\t\tid: passageNumber,\n\t\t\t\tsections: [{ id: sectionIdx, answers: [newAnswer] }],\n\t\t\t};\n\t\t\tnewReadingAnswers.passages = [...newReadingAnswers.passages, newPassage];\n\t\t\treturn handleUpdateAnswerState(newReadingAnswers);\n\t\t}\n\n\t\tconst findSectionIndex = newReadingAnswers.passages[findPassageIndex].sections.findIndex(\n\t\t\tsection => section.id === sectionIdx,\n\t\t);\n\t\tif (findSectionIndex === -1) {\n\t\t\tconst newSection = {\n\t\t\t\tid: sectionIdx,\n\t\t\t\tanswers: [newAnswer],\n\t\t\t};\n\t\t\tnewReadingAnswers.passages[findPassageIndex].sections = [\n\t\t\t\t...newReadingAnswers.passages[findPassageIndex].sections,\n\t\t\t\tnewSection,\n\t\t\t];\n\t\t\treturn handleUpdateAnswerState(newReadingAnswers);\n\t\t}\n\n\t\tconst findAnswerIndex = newReadingAnswers.passages[findPassageIndex].sections[\n\t\t\tfindSectionIndex\n\t\t].answers.findIndex(answer => answer.id === answerId);\n\n\t\tif (findAnswerIndex === -1) {\n\t\t\tnewReadingAnswers.passages[findPassageIndex].sections[findSectionIndex].answers.push(newAnswer);\n\t\t\treturn handleUpdateAnswerState(newReadingAnswers);\n\t\t}\n\n\t\tnewReadingAnswers.passages[findPassageIndex].sections[findSectionIndex].answers[findAnswerIndex] = newAnswer;\n\t\treturn handleUpdateAnswerState(newReadingAnswers);\n\t};\n\t// Submit Answer\n\n\tconst handleSubmitAnswer = timeSpent => {\n\t\tsubmitAnswer({\n\t\t\tvariables: {\n\t\t\t\ttestId: testId,\n\t\t\t\tanswers: readingAnswers,\n\t\t\t\ttimeSpent: timeSpent,\n\t\t\t},\n\t\t});\n\t};\n\n\tconst handleSubmitAnswerSuccess = res => {\n\t\tconsole.log(res);\n\t\tconst resultId = res.submitReadingAnswer.resultId;\n\t\thistory.push(`/result/reading/${resultId}`);\n\t};\n\n\tconst handleSubmitAnswerFailure = err => {\n\t\tif (!err) {\n\t\t\treturn;\n\t\t}\n\t\tlet message = getMessage(err.message);\n\n\t\tprops.enqueueSnackbar(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: message,\n\t\t\t}),\n\t\t\t{\n\t\t\t\tvariant: 'error',\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t};\n\n\t// Render conditions\n\n\tif (testId !== activeTest.id) {\n\t\tif (loading) {\n\t\t\treturn <RenderLoading></RenderLoading>;\n\t\t}\n\t\tif (error) {\n\t\t\treturn <Redirect to=\"/collection\" />;\n\t\t}\n\t}\n\n\tif (!activeTest || !activeTest.testDetails) {\n\t\treturn null;\n\t}\n\tconst readingTest = activeTest.testDetails.readingTest;\n\n\tif (!readingTest) {\n\t\treturn <Redirect to=\"/collection\" />;\n\t}\n\n\tconst readingTestDetails = readingTest.testDetails;\n\tconst currentPassage = readingTestDetails.passages[passageNumber];\n\tconst questionSections = currentPassage.questionSections;\n\tconst paragraphAmount = currentPassage.paragraphs.length;\n\t// Seperate questions inside passages into range strings to display on top of question sections for each passage: \"questions 1-13\"\n\tconst passageQuestionRange = getPassageQuestionRange(readingTestDetails.passages);\n\n\t// Seperate questions inside sections into range strings to display on top of question Sections: \"Questions 1-4\"\n\t// Ex: section[0]: 1-4, section[1]: 5-8, section[2]: 9-13\n\tlet previousSectionQuestionCount;\n\tif (passageNumber > 0) {\n\t\tpreviousSectionQuestionCount = getEndingNumber(passageQuestionRange[passageNumber - 1]) + 1;\n\t}\n\tconst questionRange = getQuestionSectionQuestionRange(questionSections, previousSectionQuestionCount);\n\n\treturn (\n\t\t<Wrapper container spacing={0}>\n\t\t\t<StyledCol item xs={12} lg={6}>\n\t\t\t\t<PassageWrapper>\n\t\t\t\t\t<PassageStepTitle>Reading Passage {passageNumber + 1}</PassageStepTitle>\n\t\t\t\t\t<PassageInstruction>\n\t\t\t\t\t\tYou should spend about 20 minutes on{' '}\n\t\t\t\t\t\t<strong>Questions {passageQuestionRange[passageNumber]}</strong>, which are based on Reading\n\t\t\t\t\t\tPassage {passageNumber + 1} below.\n\t\t\t\t\t</PassageInstruction>\n\t\t\t\t\t<PassageImage src={currentPassage.image}></PassageImage>\n\t\t\t\t\t<PassageTitle>{currentPassage.title}</PassageTitle>\n\t\t\t\t\t<PassageContent>\n\t\t\t\t\t\t{currentPassage.paragraphs.map((paragraph, idx) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<PassageParagraph key={idx}>\n\t\t\t\t\t\t\t\t\t<strong>{incrementAlphabet(idx)}. </strong>\n\t\t\t\t\t\t\t\t\t{paragraph.content}\n\t\t\t\t\t\t\t\t</PassageParagraph>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</PassageContent>\n\t\t\t\t</PassageWrapper>\n\t\t\t</StyledCol>\n\t\t\t<StyledCol item xs={12} lg={6}>\n\t\t\t\t<QuestionWrapper>\n\t\t\t\t\t<QuestionCaption>\n\t\t\t\t\t\tSection {passageNumber + 1}: {passageQuestionRange[passageNumber]}\n\t\t\t\t\t</QuestionCaption>\n\t\t\t\t\t{currentPassage.questionSections.map((questionSection, idx) => {\n\t\t\t\t\t\tconst passageAnswer = readingAnswers.passages.find(passage => passage.id === passageNumber);\n\t\t\t\t\t\tlet sectionAnswer = undefined;\n\t\t\t\t\t\tif (passageAnswer) {\n\t\t\t\t\t\t\tsectionAnswer = passageAnswer.sections.find(section => section.id === idx);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<QuestionSection key={idx}>\n\t\t\t\t\t\t\t\t<QuestionCount>Questions {questionRange[idx]}</QuestionCount>\n\n\t\t\t\t\t\t\t\t<QuestionRender\n\t\t\t\t\t\t\t\t\tsectionAnswer={sectionAnswer}\n\t\t\t\t\t\t\t\t\tquestionRange={questionRange[idx]}\n\t\t\t\t\t\t\t\t\tquestionSection={questionSection}\n\t\t\t\t\t\t\t\t\thandleSetAnswer={handleSetAnswer}\n\t\t\t\t\t\t\t\t\tsectionId={idx}\n\t\t\t\t\t\t\t\t></QuestionRender>\n\t\t\t\t\t\t\t</QuestionSection>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</QuestionWrapper>\n\t\t\t\t<SectionController>\n\t\t\t\t\t<SectionTitle>Section {passageNumber + 1}</SectionTitle>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{passageNumber + 1 > 1 ? (\n\t\t\t\t\t\t\t<SectionControlButton color=\"primary\" onClick={() => setPassageNumber(passageNumber - 1)}>\n\t\t\t\t\t\t\t\tPrevious\n\t\t\t\t\t\t\t</SectionControlButton>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t{passageNumber + 1 < readingTestDetails.passages.length ? (\n\t\t\t\t\t\t\t<SectionControlButton color=\"primary\" onClick={() => setPassageNumber(passageNumber + 1)}>\n\t\t\t\t\t\t\t\tNext\n\t\t\t\t\t\t\t</SectionControlButton>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</div>\n\t\t\t\t</SectionController>\n\t\t\t</StyledCol>\n\t\t\t<TestToolbar\n\t\t\t\tcountdownTime={3600000}\n\t\t\t\tisLoading={submitRes.loading}\n\t\t\t\terror={submitRes.error}\n\t\t\t\tresData={submitRes.data}\n\t\t\t\thandleSubmitAnswer={handleSubmitAnswer}\n\t\t\t\ttitle={activeTest.title}\n\t\t\t></TestToolbar>\n\t\t</Wrapper>\n\t);\n}\n\nexport default injectIntl(withSnackbar(memo(ReadingTest)));\n"]},"metadata":{},"sourceType":"module"}