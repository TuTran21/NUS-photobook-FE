{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/content/Notice.js\";\nimport React, { forwardRef } from \"react\";\nimport clsx from \"clsx\";\nconst Notice = forwardRef(({\n  icon,\n  iconRef,\n  textRef,\n  iconWrapperRef,\n  className,\n  children,\n  ...props\n}, ref) => {\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n    ref: ref,\n    role: \"alert\",\n    className: clsx(\"alert alert-light alert-elevate\", className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }), icon && /*#__PURE__*/React.createElement(\"div\", {\n    ref: iconWrapperRef,\n    className: \"alert-icon alert-icon-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    ref: iconRef,\n    className: icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-text\",\n    ref: textRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, children));\n});\nexport default Notice; // Set display name for debugging.\n\nif (process.env.NODE_ENV !== \"production\") {\n  Notice.displayName = \"Notice\";\n}","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/content/Notice.js"],"names":["React","forwardRef","clsx","Notice","icon","iconRef","textRef","iconWrapperRef","className","children","props","ref","process","env","NODE_ENV","displayName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,MAAM,GAAGF,UAAU,CACvB,CACE;AAAEG,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA,OAAjB;AAA0BC,EAAAA,cAA1B;AAA0CC,EAAAA,SAA1C;AAAqDC,EAAAA,QAArD;AAA+D,KAAGC;AAAlE,CADF,EAEEC,GAFF,KAGK;AACH,sBACE,6CACMD,KADN;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,SAAS,EAAET,IAAI,CAAC,iCAAD,EAAoCM,SAApC,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMGJ,IAAI,iBACH;AAAK,IAAA,GAAG,EAAEG,cAAV;AAA0B,IAAA,SAAS,EAAC,2BAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,GAAG,EAAEF,OAAR;AAAiB,IAAA,SAAS,EAAED,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPJ,eAYE;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,GAAG,EAAEE,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,QADH,CAZF,CADF;AAkBD,CAvBsB,CAAzB;AA0BA,eAAeN,MAAf,C,CAEA;;AACA,IAAIS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCX,EAAAA,MAAM,CAACY,WAAP,GAAqB,QAArB;AACD","sourcesContent":["import React, { forwardRef } from \"react\";\nimport clsx from \"clsx\";\n\nconst Notice = forwardRef(\n  (\n    { icon, iconRef, textRef, iconWrapperRef, className, children, ...props },\n    ref\n  ) => {\n    return (\n      <div\n        {...props}\n        ref={ref}\n        role=\"alert\"\n        className={clsx(\"alert alert-light alert-elevate\", className)}\n      >\n        {icon && (\n          <div ref={iconWrapperRef} className=\"alert-icon alert-icon-top\">\n            <i ref={iconRef} className={icon} />\n          </div>\n        )}\n\n        <div className=\"alert-text\" ref={textRef}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Notice;\n\n// Set display name for debugging.\nif (process.env.NODE_ENV !== \"production\") {\n  Notice.displayName = \"Notice\";\n}\n"]},"metadata":{},"sourceType":"module"}