{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/middleware/RequireAdminAuth.js\";\nimport React, { Component, PropTypes, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { getToken } from 'utils/utils';\nimport authActions from 'state/ducks/auth/actions';\nimport { useLazyQuery } from '@apollo/client';\nimport DashboardQueries from 'graphql/queries/Dashboard';\nimport { Backdrop, Card, CardContent, Dialog, Button } from '@material-ui/core';\nimport styled from 'styled-components'; // import Authorize from 'containers/Auth/Loadable';\n\nimport Theme from 'app/assets/theme';\nimport { useHistory } from 'react-router-dom'; // import AuthPage from 'app/views/pages/AuthPage/Injectable';\n\nconst AuthPage = React.lazy(() => import('app/views/pages/AuthPage/Injectable'));\nconst StyledBackdrop = styled(Backdrop)`\n\tz-index: 1000 !important;\n\tbackground-color: ${Theme.ncpGrayLowOpacity};\n`;\nconst StyledCard = styled(Card)`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tflex-direction: column;\n\tpadding: 100px;\n\tbackground-color: ${Theme.ncpDefaultBackgroundLowOpacity};\n`;\nconst StyledCardContent = styled(CardContent)`\n\tfont-size: 18px;\n\tline-spacing: 5px;\n\tfont-weight: 600;\n`;\nexport default function (ComposedComponent) {\n  function RequireAdminAuth(props) {\n    const {\n      auth,\n      loginFailed,\n      loginSuccess\n    } = props;\n    const history = useHistory();\n\n    const handleGoForbidden = () => {\n      history.push('/403');\n    };\n\n    const [verifyToken, authRes] = useLazyQuery(DashboardQueries.VERIFY_ADMIN_ACCESS_TOKEN, {\n      onCompleted: () => {\n        if (authRes.data) {\n          return loginSuccess(authRes.data.verifyAdminAccessToken);\n        }\n      },\n      onError: () => {\n        loginFailed();\n        return handleGoForbidden();\n      }\n    }); // Verify token and login if valid\n\n    useEffect(() => {\n      verifyToken();\n    }, []);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ComposedComponent, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    })));\n  } // Authentication.propTypes = { authenticated: PropTypes.bool };\n\n\n  function mapStateToProps(state) {\n    return {\n      auth: state.auth\n    };\n  }\n\n  function mapDispatchToProps(dispatch) {\n    const loginSuccess = payload => dispatch(authActions.loginSuccess(payload));\n\n    const loginFailed = () => dispatch(authActions.loginFailed());\n\n    return {\n      dispatch,\n      loginSuccess,\n      loginFailed\n    };\n  }\n\n  return connect(mapStateToProps, mapDispatchToProps)(RequireAdminAuth);\n}","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/middleware/RequireAdminAuth.js"],"names":["React","Component","PropTypes","useEffect","connect","Redirect","getToken","authActions","useLazyQuery","DashboardQueries","Backdrop","Card","CardContent","Dialog","Button","styled","Theme","useHistory","AuthPage","lazy","StyledBackdrop","ncpGrayLowOpacity","StyledCard","ncpDefaultBackgroundLowOpacity","StyledCardContent","ComposedComponent","RequireAdminAuth","props","auth","loginFailed","loginSuccess","history","handleGoForbidden","push","verifyToken","authRes","VERIFY_ADMIN_ACCESS_TOKEN","onCompleted","data","verifyAdminAccessToken","onError","mapStateToProps","state","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["import React, { Component, PropTypes, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { getToken } from 'utils/utils';\nimport authActions from 'state/ducks/auth/actions';\nimport { useLazyQuery } from '@apollo/client';\nimport DashboardQueries from 'graphql/queries/Dashboard';\nimport { Backdrop, Card, CardContent, Dialog, Button } from '@material-ui/core';\nimport styled from 'styled-components';\n// import Authorize from 'containers/Auth/Loadable';\nimport Theme from 'app/assets/theme';\nimport { useHistory } from 'react-router-dom';\n\n// import AuthPage from 'app/views/pages/AuthPage/Injectable';\n\nconst AuthPage = React.lazy(() => import('app/views/pages/AuthPage/Injectable'));\n\nconst StyledBackdrop = styled(Backdrop)`\n\tz-index: 1000 !important;\n\tbackground-color: ${Theme.ncpGrayLowOpacity};\n`;\n\nconst StyledCard = styled(Card)`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tflex-direction: column;\n\tpadding: 100px;\n\tbackground-color: ${Theme.ncpDefaultBackgroundLowOpacity};\n`;\n\nconst StyledCardContent = styled(CardContent)`\n\tfont-size: 18px;\n\tline-spacing: 5px;\n\tfont-weight: 600;\n`;\n\nexport default function(ComposedComponent) {\n\tfunction RequireAdminAuth(props) {\n\t\tconst { auth, loginFailed, loginSuccess } = props;\n\n\t\tconst history = useHistory();\n\t\tconst handleGoForbidden = () => {\n\t\t\thistory.push('/403');\n\t\t};\n\n\t\tconst [verifyToken, authRes] = useLazyQuery(DashboardQueries.VERIFY_ADMIN_ACCESS_TOKEN, {\n\t\t\tonCompleted: () => {\n\t\t\t\tif (authRes.data) {\n\t\t\t\t\treturn loginSuccess(authRes.data.verifyAdminAccessToken);\n\t\t\t\t}\n\t\t\t},\n\t\t\tonError: () => {\n\t\t\t\tloginFailed();\n\t\t\t\treturn handleGoForbidden();\n\t\t\t},\n\t\t});\n\t\t// Verify token and login if valid\n\t\tuseEffect(() => {\n\t\t\tverifyToken();\n\t\t}, []);\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<ComposedComponent {...props} />\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\t// Authentication.propTypes = { authenticated: PropTypes.bool };\n\n\tfunction mapStateToProps(state) {\n\t\treturn {\n\t\t\tauth: state.auth,\n\t\t};\n\t}\n\n\tfunction mapDispatchToProps(dispatch) {\n\t\tconst loginSuccess = payload => dispatch(authActions.loginSuccess(payload));\n\t\tconst loginFailed = () => dispatch(authActions.loginFailed());\n\n\t\treturn {\n\t\t\tdispatch,\n\t\t\tloginSuccess,\n\t\t\tloginFailed,\n\t\t};\n\t}\n\n\treturn connect(mapStateToProps, mapDispatchToProps)(RequireAdminAuth);\n}\n"]},"metadata":{},"sourceType":"module"}