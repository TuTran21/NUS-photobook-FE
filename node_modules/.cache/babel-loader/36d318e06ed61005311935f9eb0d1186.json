{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/utils/injectReducer.js\";\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\nimport getInjectors from './reducerInjectors';\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\n\nexport default (({\n  key,\n  reducer\n}) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 14\n        }\n      }));\n    }\n\n  }\n\n  ReducerInjector.WrappedComponent = WrappedComponent;\n  ReducerInjector.contextType = ReactReduxContext;\n  ReducerInjector.displayName = `withReducer(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n});\n\nconst useInjectReducer = ({\n  key,\n  reducer\n}) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/utils/injectReducer.js"],"names":["React","hoistNonReactStatics","ReactReduxContext","getInjectors","key","reducer","WrappedComponent","ReducerInjector","Component","constructor","props","context","store","injectReducer","render","contextType","displayName","name","useInjectReducer","useContext","useEffect"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,SAASC,iBAAT,QAAkC,aAAlC;AAEA,OAAOC,YAAP,MAAyB,oBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAe,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,KAAsBC,gBAAgB,IAAI;AACvD,QAAMC,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAA8C;AAS5CC,IAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,YAAMD,KAAN,EAAaC,OAAb;AAEAR,MAAAA,YAAY,CAACQ,OAAO,CAACC,KAAT,CAAZ,CAA4BC,aAA5B,CAA0CT,GAA1C,EAA+CC,OAA/C;AACD;;AAEDS,IAAAA,MAAM,GAAG;AACP,0BAAO,oBAAC,gBAAD,oBAAsB,KAAKJ,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AAjB2C;;AAAxCH,EAAAA,eADiD,CAE9CD,gBAF8C,GAE3BA,gBAF2B;AACjDC,EAAAA,eADiD,CAI9CQ,WAJ8C,GAIhCb,iBAJgC;AACjDK,EAAAA,eADiD,CAM9CS,WAN8C,GAM/B,eAAcV,gBAAgB,CAACU,WAAjB,IAClCV,gBAAgB,CAACW,IADiB,IAElC,WAAY,GARuC;AAqBvD,SAAOhB,oBAAoB,CAACM,eAAD,EAAkBD,gBAAlB,CAA3B;AACD,CAtBD;;AAwBA,MAAMY,gBAAgB,GAAG,CAAC;AAAEd,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,KAAsB;AAC7C,QAAMM,OAAO,GAAGX,KAAK,CAACmB,UAAN,CAAiBjB,iBAAjB,CAAhB;AACAF,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpBjB,IAAAA,YAAY,CAACQ,OAAO,CAACC,KAAT,CAAZ,CAA4BC,aAA5B,CAA0CT,GAA1C,EAA+CC,OAA/C;AACD,GAFD,EAEG,EAFH;AAGD,CALD;;AAOA,SAASa,gBAAT","sourcesContent":["import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './reducerInjectors';\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      'Component'})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };\n"]},"metadata":{},"sourceType":"module"}