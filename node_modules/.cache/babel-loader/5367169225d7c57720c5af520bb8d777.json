{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/CreateReadingTest/EditableQuestions/EditableMatchHeading.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport CustomDropdown from '../../Form/EngageDropdown/index';\nimport QuestionNumber from 'app/views/components/Test/QuestionNumber'; // import { incrementAlphabet, questionIndexing } from 'utils/utils';\n\nimport LoadingIndicator from '../../common/LoadingIndicator';\nimport { Button } from '@material-ui/core';\nconst CreateTestParagraph = React.lazy(() => import('app/views/pages/AdminCreateTest/components/AdminCreateReadingTest/components/Paragraph'));\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n\tmargin-bottom: 20px;\n`;\nconst QuestionInstruction = styled.p`\n\tmargin-top: 20px;\n`;\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\nconst Question = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\t${props => props.isquestionedit === 'true' && `margin-bottom: 80px;\n\t`}\n\n\t${props => props.iseditable === 'false' && 'margin-bottom: 15px;'}\n`;\nconst ActionsWrapper = styled.div`\n\tposition: absolute;\n\ttop: -45px;\n\tright: 20px;\n\t@media (max-width: 400px) {\n\t\tleft: 20px;\n\t\ttop: -18px;\n\t}\n`;\n\nfunction EditableMatchHeadingQuestion(props) {\n  const {\n    questionSection,\n    paragraphAmount,\n    handleOnChange,\n    handleAddQuestion,\n    handleRemoveQuestion,\n    isEditable\n  } = props;\n  const {\n    instruction,\n    options,\n    questions\n  } = questionSection;\n  let questionIndex = 0;\n  let optionFormat = [];\n  let valueFormat = [];\n\n  if (!options) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 10\n      }\n    }, \"Something went wrong, please try again later\");\n  }\n\n  options.map(option => optionFormat.push({\n    value: option,\n    label: option\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(QuestionContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ActionsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, handleAddQuestion && /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: () => handleAddQuestion('matchHeading'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Add question\")), /*#__PURE__*/React.createElement(QuestionInstruction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, \"The text has \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }\n  }, paragraphAmount), \" paragraphs\", ' ', /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }\n  }, \"(\", options[0], \" - \", options.slice(-1).pop(), \")\")), /*#__PURE__*/React.createElement(QuestionInstruction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, instruction), questions.map((question, idx) => {\n    questionIndex = questionIndex + 1;\n    const value = question.key ? {\n      value: question.key,\n      label: question.key\n    } : '';\n    return /*#__PURE__*/React.createElement(Question, {\n      key: questionIndex,\n      isquestionedit: \"true\",\n      iseditable: isEditable.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QuestionNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 8\n      }\n    }, questionIndex), /*#__PURE__*/React.createElement(QuestionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(CustomDropdown, {\n      disabled: !isEditable,\n      placeholder: \"Select answer key\",\n      value: value,\n      onChange: e => handleOnChange(idx, e.value, question.content, question.multipleChoices),\n      holderStyle: {\n        marginTop: '0.5rem',\n        marginBottom: '0.5rem'\n      },\n      options: optionFormat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    })), isEditable ? /*#__PURE__*/React.createElement(React.Suspense, {\n      key: questionIndex,\n      fallback: /*#__PURE__*/React.createElement(LoadingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 55\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CreateTestParagraph, {\n      handleConfirm: content => handleOnChange(idx, question.key, content, question.multipleChoices),\n      handleRemove: () => handleRemoveQuestion(idx),\n      isQuestionEdit: true,\n      hasParagraphAlphabet: false,\n      content: question.content,\n      wrapperStyle: {\n        flexGrow: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 10\n      }\n    })) : question.content);\n  })));\n}\n\nexport default EditableMatchHeadingQuestion;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/CreateReadingTest/EditableQuestions/EditableMatchHeading.js"],"names":["React","styled","CustomDropdown","QuestionNumber","LoadingIndicator","Button","CreateTestParagraph","lazy","QuestionContent","div","QuestionInstruction","p","QuestionSelect","span","Question","props","isquestionedit","iseditable","ActionsWrapper","EditableMatchHeadingQuestion","questionSection","paragraphAmount","handleOnChange","handleAddQuestion","handleRemoveQuestion","isEditable","instruction","options","questions","questionIndex","optionFormat","valueFormat","map","option","push","value","label","slice","pop","question","idx","key","toString","e","content","multipleChoices","marginTop","marginBottom","flexGrow"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport CustomDropdown from '../../Form/EngageDropdown/index';\nimport QuestionNumber from 'app/views/components/Test/QuestionNumber';\n// import { incrementAlphabet, questionIndexing } from 'utils/utils';\nimport LoadingIndicator from '../../common/LoadingIndicator';\nimport { Button } from '@material-ui/core';\n\nconst CreateTestParagraph = React.lazy(() =>\n\timport('app/views/pages/AdminCreateTest/components/AdminCreateReadingTest/components/Paragraph'),\n);\n\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n\tmargin-bottom: 20px;\n`;\n\nconst QuestionInstruction = styled.p`\n\tmargin-top: 20px;\n`;\n\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\n\nconst Question = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\t${props =>\n\t\tprops.isquestionedit === 'true' &&\n\t\t`margin-bottom: 80px;\n\t`}\n\n\t${props => props.iseditable === 'false' && 'margin-bottom: 15px;'}\n`;\n\nconst ActionsWrapper = styled.div`\n\tposition: absolute;\n\ttop: -45px;\n\tright: 20px;\n\t@media (max-width: 400px) {\n\t\tleft: 20px;\n\t\ttop: -18px;\n\t}\n`;\n\nfunction EditableMatchHeadingQuestion(props) {\n\tconst {\n\t\tquestionSection,\n\t\tparagraphAmount,\n\t\thandleOnChange,\n\t\thandleAddQuestion,\n\t\thandleRemoveQuestion,\n\t\tisEditable,\n\t} = props;\n\tconst { instruction, options, questions } = questionSection;\n\n\tlet questionIndex = 0;\n\tlet optionFormat = [];\n\tlet valueFormat = [];\n\n\tif (!options) {\n\t\treturn <div>Something went wrong, please try again later</div>;\n\t}\n\n\toptions.map(option => optionFormat.push({ value: option, label: option }));\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<QuestionContent>\n\t\t\t\t<ActionsWrapper>\n\t\t\t\t\t{handleAddQuestion && (\n\t\t\t\t\t\t<Button variant=\"outlined\" color=\"primary\" onClick={() => handleAddQuestion('matchHeading')}>\n\t\t\t\t\t\t\tAdd question\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)}\n\t\t\t\t</ActionsWrapper>\n\t\t\t\t<QuestionInstruction>\n\t\t\t\t\tThe text has <strong>{paragraphAmount}</strong> paragraphs{' '}\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t({options[0]} - {options.slice(-1).pop()})\n\t\t\t\t\t</strong>\n\t\t\t\t</QuestionInstruction>\n\t\t\t\t<QuestionInstruction>{instruction}</QuestionInstruction>\n\n\t\t\t\t{questions.map((question, idx) => {\n\t\t\t\t\tquestionIndex = questionIndex + 1;\n\t\t\t\t\tconst value = question.key ? { value: question.key, label: question.key } : '';\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Question key={questionIndex} isquestionedit=\"true\" iseditable={isEditable.toString()}>\n\t\t\t\t\t\t\t<QuestionNumber>{questionIndex}</QuestionNumber>\n\t\t\t\t\t\t\t<QuestionSelect>\n\t\t\t\t\t\t\t\t<CustomDropdown\n\t\t\t\t\t\t\t\t\tdisabled={!isEditable}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Select answer key\"\n\t\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\t\thandleOnChange(idx, e.value, question.content, question.multipleChoices)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tholderStyle={{\n\t\t\t\t\t\t\t\t\t\tmarginTop: '0.5rem',\n\t\t\t\t\t\t\t\t\t\tmarginBottom: '0.5rem',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\toptions={optionFormat}\n\t\t\t\t\t\t\t\t></CustomDropdown>\n\t\t\t\t\t\t\t</QuestionSelect>\n\t\t\t\t\t\t\t{isEditable ? (\n\t\t\t\t\t\t\t\t<React.Suspense key={questionIndex} fallback={<LoadingIndicator></LoadingIndicator>}>\n\t\t\t\t\t\t\t\t\t<CreateTestParagraph\n\t\t\t\t\t\t\t\t\t\thandleConfirm={content =>\n\t\t\t\t\t\t\t\t\t\t\thandleOnChange(idx, question.key, content, question.multipleChoices)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\thandleRemove={() => handleRemoveQuestion(idx)}\n\t\t\t\t\t\t\t\t\t\tisQuestionEdit={true}\n\t\t\t\t\t\t\t\t\t\thasParagraphAlphabet={false}\n\t\t\t\t\t\t\t\t\t\tcontent={question.content}\n\t\t\t\t\t\t\t\t\t\twrapperStyle={{ flexGrow: 1 }}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</React.Suspense>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tquestion.content\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Question>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</QuestionContent>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default EditableMatchHeadingQuestion;\n"]},"metadata":{},"sourceType":"module"}