{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/Test/components/Toolbar/index.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components'; // import timerIcon from '../../../../assets/icons/timer.svg';\n\nimport { msToTime } from 'utils/utils';\nimport useCountDown from 'react-countdown-hook';\nimport { Button, Dialog, DialogTitle, DialogActions, DialogContent, DialogContentText, CircularProgress, Snackbar } from '@material-ui/core';\nimport theme from 'app/themes/styles/index';\nimport SendIcon from '@material-ui/icons/Send';\nimport { AccessAlarm } from '@material-ui/icons';\nimport { withSnackbar } from 'notistack';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nconst ConfirmButton = styled(Button)`\n\tfont-size: 14px !important;\n`;\nconst CancelButton = styled(Button)`\n\tfont-size: 14px !important;\n`;\nconst LoadingProgress = styled(CircularProgress)`\n\tmargin-left: 10px;\n\t${props => props.isloading === 'true' ? '' : 'display: none !important;'}\n`;\nconst ToolbarWrapper = styled.div`\n\theight: 50px;\n\twidth: 100%;\n\tposition: fixed;\n\tbottom: 0px;\n\tleft: 0px;\n\tright: 0px;\n\tpadding: 0px;\n\tbackground-color: ${theme.ncpPrimaryDark};\n\tcolor: white;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 0px 30px;\n`;\nconst TestTitleWrapper = styled.div`\n\tfont-size: 18px;\n\tmin-width: 222px;\n\t@media only screen and (max-width: 620px) {\n\t\tmin-width: 0px;\n\t}\n\t@media only screen and (max-width: 480px) {\n\t\tdisplay: none;\n\t}\n`;\nconst TestCountdownTimerIcon = styled(AccessAlarm)`\n\twidth: 20px;\n\theight: 20px;\n\tmargin-right: 10px;\n`;\nconst TestCountdownTimerWrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\nconst ActionWrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\talign-items: center;\n\twidth: 256px;\n`;\nconst TestCountdownTimer = styled.div`\n\tfont-weight: 600;\n\tfont-size: 28px;\n`;\nconst ActionButton = styled(Button)`\n\tdisplay: flex;\n\tjustify-content: space-around;\n\talign-items: center;\n\tpadding: 0.375rem 1.6rem;\n\tcolor: ${theme.ncpWhite};\n\tfont-weight: 700;\n\tfont-size: 14px !important;\n`;\nconst StyledSubmitIcon = styled(SendIcon)`\n\tmargin-left: 10px;\n`;\n\nfunction TestToolbar(props) {\n  const {\n    title = '',\n    handleSubmitAnswer,\n    countdownTime,\n    isLoading,\n    resData,\n    error,\n    intl\n  } = props;\n  const [errorNoti, setErrorNoti] = useState(false);\n  const mountedRef = useRef(true);\n  const [timeLeft, start] = useCountDown(countdownTime, 1000);\n  React.useEffect(() => {\n    if (mountedRef.current) {\n      start();\n    }\n\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n  const [isSubmitModalOpen, openSubmitModal] = useState(false);\n  const timeSpent = countdownTime - timeLeft;\n\n  if (timeLeft === 0) {// handleSubmitAnswer(timeSpent);\n  }\n\n  const handleCloseSubmitModal = () => {\n    openSubmitModal(false);\n  };\n\n  const handleOpenSubmitModal = () => {\n    openSubmitModal(true);\n  };\n\n  const handleSubmitButtonPressed = () => {\n    setErrorNoti(false);\n    handleSubmitAnswer(timeSpent);\n\n    if (!isLoading && resData && mountedRef.current) {\n      handleCloseSubmitModal();\n    }\n  };\n\n  if (error && !errorNoti) {\n    const messageId = 'TRY_AGAIN_LATER';\n    props.enqueueSnackbar(intl.formatMessage({\n      id: messageId\n    }), {\n      variant: 'error',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    });\n    setErrorNoti(true);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: isSubmitModalOpen,\n    onClose: handleCloseSubmitModal,\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, 'Are you sure you want to submit your answers?'), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    id: \"alert-dialog-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 6\n    }\n  }, \"This action will end the test and submit the answers as well as results to us.\")), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmButton, {\n    isloading: isLoading.toString(),\n    color: \"primary\",\n    onClick: () => handleSubmitButtonPressed(),\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 6\n    }\n  }, \"Confirm \", /*#__PURE__*/React.createElement(LoadingProgress, {\n    size: \"20px\",\n    isloading: isLoading.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(CancelButton, {\n    onClick: handleCloseSubmitModal,\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 6\n    }\n  }, \"Cancel\"))), /*#__PURE__*/React.createElement(ToolbarWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(TestTitleWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, title), /*#__PURE__*/React.createElement(TestCountdownTimerWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TestCountdownTimerIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(TestCountdownTimer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 6\n    }\n  }, msToTime(timeLeft))), /*#__PURE__*/React.createElement(ActionWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ActionButton, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => handleOpenSubmitModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 6\n    }\n  }, \"Submit \", /*#__PURE__*/React.createElement(StyledSubmitIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 14\n    }\n  })))));\n}\n\nexport default injectIntl(withSnackbar(TestToolbar));","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/pages/Test/components/Toolbar/index.js"],"names":["React","useState","useEffect","useRef","styled","msToTime","useCountDown","Button","Dialog","DialogTitle","DialogActions","DialogContent","DialogContentText","CircularProgress","Snackbar","theme","SendIcon","AccessAlarm","withSnackbar","FormattedMessage","injectIntl","ConfirmButton","CancelButton","LoadingProgress","props","isloading","ToolbarWrapper","div","ncpPrimaryDark","TestTitleWrapper","TestCountdownTimerIcon","TestCountdownTimerWrapper","ActionWrapper","TestCountdownTimer","ActionButton","ncpWhite","StyledSubmitIcon","TestToolbar","title","handleSubmitAnswer","countdownTime","isLoading","resData","error","intl","errorNoti","setErrorNoti","mountedRef","timeLeft","start","current","isSubmitModalOpen","openSubmitModal","timeSpent","handleCloseSubmitModal","handleOpenSubmitModal","handleSubmitButtonPressed","messageId","enqueueSnackbar","formatMessage","id","variant","anchorOrigin","vertical","horizontal","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n// import timerIcon from '../../../../assets/icons/timer.svg';\nimport { msToTime } from 'utils/utils';\nimport useCountDown from 'react-countdown-hook';\nimport {\n\tButton,\n\tDialog,\n\tDialogTitle,\n\tDialogActions,\n\tDialogContent,\n\tDialogContentText,\n\tCircularProgress,\n\tSnackbar,\n} from '@material-ui/core';\nimport theme from 'app/themes/styles/index';\nimport SendIcon from '@material-ui/icons/Send';\nimport { AccessAlarm } from '@material-ui/icons';\nimport { withSnackbar } from 'notistack';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst ConfirmButton = styled(Button)`\n\tfont-size: 14px !important;\n`;\n\nconst CancelButton = styled(Button)`\n\tfont-size: 14px !important;\n`;\n\nconst LoadingProgress = styled(CircularProgress)`\n\tmargin-left: 10px;\n\t${props => (props.isloading === 'true' ? '' : 'display: none !important;')}\n`;\n\nconst ToolbarWrapper = styled.div`\n\theight: 50px;\n\twidth: 100%;\n\tposition: fixed;\n\tbottom: 0px;\n\tleft: 0px;\n\tright: 0px;\n\tpadding: 0px;\n\tbackground-color: ${theme.ncpPrimaryDark};\n\tcolor: white;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 0px 30px;\n`;\n\nconst TestTitleWrapper = styled.div`\n\tfont-size: 18px;\n\tmin-width: 222px;\n\t@media only screen and (max-width: 620px) {\n\t\tmin-width: 0px;\n\t}\n\t@media only screen and (max-width: 480px) {\n\t\tdisplay: none;\n\t}\n`;\n\nconst TestCountdownTimerIcon = styled(AccessAlarm)`\n\twidth: 20px;\n\theight: 20px;\n\tmargin-right: 10px;\n`;\n\nconst TestCountdownTimerWrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n\nconst ActionWrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\talign-items: center;\n\twidth: 256px;\n`;\n\nconst TestCountdownTimer = styled.div`\n\tfont-weight: 600;\n\tfont-size: 28px;\n`;\n\nconst ActionButton = styled(Button)`\n\tdisplay: flex;\n\tjustify-content: space-around;\n\talign-items: center;\n\tpadding: 0.375rem 1.6rem;\n\tcolor: ${theme.ncpWhite};\n\tfont-weight: 700;\n\tfont-size: 14px !important;\n`;\n\nconst StyledSubmitIcon = styled(SendIcon)`\n\tmargin-left: 10px;\n`;\n\nfunction TestToolbar(props) {\n\tconst { title = '', handleSubmitAnswer, countdownTime, isLoading, resData, error, intl } = props;\n\tconst [errorNoti, setErrorNoti] = useState(false);\n\tconst mountedRef = useRef(true);\n\tconst [timeLeft, start] = useCountDown(countdownTime, 1000);\n\tReact.useEffect(() => {\n\t\tif (mountedRef.current) {\n\t\t\tstart();\n\t\t}\n\t\treturn () => {\n\t\t\tmountedRef.current = false;\n\t\t};\n\t}, []);\n\tconst [isSubmitModalOpen, openSubmitModal] = useState(false);\n\n\tconst timeSpent = countdownTime - timeLeft;\n\tif (timeLeft === 0) {\n\t\t// handleSubmitAnswer(timeSpent);\n\t}\n\n\tconst handleCloseSubmitModal = () => {\n\t\topenSubmitModal(false);\n\t};\n\n\tconst handleOpenSubmitModal = () => {\n\t\topenSubmitModal(true);\n\t};\n\n\tconst handleSubmitButtonPressed = () => {\n\t\tsetErrorNoti(false);\n\t\thandleSubmitAnswer(timeSpent);\n\t\tif (!isLoading && resData && mountedRef.current) {\n\t\t\thandleCloseSubmitModal();\n\t\t}\n\t};\n\n\tif (error && !errorNoti) {\n\t\tconst messageId = 'TRY_AGAIN_LATER';\n\t\tprops.enqueueSnackbar(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: messageId,\n\t\t\t}),\n\t\t\t{\n\t\t\t\tvariant: 'error',\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tsetErrorNoti(true);\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Dialog\n\t\t\t\topen={isSubmitModalOpen}\n\t\t\t\tonClose={handleCloseSubmitModal}\n\t\t\t\taria-labelledby=\"alert-dialog-title\"\n\t\t\t\taria-describedby=\"alert-dialog-description\"\n\t\t\t>\n\t\t\t\t<DialogTitle id=\"alert-dialog-title\">{'Are you sure you want to submit your answers?'}</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<DialogContentText id=\"alert-dialog-description\">\n\t\t\t\t\t\tThis action will end the test and submit the answers as well as results to us.\n\t\t\t\t\t</DialogContentText>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<ConfirmButton\n\t\t\t\t\t\tisloading={isLoading.toString()}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tonClick={() => handleSubmitButtonPressed()}\n\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t>\n\t\t\t\t\t\tConfirm <LoadingProgress size=\"20px\" isloading={isLoading.toString()}></LoadingProgress>\n\t\t\t\t\t</ConfirmButton>\n\t\t\t\t\t<CancelButton onClick={handleCloseSubmitModal} color=\"secondary\">\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</CancelButton>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t<ToolbarWrapper>\n\t\t\t\t<TestTitleWrapper>{title}</TestTitleWrapper>\n\n\t\t\t\t<TestCountdownTimerWrapper>\n\t\t\t\t\t<TestCountdownTimerIcon></TestCountdownTimerIcon>\n\t\t\t\t\t<TestCountdownTimer>{msToTime(timeLeft)}</TestCountdownTimer>\n\t\t\t\t</TestCountdownTimerWrapper>\n\n\t\t\t\t<ActionWrapper>\n\t\t\t\t\t<ActionButton variant=\"contained\" color=\"primary\" onClick={() => handleOpenSubmitModal()}>\n\t\t\t\t\t\tSubmit <StyledSubmitIcon></StyledSubmitIcon>\n\t\t\t\t\t</ActionButton>\n\t\t\t\t</ActionWrapper>\n\t\t\t</ToolbarWrapper>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default injectIntl(withSnackbar(TestToolbar));\n"]},"metadata":{},"sourceType":"module"}