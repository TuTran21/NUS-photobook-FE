{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/CreateReadingTest/EditableQuestions/EditableFillInGaps.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { questionIndexing, splitStringByBlank } from 'utils/utils';\nimport CustomInput from '../../Form/EngageInput/index';\nimport QuestionNumber from 'app/views/components/Test/QuestionNumber';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator';\nimport Theme from 'app/assets/theme';\nimport { Button } from '@material-ui/core';\nconst CreateTestParagraph = React.lazy(() => import('app/views/pages/AdminCreateTest/components/AdminCreateReadingTest/components/Paragraph'));\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\nconst QuestionInstruction = styled.p`\n\tmargin-top: 20px;\n`;\nconst WordLimit = styled.strong`\n\tcolor: ${Theme.ncpRed};\n\tfont-style: italic;\n`;\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\nconst Question = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\t${props => props.isquestionedit === 'true' && `margin-bottom: 80px;\n\t`}\n\n\t${props => props.iseditable === 'false' && 'margin-bottom: 20px;'}\n`;\nconst ActionsWrapper = styled.div`\n\tposition: absolute;\n\ttop: -45px;\n\tright: 20px;\n\t@media (max-width: 400px) {\n\t\tleft: 20px;\n\t\ttop: -18px;\n\t}\n`;\n\nfunction EditableFillInGap(props) {\n  const {\n    questionSection,\n    paragraphAmount,\n    questionRange,\n    handleOnChange,\n    sectionAnswer,\n    handleRemoveQuestion,\n    handleAddQuestion,\n    isEditable\n  } = props;\n  const {\n    instruction,\n    questions\n  } = questionSection; // let valueFormat = [];\n  // if (sectionAnswer) {\n  // \tsectionAnswer.answers.map(answer => {\n  // \t\tvalueFormat.push(answer);\n  // \t});\n  // }\n\n  const handleChangeQuestionContent = (idx, key, content, multipleChoices, stringSide, fullContent) => {\n    const searchTerm = '[BLANK]';\n    const findBlank = fullContent.indexOf(searchTerm);\n    let newContent = '';\n\n    if (stringSide === 'left') {\n      const rightSide = fullContent.slice(findBlank, fullContent.length);\n      newContent = content + ' ' + rightSide;\n    } else if (stringSide === 'right') {\n      const leftSide = fullContent.slice(0, findBlank + searchTerm.length);\n      newContent = leftSide + ' ' + content;\n    }\n\n    handleOnChange(idx, key, newContent, multipleChoices);\n  };\n\n  const handleChangeKey = (idx, key, content, multipleChoices) => {\n    handleOnChange(idx, key, content, multipleChoices);\n  };\n\n  let questionIndex = 0;\n\n  if (questionRange) {\n    questionIndex = questionIndexing(questionRange);\n  }\n\n  return /*#__PURE__*/React.createElement(QuestionContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ActionsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 4\n    }\n  }, handleAddQuestion && /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: () => handleAddQuestion('fillInGap'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 6\n    }\n  }, \"Add question\")), /*#__PURE__*/React.createElement(QuestionInstruction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }\n  }, \"Complete the following sentences using \", /*#__PURE__*/React.createElement(WordLimit, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 44\n    }\n  }, instruction), \" from the text for each gap.\"), questions.map((question, idx) => {\n    questionIndex = questionIndex + 1;\n    const splitString = splitStringByBlank(question.content);\n    const value = question.key ? {\n      value: question.key,\n      label: question.key\n    } : '';\n    return /*#__PURE__*/React.createElement(Question, {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(QuestionNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, questionIndex), /*#__PURE__*/React.createElement(QuestionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, isEditable ? /*#__PURE__*/React.createElement(React.Suspense, {\n      fallback: /*#__PURE__*/React.createElement(LoadingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CreateTestParagraph, {\n      handleConfirm: content => handleChangeQuestionContent(idx, question.key, content, question.multipleChoices, 'left', question.content),\n      handleRemove: () => handleRemoveQuestion(idx),\n      isQuestionEdit: true,\n      hasParagraphAlphabet: false,\n      content: splitString.leftString,\n      wrapperStyle: {\n        flexGrow: 1,\n        display: 'inline-block',\n        marginRight: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 10\n      }\n    })) : splitString.leftString, /*#__PURE__*/React.createElement(CustomInput, {\n      value: question.key,\n      onChange: e => handleChangeKey(idx, e.target.value, question.content, question.multipleChoices),\n      holderStyle: {\n        display: 'inline-block',\n        marginTop: '0.5rem',\n        marginBottom: '0.5rem'\n      },\n      width: \"150px\",\n      disabled: !isEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 8\n      }\n    }), isEditable ? /*#__PURE__*/React.createElement(React.Suspense, {\n      fallback: /*#__PURE__*/React.createElement(LoadingIndicator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CreateTestParagraph, {\n      handleConfirm: content => handleChangeQuestionContent(idx, question.key, content, question.multipleChoices, 'right', question.content),\n      handleRemove: () => handleRemoveQuestion(idx),\n      isQuestionEdit: true,\n      hasParagraphAlphabet: false,\n      content: splitString.rightString,\n      wrapperStyle: {\n        flexGrow: 1,\n        display: 'inline-block',\n        marginLeft: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 10\n      }\n    })) : splitString.rightString));\n  }));\n}\n\nexport default EditableFillInGap;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/CreateReadingTest/EditableQuestions/EditableFillInGaps.js"],"names":["React","styled","questionIndexing","splitStringByBlank","CustomInput","QuestionNumber","LoadingIndicator","Theme","Button","CreateTestParagraph","lazy","QuestionContent","div","QuestionInstruction","p","WordLimit","strong","ncpRed","QuestionSelect","span","Question","props","isquestionedit","iseditable","ActionsWrapper","EditableFillInGap","questionSection","paragraphAmount","questionRange","handleOnChange","sectionAnswer","handleRemoveQuestion","handleAddQuestion","isEditable","instruction","questions","handleChangeQuestionContent","idx","key","content","multipleChoices","stringSide","fullContent","searchTerm","findBlank","indexOf","newContent","rightSide","slice","length","leftSide","handleChangeKey","questionIndex","map","question","splitString","value","label","leftString","flexGrow","display","marginRight","e","target","marginTop","marginBottom","rightString","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { questionIndexing, splitStringByBlank } from 'utils/utils';\nimport CustomInput from '../../Form/EngageInput/index';\nimport QuestionNumber from 'app/views/components/Test/QuestionNumber';\nimport LoadingIndicator from 'app/views/components/common/LoadingIndicator';\nimport Theme from 'app/assets/theme';\nimport { Button } from '@material-ui/core';\nconst CreateTestParagraph = React.lazy(() =>\n\timport('app/views/pages/AdminCreateTest/components/AdminCreateReadingTest/components/Paragraph'),\n);\n\nconst QuestionContent = styled.div`\n\tpadding: 0px 5px;\n`;\n\nconst QuestionInstruction = styled.p`\n\tmargin-top: 20px;\n`;\n\nconst WordLimit = styled.strong`\n\tcolor: ${Theme.ncpRed};\n\tfont-style: italic;\n`;\n\nconst QuestionSelect = styled.span`\n\tmargin: 0px 5px;\n`;\n\nconst Question = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\t${props =>\n\t\tprops.isquestionedit === 'true' &&\n\t\t`margin-bottom: 80px;\n\t`}\n\n\t${props => props.iseditable === 'false' && 'margin-bottom: 20px;'}\n`;\n\nconst ActionsWrapper = styled.div`\n\tposition: absolute;\n\ttop: -45px;\n\tright: 20px;\n\t@media (max-width: 400px) {\n\t\tleft: 20px;\n\t\ttop: -18px;\n\t}\n`;\n\nfunction EditableFillInGap(props) {\n\tconst {\n\t\tquestionSection,\n\t\tparagraphAmount,\n\t\tquestionRange,\n\t\thandleOnChange,\n\t\tsectionAnswer,\n\t\thandleRemoveQuestion,\n\t\thandleAddQuestion,\n\t\tisEditable,\n\t} = props;\n\tconst { instruction, questions } = questionSection;\n\n\t// let valueFormat = [];\n\n\t// if (sectionAnswer) {\n\t// \tsectionAnswer.answers.map(answer => {\n\t// \t\tvalueFormat.push(answer);\n\t// \t});\n\t// }\n\n\tconst handleChangeQuestionContent = (idx, key, content, multipleChoices, stringSide, fullContent) => {\n\t\tconst searchTerm = '[BLANK]';\n\t\tconst findBlank = fullContent.indexOf(searchTerm);\n\t\tlet newContent = '';\n\t\tif (stringSide === 'left') {\n\t\t\tconst rightSide = fullContent.slice(findBlank, fullContent.length);\n\t\t\tnewContent = content + ' ' + rightSide;\n\t\t} else if (stringSide === 'right') {\n\t\t\tconst leftSide = fullContent.slice(0, findBlank + searchTerm.length);\n\t\t\tnewContent = leftSide + ' ' + content;\n\t\t}\n\t\thandleOnChange(idx, key, newContent, multipleChoices);\n\t};\n\n\tconst handleChangeKey = (idx, key, content, multipleChoices) => {\n\t\thandleOnChange(idx, key, content, multipleChoices);\n\t};\n\n\tlet questionIndex = 0;\n\tif (questionRange) {\n\t\tquestionIndex = questionIndexing(questionRange);\n\t}\n\treturn (\n\t\t<QuestionContent>\n\t\t\t<ActionsWrapper>\n\t\t\t\t{handleAddQuestion && (\n\t\t\t\t\t<Button variant=\"outlined\" color=\"primary\" onClick={() => handleAddQuestion('fillInGap')}>\n\t\t\t\t\t\tAdd question\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</ActionsWrapper>\n\t\t\t<QuestionInstruction>\n\t\t\t\tComplete the following sentences using <WordLimit>{instruction}</WordLimit> from the text for each gap.\n\t\t\t</QuestionInstruction>\n\n\t\t\t{questions.map((question, idx) => {\n\t\t\t\tquestionIndex = questionIndex + 1;\n\t\t\t\tconst splitString = splitStringByBlank(question.content);\n\t\t\t\tconst value = question.key ? { value: question.key, label: question.key } : '';\n\t\t\t\treturn (\n\t\t\t\t\t<Question key={idx}>\n\t\t\t\t\t\t<QuestionNumber>{questionIndex}</QuestionNumber>\n\t\t\t\t\t\t<QuestionSelect>\n\t\t\t\t\t\t\t{isEditable ? (\n\t\t\t\t\t\t\t\t<React.Suspense fallback={<LoadingIndicator />}>\n\t\t\t\t\t\t\t\t\t<CreateTestParagraph\n\t\t\t\t\t\t\t\t\t\thandleConfirm={content =>\n\t\t\t\t\t\t\t\t\t\t\thandleChangeQuestionContent(\n\t\t\t\t\t\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\t\t\t\t\tquestion.key,\n\t\t\t\t\t\t\t\t\t\t\t\tcontent,\n\t\t\t\t\t\t\t\t\t\t\t\tquestion.multipleChoices,\n\t\t\t\t\t\t\t\t\t\t\t\t'left',\n\t\t\t\t\t\t\t\t\t\t\t\tquestion.content,\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\thandleRemove={() => handleRemoveQuestion(idx)}\n\t\t\t\t\t\t\t\t\t\tisQuestionEdit={true}\n\t\t\t\t\t\t\t\t\t\thasParagraphAlphabet={false}\n\t\t\t\t\t\t\t\t\t\tcontent={splitString.leftString}\n\t\t\t\t\t\t\t\t\t\twrapperStyle={{ flexGrow: 1, display: 'inline-block', marginRight: '1rem' }}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</React.Suspense>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tsplitString.leftString\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<CustomInput\n\t\t\t\t\t\t\t\tvalue={question.key}\n\t\t\t\t\t\t\t\tonChange={e =>\n\t\t\t\t\t\t\t\t\thandleChangeKey(idx, e.target.value, question.content, question.multipleChoices)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tholderStyle={{\n\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\t\t\t\tmarginTop: '0.5rem',\n\t\t\t\t\t\t\t\t\tmarginBottom: '0.5rem',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\twidth=\"150px\"\n\t\t\t\t\t\t\t\tdisabled={!isEditable}\n\t\t\t\t\t\t\t></CustomInput>\n\n\t\t\t\t\t\t\t{isEditable ? (\n\t\t\t\t\t\t\t\t<React.Suspense fallback={<LoadingIndicator />}>\n\t\t\t\t\t\t\t\t\t<CreateTestParagraph\n\t\t\t\t\t\t\t\t\t\thandleConfirm={content =>\n\t\t\t\t\t\t\t\t\t\t\thandleChangeQuestionContent(\n\t\t\t\t\t\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\t\t\t\t\tquestion.key,\n\t\t\t\t\t\t\t\t\t\t\t\tcontent,\n\t\t\t\t\t\t\t\t\t\t\t\tquestion.multipleChoices,\n\t\t\t\t\t\t\t\t\t\t\t\t'right',\n\t\t\t\t\t\t\t\t\t\t\t\tquestion.content,\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\thandleRemove={() => handleRemoveQuestion(idx)}\n\t\t\t\t\t\t\t\t\t\tisQuestionEdit={true}\n\t\t\t\t\t\t\t\t\t\thasParagraphAlphabet={false}\n\t\t\t\t\t\t\t\t\t\tcontent={splitString.rightString}\n\t\t\t\t\t\t\t\t\t\twrapperStyle={{ flexGrow: 1, display: 'inline-block', marginLeft: '1rem' }}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</React.Suspense>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tsplitString.rightString\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</QuestionSelect>\n\t\t\t\t\t</Question>\n\t\t\t\t);\n\t\t\t})}\n\t\t</QuestionContent>\n\t);\n}\n\nexport default EditableFillInGap;\n"]},"metadata":{},"sourceType":"module"}