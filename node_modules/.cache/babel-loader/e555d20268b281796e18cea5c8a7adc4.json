{"ast":null,"code":"const REGULAR = ['background: blue', 'color: white'].join(';');\nconst SUCCESS = ['background: green', 'color: white'].join(';');\nconst STARTED = ['background: darkorange', 'color: white'].join(';');\nconst FAILURE = ['background: red', 'color: white'].join(';');\n\nconst logGroupCollapsed = (...args) => {\n  const logFunction = typeof console.groupCollapsed === 'function' ? console.groupCollapsed : console.info;\n  logFunction(...args);\n};\n\nconst logGroupEnd = (...args) => {\n  const logFunction = typeof console.groupEnd === 'function' ? console.groupEnd : console.info;\n  logFunction(...args);\n};\n\nconst logInfo = (...args) => {\n  console.info(...args);\n};\n\nconst determineStyle = action => {\n  if (!action.meta || !action.meta.async) {\n    return REGULAR;\n  }\n\n  if (action.type.indexOf('_COMPLETED') > -1) {\n    return SUCCESS;\n  }\n\n  if (action.type.indexOf('_FAILED') > -1) {\n    return FAILURE;\n  }\n\n  return STARTED;\n};\n\nconst createLogger = (active = true) => store => next => action => {\n  if (!active) {\n    return next(action);\n  }\n\n  const prevState = store.getState();\n  const result = next(action);\n  const nextState = store.getState();\n  logGroupCollapsed(`%c ${action.type} `, determineStyle(action));\n  logInfo('%cprev state', 'color: darkorange', prevState);\n  logInfo('%caction payload', 'color: blue', action.payload);\n  logInfo('%cnext state', 'color: darkgreen', nextState);\n  logGroupEnd();\n  return result;\n};\n\nexport default createLogger;","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/state/middlewares/logger.js"],"names":["REGULAR","join","SUCCESS","STARTED","FAILURE","logGroupCollapsed","args","logFunction","console","groupCollapsed","info","logGroupEnd","groupEnd","logInfo","determineStyle","action","meta","async","type","indexOf","createLogger","active","store","next","prevState","getState","result","nextState","payload"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAAC,kBAAD,EAAqB,cAArB,EAAqCC,IAArC,CAA0C,GAA1C,CAAhB;AAEA,MAAMC,OAAO,GAAG,CAAC,mBAAD,EAAsB,cAAtB,EAAsCD,IAAtC,CAA2C,GAA3C,CAAhB;AAEA,MAAME,OAAO,GAAG,CAAC,wBAAD,EAA2B,cAA3B,EAA2CF,IAA3C,CAAgD,GAAhD,CAAhB;AAEA,MAAMG,OAAO,GAAG,CAAC,iBAAD,EAAoB,cAApB,EAAoCH,IAApC,CAAyC,GAAzC,CAAhB;;AAEA,MAAMI,iBAAiB,GAAG,CAAC,GAAGC,IAAJ,KAAa;AACtC,QAAMC,WAAW,GAAG,OAAOC,OAAO,CAACC,cAAf,KAAkC,UAAlC,GAA+CD,OAAO,CAACC,cAAvD,GAAwED,OAAO,CAACE,IAApG;AACAH,EAAAA,WAAW,CAAC,GAAGD,IAAJ,CAAX;AACA,CAHD;;AAKA,MAAMK,WAAW,GAAG,CAAC,GAAGL,IAAJ,KAAa;AAChC,QAAMC,WAAW,GAAG,OAAOC,OAAO,CAACI,QAAf,KAA4B,UAA5B,GAAyCJ,OAAO,CAACI,QAAjD,GAA4DJ,OAAO,CAACE,IAAxF;AACAH,EAAAA,WAAW,CAAC,GAAGD,IAAJ,CAAX;AACA,CAHD;;AAKA,MAAMO,OAAO,GAAG,CAAC,GAAGP,IAAJ,KAAa;AAC5BE,EAAAA,OAAO,CAACE,IAAR,CAAa,GAAGJ,IAAhB;AACA,CAFD;;AAIA,MAAMQ,cAAc,GAAGC,MAAM,IAAI;AAChC,MAAI,CAACA,MAAM,CAACC,IAAR,IAAgB,CAACD,MAAM,CAACC,IAAP,CAAYC,KAAjC,EAAwC;AACvC,WAAOjB,OAAP;AACA;;AAED,MAAIe,MAAM,CAACG,IAAP,CAAYC,OAAZ,CAAoB,YAApB,IAAoC,CAAC,CAAzC,EAA4C;AAC3C,WAAOjB,OAAP;AACA;;AAED,MAAIa,MAAM,CAACG,IAAP,CAAYC,OAAZ,CAAoB,SAApB,IAAiC,CAAC,CAAtC,EAAyC;AACxC,WAAOf,OAAP;AACA;;AAED,SAAOD,OAAP;AACA,CAdD;;AAgBA,MAAMiB,YAAY,GAAG,CAACC,MAAM,GAAG,IAAV,KAAmBC,KAAK,IAAIC,IAAI,IAAIR,MAAM,IAAI;AAClE,MAAI,CAACM,MAAL,EAAa;AACZ,WAAOE,IAAI,CAACR,MAAD,CAAX;AACA;;AAED,QAAMS,SAAS,GAAGF,KAAK,CAACG,QAAN,EAAlB;AACA,QAAMC,MAAM,GAAGH,IAAI,CAACR,MAAD,CAAnB;AACA,QAAMY,SAAS,GAAGL,KAAK,CAACG,QAAN,EAAlB;AACApB,EAAAA,iBAAiB,CAAE,MAAKU,MAAM,CAACG,IAAK,GAAnB,EAAuBJ,cAAc,CAACC,MAAD,CAArC,CAAjB;AACAF,EAAAA,OAAO,CAAC,cAAD,EAAiB,mBAAjB,EAAsCW,SAAtC,CAAP;AACAX,EAAAA,OAAO,CAAC,kBAAD,EAAqB,aAArB,EAAoCE,MAAM,CAACa,OAA3C,CAAP;AACAf,EAAAA,OAAO,CAAC,cAAD,EAAiB,kBAAjB,EAAqCc,SAArC,CAAP;AACAhB,EAAAA,WAAW;AACX,SAAOe,MAAP;AACA,CAdD;;AAgBA,eAAeN,YAAf","sourcesContent":["const REGULAR = ['background: blue', 'color: white'].join(';');\n\nconst SUCCESS = ['background: green', 'color: white'].join(';');\n\nconst STARTED = ['background: darkorange', 'color: white'].join(';');\n\nconst FAILURE = ['background: red', 'color: white'].join(';');\n\nconst logGroupCollapsed = (...args) => {\n\tconst logFunction = typeof console.groupCollapsed === 'function' ? console.groupCollapsed : console.info;\n\tlogFunction(...args);\n};\n\nconst logGroupEnd = (...args) => {\n\tconst logFunction = typeof console.groupEnd === 'function' ? console.groupEnd : console.info;\n\tlogFunction(...args);\n};\n\nconst logInfo = (...args) => {\n\tconsole.info(...args);\n};\n\nconst determineStyle = action => {\n\tif (!action.meta || !action.meta.async) {\n\t\treturn REGULAR;\n\t}\n\n\tif (action.type.indexOf('_COMPLETED') > -1) {\n\t\treturn SUCCESS;\n\t}\n\n\tif (action.type.indexOf('_FAILED') > -1) {\n\t\treturn FAILURE;\n\t}\n\n\treturn STARTED;\n};\n\nconst createLogger = (active = true) => store => next => action => {\n\tif (!active) {\n\t\treturn next(action);\n\t}\n\n\tconst prevState = store.getState();\n\tconst result = next(action);\n\tconst nextState = store.getState();\n\tlogGroupCollapsed(`%c ${action.type} `, determineStyle(action));\n\tlogInfo('%cprev state', 'color: darkorange', prevState);\n\tlogInfo('%caction payload', 'color: blue', action.payload);\n\tlogInfo('%cnext state', 'color: darkgreen', nextState);\n\tlogGroupEnd();\n\treturn result;\n};\n\nexport default createLogger;\n"]},"metadata":{},"sourceType":"module"}