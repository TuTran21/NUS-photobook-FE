{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/themes/_metronic/layout/LayoutContext.js\";\nimport React, { createContext, useContext, useEffect, useMemo, useReducer } from 'react';\n/**\n * Both context used to create inside react `redux`-like global state managed\n * entirely by react.\n *\n * @see https://kentcdodds.com/blog/how-to-use-react-context-effectively\n */\n\nconst LayoutContext = {\n  /**\n   * Stores layout state, can be consumed globally.\n   */\n  State: createContext(null),\n\n  /**\n   * Stores `dispatch` function to update layout state, intended to be internal.\n   */\n  Dispatch: createContext(null)\n};\n/**\n * Layout action types, used to filter out dispatched actions.\n */\n\nconst actionTypes = {\n  /**\n   * Initializes layout state from provided `{ pathname, menuConfig }` action\n   * payload.\n   */\n  INIT: 'INIT',\n\n  /**\n   * Updates current subheader from provided `{ title }` action payload.\n   */\n  SET_SUBHEADER: 'SET_SUBHEADER',\n\n  /**\n   * Controls splash screen visibility.\n   */\n  SHOW_SPLASH_SCREEN: 'SHOW_SPLASH_SCREEN',\n  HIDE_SPLASH_SCREEN: 'HIDE_SPLASH_SCREEN'\n};\n/**\n * Recursively runs over `items` to find `pageConfig` of `currentPage`.\n *\n * Returns `undefined` if there are no matches.\n */\n\nfunction findPageConfig(currentPage, items) {\n  // Ignore non array `items`.\n  if (!items || !Array.isArray(items)) {\n    return;\n  }\n\n  for (const item of items) {\n    // Return `item` if it's `page` matches `currentPage`\n    if (currentPage === item.page) {\n      return item;\n    } // Try to `pageConfig` in `item.submenu` if it is defined.\n\n\n    if (item.submenu) {\n      const pageConfig = findPageConfig(currentPage, item.submenu);\n\n      if (pageConfig) {\n        return pageConfig;\n      }\n    }\n  }\n}\n/**\n * Used to lazily create initial layout state.\n */\n\n\nfunction init({\n  pathname,\n  menuConfig\n}) {\n  const currentPage = pathname.slice(1\n  /* Remove leading slash. */\n  );\n  const pageConfig = findPageConfig(currentPage, menuConfig.aside.items) || findPageConfig(currentPage, menuConfig.header.items);\n  const state = {\n    subheader: {},\n    splashScreen: {\n      refs: {}\n    }\n  };\n\n  if (pageConfig) {\n    state.subheader.title = pageConfig.title;\n  }\n\n  return state;\n}\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  if (type === actionTypes.INIT) {\n    const nextState = init(payload); // Update only subheader.\n\n    return { ...state,\n      subheader: nextState.subheader\n    };\n  }\n\n  if (type === actionTypes.SET_SUBHEADER) {\n    return { ...state,\n      subheader: payload\n    };\n  }\n\n  if (type === actionTypes.SHOW_SPLASH_SCREEN) {\n    return { ...state,\n      splashScreen: { ...state.splashScreen,\n        refs: { ...state.splashScreen.refs,\n          [payload.id]: true\n        }\n      }\n    };\n  }\n\n  if (type === actionTypes.HIDE_SPLASH_SCREEN) {\n    const {\n      [payload.id]: skip,\n      ...nextRefs\n    } = state.splashScreen.refs;\n    return { ...state,\n      splashScreen: { ...state.splashScreen,\n        refs: nextRefs\n      }\n    };\n  }\n\n  return state;\n}\n/**\n * Creates layout reducer and provides it's `state` and ` dispatch`.\n */\n\n\nexport function LayoutContextProvider({\n  history,\n  children,\n  menuConfig\n}) {\n  const [state, dispatch] = useReducer(reducer, {\n    menuConfig,\n    pathname: history.location.pathname\n  }, // See https://reactjs.org/docs/hooks-reference.html#lazy-initialization\n  init); // Subscribe to history changes and reinitialize on each change.\n\n  useEffect(() => history.listen(({\n    pathname\n  }) => {\n    dispatch({\n      type: actionTypes.INIT,\n      payload: {\n        pathname,\n        menuConfig\n      }\n    });\n  }),\n  /**\n   * Passing `history` and `menuConfig` to `deps` ensures that `useEffect`\n   * will cleanup current `history` listener and will dispatch `INIT`\n   * with `menuConfig` reference from current render.\n   *\n   * @see https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\n   */\n  [history, menuConfig]);\n  const {\n    refs: splashScreenRefs\n  } = state.splashScreen;\n  const splashScreenVisible = useMemo(() => Object.keys(splashScreenRefs).length > 0, [splashScreenRefs]);\n  useEffect(() => {\n    const splashScreen = document.getElementById('splash-screen');\n\n    if (splashScreenVisible) {\n      splashScreen.classList.remove('d-none');\n      return () => {\n        splashScreen.classList.add('d-none');\n      };\n    }\n\n    const timeout = setTimeout(() => {\n      splashScreen.classList.add('d-none');\n    }, 1000);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [splashScreenVisible]); // Pass state and dispatch to it's contexts.\n\n  return /*#__PURE__*/React.createElement(LayoutContext.State.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(LayoutContext.Dispatch.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 4\n    }\n  }, children));\n}\n/**\n * Used to access latest layout context state.\n *\n * @example\n *\n * export function Subheader() {\n *   return (\n *     <LayoutContextConsumer>\n *       {({ subheader: { title } }) => <h1>{title}</h1>}\n *     </LayoutContextConsumer>\n *   );\n * }\n */\n\nexport const LayoutContextConsumer = LayoutContext.State.Consumer;\n/**\n * Hook to access latest layout context state.\n *\n * @example\n *\n * export function Subheader() {\n *   const { subheader: { title } } = useLayoutContext();\n *\n *   return <h1>{title}</h1>;\n * }\n */\n\nexport function useLayoutContext() {\n  const context = useContext(LayoutContext.State);\n\n  if (!context) {\n    throw new Error('');\n  }\n\n  return context;\n}\n/**\n * Used to override layout subheader state.\n */\n\nexport function LayoutSubheader({\n  title,\n  breadcrumb,\n  description\n}) {\n  const dispatch = useContext(LayoutContext.Dispatch);\n  useEffect(() => {\n    dispatch({\n      type: actionTypes.SET_SUBHEADER,\n      payload: {\n        title,\n        breadcrumb,\n        description\n      }\n    });\n  }, [dispatch, title, breadcrumb, description]);\n  return null;\n}\nexport function LayoutSplashScreen({\n  visible = false\n}) {\n  const dispatch = useContext(LayoutContext.Dispatch);\n  useEffect(() => {\n    if (!visible) {\n      return;\n    }\n\n    const id = Math.random();\n    dispatch({\n      type: actionTypes.SHOW_SPLASH_SCREEN,\n      payload: {\n        id\n      }\n    });\n    return () => {\n      dispatch({\n        type: actionTypes.HIDE_SPLASH_SCREEN,\n        payload: {\n          id\n        }\n      });\n    };\n  }, [visible, dispatch]);\n  return null;\n}","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/themes/_metronic/layout/LayoutContext.js"],"names":["React","createContext","useContext","useEffect","useMemo","useReducer","LayoutContext","State","Dispatch","actionTypes","INIT","SET_SUBHEADER","SHOW_SPLASH_SCREEN","HIDE_SPLASH_SCREEN","findPageConfig","currentPage","items","Array","isArray","item","page","submenu","pageConfig","init","pathname","menuConfig","slice","aside","header","state","subheader","splashScreen","refs","title","reducer","type","payload","nextState","id","skip","nextRefs","LayoutContextProvider","history","children","dispatch","location","listen","splashScreenRefs","splashScreenVisible","Object","keys","length","document","getElementById","classList","remove","add","timeout","setTimeout","clearTimeout","LayoutContextConsumer","Consumer","useLayoutContext","context","Error","LayoutSubheader","breadcrumb","description","LayoutSplashScreen","visible","Math","random"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useMemo, useReducer } from 'react';\n\n/**\n * Both context used to create inside react `redux`-like global state managed\n * entirely by react.\n *\n * @see https://kentcdodds.com/blog/how-to-use-react-context-effectively\n */\n\nconst LayoutContext = {\n\t/**\n\t * Stores layout state, can be consumed globally.\n\t */\n\tState: createContext(null),\n\n\t/**\n\t * Stores `dispatch` function to update layout state, intended to be internal.\n\t */\n\tDispatch: createContext(null),\n};\n\n/**\n * Layout action types, used to filter out dispatched actions.\n */\nconst actionTypes = {\n\t/**\n\t * Initializes layout state from provided `{ pathname, menuConfig }` action\n\t * payload.\n\t */\n\tINIT: 'INIT',\n\n\t/**\n\t * Updates current subheader from provided `{ title }` action payload.\n\t */\n\tSET_SUBHEADER: 'SET_SUBHEADER',\n\n\t/**\n\t * Controls splash screen visibility.\n\t */\n\tSHOW_SPLASH_SCREEN: 'SHOW_SPLASH_SCREEN',\n\tHIDE_SPLASH_SCREEN: 'HIDE_SPLASH_SCREEN',\n};\n\n/**\n * Recursively runs over `items` to find `pageConfig` of `currentPage`.\n *\n * Returns `undefined` if there are no matches.\n */\nfunction findPageConfig(currentPage, items) {\n\t// Ignore non array `items`.\n\tif (!items || !Array.isArray(items)) {\n\t\treturn;\n\t}\n\n\tfor (const item of items) {\n\t\t// Return `item` if it's `page` matches `currentPage`\n\t\tif (currentPage === item.page) {\n\t\t\treturn item;\n\t\t}\n\n\t\t// Try to `pageConfig` in `item.submenu` if it is defined.\n\t\tif (item.submenu) {\n\t\t\tconst pageConfig = findPageConfig(currentPage, item.submenu);\n\n\t\t\tif (pageConfig) {\n\t\t\t\treturn pageConfig;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Used to lazily create initial layout state.\n */\nfunction init({ pathname, menuConfig }) {\n\tconst currentPage = pathname.slice(1 /* Remove leading slash. */);\n\tconst pageConfig =\n\t\tfindPageConfig(currentPage, menuConfig.aside.items) || findPageConfig(currentPage, menuConfig.header.items);\n\n\tconst state = { subheader: {}, splashScreen: { refs: {} } };\n\n\tif (pageConfig) {\n\t\tstate.subheader.title = pageConfig.title;\n\t}\n\n\treturn state;\n}\n\nfunction reducer(state, { type, payload }) {\n\tif (type === actionTypes.INIT) {\n\t\tconst nextState = init(payload);\n\n\t\t// Update only subheader.\n\t\treturn { ...state, subheader: nextState.subheader };\n\t}\n\n\tif (type === actionTypes.SET_SUBHEADER) {\n\t\treturn { ...state, subheader: payload };\n\t}\n\n\tif (type === actionTypes.SHOW_SPLASH_SCREEN) {\n\t\treturn {\n\t\t\t...state,\n\t\t\tsplashScreen: {\n\t\t\t\t...state.splashScreen,\n\t\t\t\trefs: { ...state.splashScreen.refs, [payload.id]: true },\n\t\t\t},\n\t\t};\n\t}\n\n\tif (type === actionTypes.HIDE_SPLASH_SCREEN) {\n\t\tconst { [payload.id]: skip, ...nextRefs } = state.splashScreen.refs;\n\n\t\treturn {\n\t\t\t...state,\n\t\t\tsplashScreen: { ...state.splashScreen, refs: nextRefs },\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Creates layout reducer and provides it's `state` and ` dispatch`.\n */\nexport function LayoutContextProvider({ history, children, menuConfig }) {\n\tconst [state, dispatch] = useReducer(\n\t\treducer,\n\t\t{ menuConfig, pathname: history.location.pathname },\n\t\t// See https://reactjs.org/docs/hooks-reference.html#lazy-initialization\n\t\tinit,\n\t);\n\n\t// Subscribe to history changes and reinitialize on each change.\n\tuseEffect(\n\t\t() =>\n\t\t\thistory.listen(({ pathname }) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: actionTypes.INIT,\n\t\t\t\t\tpayload: { pathname, menuConfig },\n\t\t\t\t});\n\t\t\t}),\n\n\t\t/**\n\t\t * Passing `history` and `menuConfig` to `deps` ensures that `useEffect`\n\t\t * will cleanup current `history` listener and will dispatch `INIT`\n\t\t * with `menuConfig` reference from current render.\n\t\t *\n\t\t * @see https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\n\t\t */\n\t\t[history, menuConfig],\n\t);\n\n\tconst { refs: splashScreenRefs } = state.splashScreen;\n\tconst splashScreenVisible = useMemo(() => Object.keys(splashScreenRefs).length > 0, [splashScreenRefs]);\n\n\tuseEffect(() => {\n\t\tconst splashScreen = document.getElementById('splash-screen');\n\n\t\tif (splashScreenVisible) {\n\t\t\tsplashScreen.classList.remove('d-none');\n\n\t\t\treturn () => {\n\t\t\t\tsplashScreen.classList.add('d-none');\n\t\t\t};\n\t\t}\n\n\t\tconst timeout = setTimeout(() => {\n\t\t\tsplashScreen.classList.add('d-none');\n\t\t}, 1000);\n\n\t\treturn () => {\n\t\t\tclearTimeout(timeout);\n\t\t};\n\t}, [splashScreenVisible]);\n\n\t// Pass state and dispatch to it's contexts.\n\treturn (\n\t\t<LayoutContext.State.Provider value={state}>\n\t\t\t<LayoutContext.Dispatch.Provider value={dispatch}>{children}</LayoutContext.Dispatch.Provider>\n\t\t</LayoutContext.State.Provider>\n\t);\n}\n\n/**\n * Used to access latest layout context state.\n *\n * @example\n *\n * export function Subheader() {\n *   return (\n *     <LayoutContextConsumer>\n *       {({ subheader: { title } }) => <h1>{title}</h1>}\n *     </LayoutContextConsumer>\n *   );\n * }\n */\nexport const LayoutContextConsumer = LayoutContext.State.Consumer;\n\n/**\n * Hook to access latest layout context state.\n *\n * @example\n *\n * export function Subheader() {\n *   const { subheader: { title } } = useLayoutContext();\n *\n *   return <h1>{title}</h1>;\n * }\n */\nexport function useLayoutContext() {\n\tconst context = useContext(LayoutContext.State);\n\n\tif (!context) {\n\t\tthrow new Error('');\n\t}\n\n\treturn context;\n}\n\n/**\n * Used to override layout subheader state.\n */\nexport function LayoutSubheader({ title, breadcrumb, description }) {\n\tconst dispatch = useContext(LayoutContext.Dispatch);\n\n\tuseEffect(() => {\n\t\tdispatch({\n\t\t\ttype: actionTypes.SET_SUBHEADER,\n\t\t\tpayload: { title, breadcrumb, description },\n\t\t});\n\t}, [dispatch, title, breadcrumb, description]);\n\n\treturn null;\n}\n\nexport function LayoutSplashScreen({ visible = false }) {\n\tconst dispatch = useContext(LayoutContext.Dispatch);\n\n\tuseEffect(() => {\n\t\tif (!visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst id = Math.random();\n\n\t\tdispatch({ type: actionTypes.SHOW_SPLASH_SCREEN, payload: { id } });\n\n\t\treturn () => {\n\t\t\tdispatch({ type: actionTypes.HIDE_SPLASH_SCREEN, payload: { id } });\n\t\t};\n\t}, [visible, dispatch]);\n\n\treturn null;\n}\n"]},"metadata":{},"sourceType":"module"}