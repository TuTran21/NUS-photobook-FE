{"ast":null,"code":"var _jsxFileName = \"/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/AuthForms/ResetPasswordForm.js\";\nimport React, { Component, useState } from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport { Link, Redirect, useParams } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport clsx from 'clsx';\nimport { withSnackbar } from 'notistack';\nimport * as _ from 'lodash'; // import * as auth from '../../store/ducks/auth.duck';\n// import { requestPassword } from '../../crud/auth.crud';\n\nfunction ResetPasswordForm(props) {\n  const {\n    intl,\n    handleResetPasswordPromise\n  } = props;\n  const [isRequested, setRequested] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [loadingButtonStyle, setLoadingButtonStyle] = useState({\n    paddingRight: '2.5rem'\n  });\n  let {\n    token\n  } = useParams();\n\n  const enableLoading = () => {\n    setLoading(true);\n    setLoadingButtonStyle({\n      paddingRight: '3.5rem'\n    });\n  };\n\n  const disableLoading = () => {\n    setLoading(false);\n    setLoadingButtonStyle({\n      paddingRight: '2.5rem'\n    });\n  }; // const getTokenFromUrl = () => {\n  // \tconst { match } = props;\n  // \tconsole.log(match);\n  // \tif (!_.isEmpty(_.get(match, 'params'))) {\n  // \t\tconst { token } = useParams();\n  // \t\treturn token;\n  // \t}\n  // \treturn '';\n  // };\n\n\n  const resetError = (err, setStatus, setSubmitting) => {\n    disableLoading();\n    let message = '';\n\n    switch (err.code) {\n      case 400:\n        message = 'TOKEN_EXPIRED';\n        break;\n\n      case 404:\n        message = 'AUTH.VALIDATION.USER_NOT_FOUND';\n        break;\n\n      case 500:\n        message = 'SERVER_INTERNAL_ERROR';\n        break;\n\n      default:\n        message = 'TRY_AGAIN_LATER';\n        break;\n    }\n\n    props.enqueueSnackbar(intl.formatMessage({\n      id: message\n    }), {\n      variant: 'error',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    });\n    setSubmitting(false);\n    setStatus(intl.formatMessage({\n      id: message\n    }));\n  };\n\n  const resetSuccess = (res, setStatus, setSubmitting) => {\n    disableLoading();\n    props.enqueueSnackbar(intl.formatMessage({\n      id: 'AUTH.RESET.SUCCESS'\n    }), {\n      variant: 'success',\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    });\n    setSubmitting(false);\n    setStatus(intl.formatMessage({\n      id: 'AUTH.FORGOT.REQUEST_SUCCESS'\n    }));\n    setRequested(true);\n  };\n\n  if (isRequested) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/auth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 10\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-grid__item kt-grid__item--fluid  kt-grid__item--order-tablet-and-mobile-1  kt-login__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-login__body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-login__form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-login__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"AUTH.RESET.TITLE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 8\n    }\n  }))), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      newPassword: '',\n      confirmPassword: ''\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.newPassword) {\n        errors.newPassword = intl.formatMessage({\n          id: 'AUTH.VALIDATION.REQUIRED_FIELD'\n        });\n      }\n\n      if (!values.confirmPassword) {\n        errors.confirmPassword = intl.formatMessage({\n          id: 'AUTH.VALIDATION.REQUIRED_FIELD'\n        });\n      } else if (values.newPassword !== values.confirmPassword) {\n        errors.confirmPassword = intl.formatMessage({\n          id: 'AUTH.VALIDATION.MISMATCH_PASSWORD'\n        });\n      }\n\n      return errors;\n    },\n    onSubmit: (values, {\n      setStatus,\n      setSubmitting\n    }) => {\n      enableLoading();\n      setTimeout(() => {\n        const payload = {\n          token: token,\n          newPassword: values.newPassword\n        };\n        handleResetPasswordPromise(payload).then(res => {\n          resetSuccess(res, setStatus, setSubmitting);\n        }).catch(err => {\n          resetError(err, setStatus, setSubmitting);\n        });\n      }, 1000);\n      return;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 6\n    }\n  }, ({\n    values,\n    status,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"kt-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 8\n    }\n  }, status ? /*#__PURE__*/React.createElement(\"div\", {\n    role: \"alert\",\n    className: \"alert alert-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, status)) : /*#__PURE__*/React.createElement(\"div\", {\n    role: \"alert\",\n    className: \"alert alert-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'AUTH.RESET.DESC'\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"password\",\n    label: intl.formatMessage({\n      id: 'AUTH.INPUT.PASSWORD'\n    }),\n    margin: \"normal\",\n    fullWidth: true,\n    name: \"newPassword\",\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.newPassword,\n    helperText: touched.newPassword && errors.newPassword,\n    error: Boolean(touched.newPassword && errors.newPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"password\",\n    margin: \"normal\",\n    label: intl.formatMessage({\n      id: 'AUTH.INPUT.CONFIRM_PASSWORD'\n    }),\n    className: \"kt-width-full\",\n    name: \"confirmPassword\",\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.confirmPassword,\n    helperText: touched.confirmPassword && errors.confirmPassword,\n    error: Boolean(touched.confirmPassword && errors.confirmPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-login__actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/auth\",\n    className: \"btn btn-secondary btn-elevate kt-login__btn-secondary d-flex align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 10\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: `btn btn-primary btn-elevate kt-login__btn-primary ${clsx({\n      'kt-spinner kt-spinner--right kt-spinner--md kt-spinner--light': loading\n    })}`,\n    style: loadingButtonStyle,\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 10\n    }\n  }, \"Submit\")))))));\n}\n\nexport default injectIntl(withSnackbar(ResetPasswordForm));","map":{"version":3,"sources":["/home/nus/TuTran/projects/Web/training/photobook/FE/src/app/views/components/AuthForms/ResetPasswordForm.js"],"names":["React","Component","useState","Formik","connect","TextField","Link","Redirect","useParams","FormattedMessage","injectIntl","clsx","withSnackbar","_","ResetPasswordForm","props","intl","handleResetPasswordPromise","isRequested","setRequested","loading","setLoading","loadingButtonStyle","setLoadingButtonStyle","paddingRight","token","enableLoading","disableLoading","resetError","err","setStatus","setSubmitting","message","code","enqueueSnackbar","formatMessage","id","variant","anchorOrigin","vertical","horizontal","resetSuccess","res","newPassword","confirmPassword","values","errors","setTimeout","payload","then","catch","status","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Boolean"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport { Link, Redirect, useParams } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport clsx from 'clsx';\nimport { withSnackbar } from 'notistack';\nimport * as _ from 'lodash';\n// import * as auth from '../../store/ducks/auth.duck';\n// import { requestPassword } from '../../crud/auth.crud';\n\nfunction ResetPasswordForm(props) {\n\tconst { intl, handleResetPasswordPromise } = props;\n\tconst [isRequested, setRequested] = useState(false);\n\tconst [loading, setLoading] = useState(false);\n\tconst [loadingButtonStyle, setLoadingButtonStyle] = useState({\n\t\tpaddingRight: '2.5rem',\n\t});\n\tlet { token } = useParams();\n\tconst enableLoading = () => {\n\t\tsetLoading(true);\n\t\tsetLoadingButtonStyle({ paddingRight: '3.5rem' });\n\t};\n\n\tconst disableLoading = () => {\n\t\tsetLoading(false);\n\t\tsetLoadingButtonStyle({ paddingRight: '2.5rem' });\n\t};\n\n\t// const getTokenFromUrl = () => {\n\t// \tconst { match } = props;\n\t// \tconsole.log(match);\n\t// \tif (!_.isEmpty(_.get(match, 'params'))) {\n\t// \t\tconst { token } = useParams();\n\t// \t\treturn token;\n\t// \t}\n\t// \treturn '';\n\t// };\n\n\tconst resetError = (err, setStatus, setSubmitting) => {\n\t\tdisableLoading();\n\t\tlet message = '';\n\t\tswitch (err.code) {\n\t\t\tcase 400:\n\t\t\t\tmessage = 'TOKEN_EXPIRED';\n\t\t\t\tbreak;\n\t\t\tcase 404:\n\t\t\t\tmessage = 'AUTH.VALIDATION.USER_NOT_FOUND';\n\t\t\t\tbreak;\n\t\t\tcase 500:\n\t\t\t\tmessage = 'SERVER_INTERNAL_ERROR';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmessage = 'TRY_AGAIN_LATER';\n\t\t\t\tbreak;\n\t\t}\n\t\tprops.enqueueSnackbar(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: message,\n\t\t\t}),\n\t\t\t{\n\t\t\t\tvariant: 'error',\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tsetSubmitting(false);\n\t\tsetStatus(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: message,\n\t\t\t}),\n\t\t);\n\t};\n\n\tconst resetSuccess = (res, setStatus, setSubmitting) => {\n\t\tdisableLoading();\n\t\tprops.enqueueSnackbar(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: 'AUTH.RESET.SUCCESS',\n\t\t\t}),\n\t\t\t{\n\t\t\t\tvariant: 'success',\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tsetSubmitting(false);\n\t\tsetStatus(\n\t\t\tintl.formatMessage({\n\t\t\t\tid: 'AUTH.FORGOT.REQUEST_SUCCESS',\n\t\t\t}),\n\t\t);\n\t\tsetRequested(true);\n\t};\n\n\tif (isRequested) {\n\t\treturn <Redirect to=\"/auth\" />;\n\t}\n\n\treturn (\n\t\t<div className=\"kt-grid__item kt-grid__item--fluid  kt-grid__item--order-tablet-and-mobile-1  kt-login__wrapper\">\n\t\t\t<div className=\"kt-login__body\">\n\t\t\t\t<div className=\"kt-login__form\">\n\t\t\t\t\t<div className=\"kt-login__title\">\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t<FormattedMessage id=\"AUTH.RESET.TITLE\" />\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tinitialValues={{ newPassword: '', confirmPassword: '' }}\n\t\t\t\t\t\tvalidate={values => {\n\t\t\t\t\t\t\tconst errors = {};\n\n\t\t\t\t\t\t\tif (!values.newPassword) {\n\t\t\t\t\t\t\t\terrors.newPassword = intl.formatMessage({\n\t\t\t\t\t\t\t\t\tid: 'AUTH.VALIDATION.REQUIRED_FIELD',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!values.confirmPassword) {\n\t\t\t\t\t\t\t\terrors.confirmPassword = intl.formatMessage({\n\t\t\t\t\t\t\t\t\tid: 'AUTH.VALIDATION.REQUIRED_FIELD',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else if (values.newPassword !== values.confirmPassword) {\n\t\t\t\t\t\t\t\terrors.confirmPassword = intl.formatMessage({\n\t\t\t\t\t\t\t\t\tid: 'AUTH.VALIDATION.MISMATCH_PASSWORD',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn errors;\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonSubmit={(values, { setStatus, setSubmitting }) => {\n\t\t\t\t\t\t\tenableLoading();\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tconst payload = { token: token, newPassword: values.newPassword };\n\t\t\t\t\t\t\t\thandleResetPasswordPromise(payload)\n\t\t\t\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\t\t\t\tresetSuccess(res, setStatus, setSubmitting);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\t\t\t\tresetError(err, setStatus, setSubmitting);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{({\n\t\t\t\t\t\t\tvalues,\n\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\terrors,\n\t\t\t\t\t\t\ttouched,\n\t\t\t\t\t\t\thandleChange,\n\t\t\t\t\t\t\thandleBlur,\n\t\t\t\t\t\t\thandleSubmit,\n\t\t\t\t\t\t\tisSubmitting,\n\t\t\t\t\t\t}) => (\n\t\t\t\t\t\t\t<form onSubmit={handleSubmit} className=\"kt-form\">\n\t\t\t\t\t\t\t\t{status ? (\n\t\t\t\t\t\t\t\t\t<div role=\"alert\" className=\"alert alert-danger\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"alert-text\">{status}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div role=\"alert\" className=\"alert alert-info\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"alert-text\">\n\t\t\t\t\t\t\t\t\t\t\t{intl.formatMessage({\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'AUTH.RESET.DESC',\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\tlabel={intl.formatMessage({ id: 'AUTH.INPUT.PASSWORD' })}\n\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\t\t\t\tname=\"newPassword\"\n\t\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\tvalue={values.newPassword}\n\t\t\t\t\t\t\t\t\t\thelperText={touched.newPassword && errors.newPassword}\n\t\t\t\t\t\t\t\t\t\terror={Boolean(touched.newPassword && errors.newPassword)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\tlabel={intl.formatMessage({ id: 'AUTH.INPUT.CONFIRM_PASSWORD' })}\n\t\t\t\t\t\t\t\t\t\tclassName=\"kt-width-full\"\n\t\t\t\t\t\t\t\t\t\tname=\"confirmPassword\"\n\t\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\tvalue={values.confirmPassword}\n\t\t\t\t\t\t\t\t\t\thelperText={touched.confirmPassword && errors.confirmPassword}\n\t\t\t\t\t\t\t\t\t\terror={Boolean(touched.confirmPassword && errors.confirmPassword)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"kt-login__actions\">\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/auth\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-secondary btn-elevate kt-login__btn-secondary d-flex align-items-center\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tBack\n\t\t\t\t\t\t\t\t\t</Link>\n\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\tclassName={`btn btn-primary btn-elevate kt-login__btn-primary ${clsx({\n\t\t\t\t\t\t\t\t\t\t\t'kt-spinner kt-spinner--right kt-spinner--md kt-spinner--light': loading,\n\t\t\t\t\t\t\t\t\t\t})}`}\n\t\t\t\t\t\t\t\t\t\tstyle={loadingButtonStyle}\n\t\t\t\t\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Formik>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default injectIntl(withSnackbar(ResetPasswordForm));\n"]},"metadata":{},"sourceType":"module"}